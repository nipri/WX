
RTC_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802006  00802006  00000786  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000007b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d00  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f6  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000022b5  00000000  00000000  00002fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  0000528c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00025634  00000000  00000000  000054b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e3  00000000  00000000  0002aaec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0002b1cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008d38  00000000  00000000  0002b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	15 c2       	rjmp	.+1066   	; 0x454 <__vector_10>
  2a:	00 00       	nop
  2c:	36 c2       	rjmp	.+1132   	; 0x49a <__vector_11>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	83 c0       	rjmp	.+262    	; 0x23c <__bad_interrupt>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec ee       	ldi	r30, 0xEC	; 236
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 30       	cpi	r26, 0x06	; 6
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	20 e2       	ldi	r18, 0x20	; 32
 22a:	a6 e0       	ldi	r26, 0x06	; 6
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a4 31       	cpi	r26, 0x14	; 20
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	f5 d1       	rcall	.+1002   	; 0x624 <main>
 23a:	56 c2       	rjmp	.+1196   	; 0x6e8 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	80 93 70 00 	sts	0x0070, r24
 244:	80 93 71 00 	sts	0x0071, r24
 248:	80 93 72 00 	sts	0x0072, r24
 24c:	80 93 73 00 	sts	0x0073, r24
 250:	80 93 74 00 	sts	0x0074, r24
 254:	80 93 75 00 	sts	0x0075, r24
 258:	80 93 76 00 	sts	0x0076, r24
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	e0 e4       	ldi	r30, 0x40	; 64
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	83 83       	std	Z+3, r24	; 0x03
 264:	08 95       	ret

00000266 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 266:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 268:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 26a:	e8 2f       	mov	r30, r24
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	e0 59       	subi	r30, 0x90	; 144
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	60 95       	com	r22
 274:	80 81       	ld	r24, Z
 276:	68 23       	and	r22, r24
 278:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 27a:	9f bf       	out	0x3f, r25	; 63
 27c:	08 95       	ret

0000027e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	fc 01       	movw	r30, r24
 284:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 28a:	c6 2f       	mov	r28, r22
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	de 01       	movw	r26, r28
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <ioport_configure_port_pin+0x1a>
 294:	b5 95       	asr	r27
 296:	a7 95       	ror	r26
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <ioport_configure_port_pin+0x16>
 29c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 29e:	50 83       	st	Z, r21
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 2a6:	28 30       	cpi	r18, 0x08	; 8
 2a8:	31 05       	cpc	r19, r1
 2aa:	89 f7       	brne	.-30     	; 0x28e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 2ac:	40 ff       	sbrs	r20, 0
 2ae:	0a c0       	rjmp	.+20     	; 0x2c4 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 2b0:	41 ff       	sbrs	r20, 1
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 2b4:	fc 01       	movw	r30, r24
 2b6:	65 83       	std	Z+5, r22	; 0x05
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 2ba:	fc 01       	movw	r30, r24
 2bc:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 2be:	fc 01       	movw	r30, r24
 2c0:	61 83       	std	Z+1, r22	; 0x01
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 2c4:	fc 01       	movw	r30, r24
 2c6:	62 83       	std	Z+2, r22	; 0x02
	}
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 2ce:	43 e0       	ldi	r20, 0x03	; 3
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	d2 df       	rcall	.-92     	; 0x27e <ioport_configure_port_pin>
 2da:	43 e0       	ldi	r20, 0x03	; 3
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	80 e8       	ldi	r24, 0x80	; 128
 2e2:	96 e0       	ldi	r25, 0x06	; 6
 2e4:	cc df       	rcall	.-104    	; 0x27e <ioport_configure_port_pin>
 2e6:	43 e0       	ldi	r20, 0x03	; 3
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	c6 df       	rcall	.-116    	; 0x27e <ioport_configure_port_pin>
 2f2:	43 e0       	ldi	r20, 0x03	; 3
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	68 e0       	ldi	r22, 0x08	; 8
 2f8:	80 e8       	ldi	r24, 0x80	; 128
 2fa:	96 e0       	ldi	r25, 0x06	; 6
 2fc:	c0 df       	rcall	.-128    	; 0x27e <ioport_configure_port_pin>
 2fe:	43 e0       	ldi	r20, 0x03	; 3
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	60 e1       	ldi	r22, 0x10	; 16
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	96 e0       	ldi	r25, 0x06	; 6
 308:	ba df       	rcall	.-140    	; 0x27e <ioport_configure_port_pin>
 30a:	43 e0       	ldi	r20, 0x03	; 3
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	60 e2       	ldi	r22, 0x20	; 32
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	96 e0       	ldi	r25, 0x06	; 6
 314:	b4 df       	rcall	.-152    	; 0x27e <ioport_configure_port_pin>
 316:	43 e0       	ldi	r20, 0x03	; 3
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	60 e4       	ldi	r22, 0x40	; 64
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	96 e0       	ldi	r25, 0x06	; 6
 320:	ae df       	rcall	.-164    	; 0x27e <ioport_configure_port_pin>
 322:	43 e0       	ldi	r20, 0x03	; 3
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	60 e8       	ldi	r22, 0x80	; 128
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	96 e0       	ldi	r25, 0x06	; 6
 32c:	a8 df       	rcall	.-176    	; 0x27e <ioport_configure_port_pin>
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	58 e1       	ldi	r21, 0x18	; 24
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	80 e6       	ldi	r24, 0x60	; 96
 336:	96 e0       	ldi	r25, 0x06	; 6
 338:	a2 df       	rcall	.-188    	; 0x27e <ioport_configure_port_pin>
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	58 e1       	ldi	r21, 0x18	; 24
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	80 e6       	ldi	r24, 0x60	; 96
 342:	96 e0       	ldi	r25, 0x06	; 6
 344:	9c df       	rcall	.-200    	; 0x27e <ioport_configure_port_pin>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	58 e1       	ldi	r21, 0x18	; 24
 34a:	64 e0       	ldi	r22, 0x04	; 4
 34c:	80 e6       	ldi	r24, 0x60	; 96
 34e:	96 e0       	ldi	r25, 0x06	; 6
 350:	96 df       	rcall	.-212    	; 0x27e <ioport_configure_port_pin>
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	58 e1       	ldi	r21, 0x18	; 24
 356:	68 e0       	ldi	r22, 0x08	; 8
 358:	80 e6       	ldi	r24, 0x60	; 96
 35a:	96 e0       	ldi	r25, 0x06	; 6
 35c:	90 df       	rcall	.-224    	; 0x27e <ioport_configure_port_pin>
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	58 e1       	ldi	r21, 0x18	; 24
 362:	60 e1       	ldi	r22, 0x10	; 16
 364:	80 e6       	ldi	r24, 0x60	; 96
 366:	96 e0       	ldi	r25, 0x06	; 6
 368:	8a df       	rcall	.-236    	; 0x27e <ioport_configure_port_pin>
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	58 e1       	ldi	r21, 0x18	; 24
 36e:	60 e2       	ldi	r22, 0x20	; 32
 370:	80 e6       	ldi	r24, 0x60	; 96
 372:	96 e0       	ldi	r25, 0x06	; 6
 374:	84 df       	rcall	.-248    	; 0x27e <ioport_configure_port_pin>
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	58 e1       	ldi	r21, 0x18	; 24
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	80 ee       	ldi	r24, 0xE0	; 224
 37e:	97 e0       	ldi	r25, 0x07	; 7
 380:	7e df       	rcall	.-260    	; 0x27e <ioport_configure_port_pin>
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	58 e1       	ldi	r21, 0x18	; 24
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	80 ee       	ldi	r24, 0xE0	; 224
 38a:	97 e0       	ldi	r25, 0x07	; 7
 38c:	78 cf       	rjmp	.-272    	; 0x27e <ioport_configure_port_pin>
 38e:	08 95       	ret

00000390 <rtc_get_time>:
 *       sleep.
 * \note Without this errata this function can block for up to 1 RTC
 *       clock source cycle after waking up from sleep.
 */
uint32_t rtc_get_time(void)
{
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
 394:	e0 e0       	ldi	r30, 0x00	; 0
 396:	f4 e0       	ldi	r31, 0x04	; 4
 398:	81 81       	ldd	r24, Z+1	; 0x01
{
	irqflags_t flags;
	uint16_t   count_high;
	uint16_t   count_low;

	while (rtc_is_busy());
 39a:	80 fd       	sbrc	r24, 0
 39c:	fd cf       	rjmp	.-6      	; 0x398 <rtc_get_time+0x8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 39e:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
 3a0:	f8 94       	cli

	flags = cpu_irq_save();
	count_high = rtc_data.counter_high;
 3a2:	40 91 0c 20 	lds	r20, 0x200C
 3a6:	50 91 0d 20 	lds	r21, 0x200D
	count_low = RTC.CNT;
 3aa:	e0 e0       	ldi	r30, 0x00	; 0
 3ac:	f4 e0       	ldi	r31, 0x04	; 4
 3ae:	80 85       	ldd	r24, Z+8	; 0x08
 3b0:	91 85       	ldd	r25, Z+9	; 0x09
	// Test for possible pending increase of high count value
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <rtc_get_time+0x30>
 3b6:	33 81       	ldd	r19, Z+3	; 0x03
 3b8:	30 ff       	sbrs	r19, 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <rtc_get_time+0x30>
		count_high++;
 3bc:	4f 5f       	subi	r20, 0xFF	; 255
 3be:	5f 4f       	sbci	r21, 0xFF	; 255
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 3c0:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	ba 01       	movw	r22, r20
 3c8:	55 27       	eor	r21, r21
 3ca:	44 27       	eor	r20, r20
 3cc:	a0 e0       	ldi	r26, 0x00	; 0
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	8a 01       	movw	r16, r20
 3d2:	9b 01       	movw	r18, r22
 3d4:	08 2b       	or	r16, r24
 3d6:	19 2b       	or	r17, r25
 3d8:	2a 2b       	or	r18, r26
 3da:	3b 2b       	or	r19, r27
 3dc:	c9 01       	movw	r24, r18
 3de:	b8 01       	movw	r22, r16
}
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 3e6:	e0 e0       	ldi	r30, 0x00	; 0
 3e8:	f4 e0       	ldi	r31, 0x04	; 4
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
 3ee:	64 87       	std	Z+12, r22	; 0x0c
 3f0:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
 3f2:	60 93 10 20 	sts	0x2010, r22
 3f6:	70 93 11 20 	sts	0x2011, r23
	rtc_data.alarm_high = time >> 16;
 3fa:	80 93 0e 20 	sts	0x200E, r24
 3fe:	90 93 0f 20 	sts	0x200F, r25
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
 402:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
 404:	80 fd       	sbrc	r24, 0
 406:	fd cf       	rjmp	.-6      	; 0x402 <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
 408:	e0 e0       	ldi	r30, 0x00	; 0
 40a:	f4 e0       	ldi	r31, 0x04	; 4
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	82 83       	std	Z+2, r24	; 0x02
 414:	08 95       	ret

00000416 <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
 416:	80 93 12 20 	sts	0x2012, r24
 41a:	90 93 13 20 	sts	0x2013, r25
 41e:	08 95       	ret

00000420 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 420:	64 e0       	ldi	r22, 0x04	; 4
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	20 df       	rcall	.-448    	; 0x266 <sysclk_enable_module>
	RTC.PER = 0xffff;
 426:	e0 e0       	ldi	r30, 0x00	; 0
 428:	f4 e0       	ldi	r31, 0x04	; 4
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	82 87       	std	Z+10, r24	; 0x0a
 430:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
 432:	10 86       	std	Z+8, r1	; 0x08
 434:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 436:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 438:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 43a:	e9 e0       	ldi	r30, 0x09	; 9
 43c:	f0 e2       	ldi	r31, 0x20	; 32
 43e:	90 81       	ld	r25, Z
 440:	9f 5f       	subi	r25, 0xFF	; 255
 442:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 444:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 446:	e0 e0       	ldi	r30, 0x00	; 0
 448:	f4 e0       	ldi	r31, 0x04	; 4
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	80 83       	st	Z, r24
 452:	08 95       	ret

00000454 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	08 b6       	in	r0, 0x38	; 56
 460:	0f 92       	push	r0
 462:	18 be       	out	0x38, r1	; 56
 464:	0b b6       	in	r0, 0x3b	; 59
 466:	0f 92       	push	r0
 468:	1b be       	out	0x3b, r1	; 59
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	rtc_data.counter_high++;
 472:	ec e0       	ldi	r30, 0x0C	; 12
 474:	f0 e2       	ldi	r31, 0x20	; 32
 476:	80 81       	ld	r24, Z
 478:	91 81       	ldd	r25, Z+1	; 0x01
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	80 83       	st	Z, r24
 47e:	91 83       	std	Z+1, r25	; 0x01
}
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0b be       	out	0x3b, r0	; 59
 48c:	0f 90       	pop	r0
 48e:	08 be       	out	0x38, r0	; 56
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	08 b6       	in	r0, 0x38	; 56
 4a6:	0f 92       	push	r0
 4a8:	18 be       	out	0x38, r1	; 56
 4aa:	09 b6       	in	r0, 0x39	; 57
 4ac:	0f 92       	push	r0
 4ae:	19 be       	out	0x39, r1	; 57
 4b0:	0b b6       	in	r0, 0x3b	; 59
 4b2:	0f 92       	push	r0
 4b4:	1b be       	out	0x3b, r1	; 59
 4b6:	cf 92       	push	r12
 4b8:	df 92       	push	r13
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
 4da:	40 91 0c 20 	lds	r20, 0x200C
 4de:	50 91 0d 20 	lds	r21, 0x200D
 4e2:	80 91 0e 20 	lds	r24, 0x200E
 4e6:	90 91 0f 20 	lds	r25, 0x200F
 4ea:	48 17       	cp	r20, r24
 4ec:	59 07       	cpc	r21, r25
 4ee:	f0 f1       	brcs	.+124    	; 0x56c <__vector_11+0xd2>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	e0 e0       	ldi	r30, 0x00	; 0
 4f4:	f4 e0       	ldi	r31, 0x04	; 4
 4f6:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
 4f8:	e0 91 12 20 	lds	r30, 0x2012
 4fc:	f0 91 13 20 	lds	r31, 0x2013
 500:	30 97       	sbiw	r30, 0x00	; 0
 502:	a1 f1       	breq	.+104    	; 0x56c <__vector_11+0xd2>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
 504:	a0 e0       	ldi	r26, 0x00	; 0
 506:	b4 e0       	ldi	r27, 0x04	; 4
 508:	18 96       	adiw	r26, 0x08	; 8
 50a:	8d 91       	ld	r24, X+
 50c:	9c 91       	ld	r25, X
 50e:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	ba 01       	movw	r22, r20
 516:	55 27       	eor	r21, r21
 518:	44 27       	eor	r20, r20
					| RTC.CNT;
 51a:	a0 e0       	ldi	r26, 0x00	; 0
 51c:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
 51e:	8a 01       	movw	r16, r20
 520:	9b 01       	movw	r18, r22
 522:	08 2b       	or	r16, r24
 524:	19 2b       	or	r17, r25
 526:	2a 2b       	or	r18, r26
 528:	3b 2b       	or	r19, r27
 52a:	c9 01       	movw	r24, r18
 52c:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 52e:	00 91 0e 20 	lds	r16, 0x200E
 532:	10 91 0f 20 	lds	r17, 0x200F
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	98 01       	movw	r18, r16
 53c:	11 27       	eor	r17, r17
 53e:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
 540:	c0 90 10 20 	lds	r12, 0x2010
 544:	d0 90 11 20 	lds	r13, 0x2011
 548:	e1 2c       	mov	r14, r1
 54a:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
 54c:	0c 29       	or	r16, r12
 54e:	1d 29       	or	r17, r13
 550:	2e 29       	or	r18, r14
 552:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
 554:	06 17       	cp	r16, r22
 556:	17 07       	cpc	r17, r23
 558:	28 07       	cpc	r18, r24
 55a:	39 07       	cpc	r19, r25
 55c:	30 f0       	brcs	.+12     	; 0x56a <__vector_11+0xd0>
				count = alarm + 1;
 55e:	c9 01       	movw	r24, r18
 560:	b8 01       	movw	r22, r16
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
 56a:	19 95       	eicall
		}
	}
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	df 90       	pop	r13
 58e:	cf 90       	pop	r12
 590:	0f 90       	pop	r0
 592:	0b be       	out	0x3b, r0	; 59
 594:	0f 90       	pop	r0
 596:	09 be       	out	0x39, r0	; 57
 598:	0f 90       	pop	r0
 59a:	08 be       	out	0x38, r0	; 56
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <alarm>:
 *
 * This outputs the last two digits of current time in BCD on the board LEDS,
 * and then reschedules the alarm in 1 second.
 */
static void alarm(uint32_t time)
{
 5a6:	4f 92       	push	r4
 5a8:	5f 92       	push	r5
 5aa:	6f 92       	push	r6
 5ac:	7f 92       	push	r7
 5ae:	8f 92       	push	r8
 5b0:	9f 92       	push	r9
 5b2:	af 92       	push	r10
 5b4:	bf 92       	push	r11
 5b6:	cf 92       	push	r12
 5b8:	df 92       	push	r13
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	6b 01       	movw	r12, r22
 5c0:	7c 01       	movw	r14, r24
	/* Since the current time will give alarm when rolling over to
	 * next time unit, we just call with that one.
	 * This is safe to here since it's called from a time unit roll
	 * over.
	 */
	rtc_set_alarm(time);
 5c2:	11 df       	rcall	.-478    	; 0x3e6 <rtc_set_alarm>

	// Extract last two digits from time, and put them in bcd
	bcd = time % 10;
 5c4:	0f 2e       	mov	r0, r31
 5c6:	fa e0       	ldi	r31, 0x0A	; 10
 5c8:	8f 2e       	mov	r8, r31
 5ca:	91 2c       	mov	r9, r1
 5cc:	a1 2c       	mov	r10, r1
 5ce:	b1 2c       	mov	r11, r1
 5d0:	f0 2d       	mov	r31, r0
 5d2:	c7 01       	movw	r24, r14
 5d4:	b6 01       	movw	r22, r12
 5d6:	a5 01       	movw	r20, r10
 5d8:	94 01       	movw	r18, r8
 5da:	64 d0       	rcall	.+200    	; 0x6a4 <__udivmodsi4>
 5dc:	2b 01       	movw	r4, r22
 5de:	3c 01       	movw	r6, r24
	time -= bcd;
 5e0:	c7 01       	movw	r24, r14
 5e2:	b6 01       	movw	r22, r12
 5e4:	64 19       	sub	r22, r4
 5e6:	75 09       	sbc	r23, r5
 5e8:	86 09       	sbc	r24, r6
 5ea:	97 09       	sbc	r25, r7
	time /= 10;
 5ec:	a5 01       	movw	r20, r10
 5ee:	94 01       	movw	r18, r8
 5f0:	59 d0       	rcall	.+178    	; 0x6a4 <__udivmodsi4>
	bcd = bcd | ((time % 10) << 4);
 5f2:	ca 01       	movw	r24, r20
 5f4:	b9 01       	movw	r22, r18
 5f6:	a5 01       	movw	r20, r10
 5f8:	94 01       	movw	r18, r8
 5fa:	54 d0       	rcall	.+168    	; 0x6a4 <__udivmodsi4>
 5fc:	62 95       	swap	r22
 5fe:	60 7f       	andi	r22, 0xF0	; 240
 600:	46 2a       	or	r4, r22

	// LEDS on xplain are active low, so invert the output
	bcd = ~bcd;
 602:	40 94       	com	r4

	LED_PORT.OUT = bcd;
 604:	e0 e8       	ldi	r30, 0x80	; 128
 606:	f6 e0       	ldi	r31, 0x06	; 6
 608:	44 82       	std	Z+4, r4	; 0x04
}
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	bf 90       	pop	r11
 614:	af 90       	pop	r10
 616:	9f 90       	pop	r9
 618:	8f 90       	pop	r8
 61a:	7f 90       	pop	r7
 61c:	6f 90       	pop	r6
 61e:	5f 90       	pop	r5
 620:	4f 90       	pop	r4
 622:	08 95       	ret

00000624 <main>:
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
 624:	87 e0       	ldi	r24, 0x07	; 7
 626:	e0 ea       	ldi	r30, 0xA0	; 160
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	82 83       	std	Z+2, r24	; 0x02

int main(void)
{
	pmic_init();
	board_init();
 62c:	50 de       	rcall	.-864    	; 0x2ce <board_init>
	sysclk_init();
 62e:	07 de       	rcall	.-1010   	; 0x23e <sysclk_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
 630:	10 92 06 20 	sts	0x2006, r1
 634:	10 92 07 20 	sts	0x2007, r1
 638:	10 92 08 20 	sts	0x2008, r1
 63c:	10 92 09 20 	sts	0x2009, r1
 640:	10 92 0a 20 	sts	0x200A, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 0b 20 	sts	0x200B, r24
	sleepmgr_init();

	rtc_init();
 64a:	ea de       	rcall	.-556    	; 0x420 <rtc_init>
	rtc_set_callback(alarm);
 64c:	83 ed       	ldi	r24, 0xD3	; 211
 64e:	92 e0       	ldi	r25, 0x02	; 2
 650:	e2 de       	rcall	.-572    	; 0x416 <rtc_set_callback>

	cpu_irq_enable();
 652:	78 94       	sei
 * \note Without this errata this function can block for up to 1 RTC clock
 *       source cycle after waking up from sleep.
 */
static inline void rtc_set_alarm_relative(uint32_t offset)
{
        rtc_set_alarm(rtc_get_time() + offset);
 654:	9d de       	rcall	.-710    	; 0x390 <rtc_get_time>
 656:	c7 de       	rcall	.-626    	; 0x3e6 <rtc_set_alarm>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 658:	c6 e0       	ldi	r28, 0x06	; 6
 65a:	d0 e2       	ldi	r29, 0x20	; 32
 65c:	87 e0       	ldi	r24, 0x07	; 7
 65e:	90 e2       	ldi	r25, 0x20	; 32
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
 660:	a8 e4       	ldi	r26, 0x48	; 72
 662:	b0 e0       	ldi	r27, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
 664:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 666:	28 81       	ld	r18, Y
 668:	21 11       	cpse	r18, r1
 66a:	07 c0       	rjmp	.+14     	; 0x67a <main+0x56>
 66c:	fc 01       	movw	r30, r24
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 66e:	2f 5f       	subi	r18, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 670:	31 91       	ld	r19, Z+
 672:	33 23       	and	r19, r19
 674:	e1 f3       	breq	.-8      	; 0x66e <main+0x4a>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
 676:	21 11       	cpse	r18, r1
 678:	02 c0       	rjmp	.+4      	; 0x67e <main+0x5a>
		cpu_irq_enable();
 67a:	78 94       	sei
 67c:	f3 cf       	rjmp	.-26     	; 0x664 <main+0x40>
 67e:	3c 91       	ld	r19, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
 680:	e2 2f       	mov	r30, r18
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	e1 50       	subi	r30, 0x01	; 1
 686:	f0 4e       	sbci	r31, 0xE0	; 224
 688:	23 2f       	mov	r18, r19
 68a:	21 7f       	andi	r18, 0xF1	; 241
 68c:	30 81       	ld	r19, Z
 68e:	23 2b       	or	r18, r19
 690:	2c 93       	st	X, r18
	sleep_enable();
 692:	2c 91       	ld	r18, X
 694:	21 60       	ori	r18, 0x01	; 1
 696:	2c 93       	st	X, r18

	cpu_irq_enable();
 698:	78 94       	sei
	sleep_enter();
 69a:	88 95       	sleep

	sleep_disable();
 69c:	2c 91       	ld	r18, X
 69e:	2e 7f       	andi	r18, 0xFE	; 254
 6a0:	2c 93       	st	X, r18
 6a2:	e0 cf       	rjmp	.-64     	; 0x664 <main+0x40>

000006a4 <__udivmodsi4>:
 6a4:	a1 e2       	ldi	r26, 0x21	; 33
 6a6:	1a 2e       	mov	r1, r26
 6a8:	aa 1b       	sub	r26, r26
 6aa:	bb 1b       	sub	r27, r27
 6ac:	fd 01       	movw	r30, r26
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <__udivmodsi4_ep>

000006b0 <__udivmodsi4_loop>:
 6b0:	aa 1f       	adc	r26, r26
 6b2:	bb 1f       	adc	r27, r27
 6b4:	ee 1f       	adc	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	a2 17       	cp	r26, r18
 6ba:	b3 07       	cpc	r27, r19
 6bc:	e4 07       	cpc	r30, r20
 6be:	f5 07       	cpc	r31, r21
 6c0:	20 f0       	brcs	.+8      	; 0x6ca <__udivmodsi4_ep>
 6c2:	a2 1b       	sub	r26, r18
 6c4:	b3 0b       	sbc	r27, r19
 6c6:	e4 0b       	sbc	r30, r20
 6c8:	f5 0b       	sbc	r31, r21

000006ca <__udivmodsi4_ep>:
 6ca:	66 1f       	adc	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	1a 94       	dec	r1
 6d4:	69 f7       	brne	.-38     	; 0x6b0 <__udivmodsi4_loop>
 6d6:	60 95       	com	r22
 6d8:	70 95       	com	r23
 6da:	80 95       	com	r24
 6dc:	90 95       	com	r25
 6de:	9b 01       	movw	r18, r22
 6e0:	ac 01       	movw	r20, r24
 6e2:	bd 01       	movw	r22, r26
 6e4:	cf 01       	movw	r24, r30
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
