
USART_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00802000  00002d94  00002e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f8  00802142  00802142  00002f6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000a60  00000000  00000000  00002fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000297e4  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000668c  00000000  00000000  0002d20c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00016157  00000000  00000000  00033898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000028b4  00000000  00000000  000499f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00035011  00000000  00000000  0004c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001403d  00000000  00000000  000812b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000aa8  00000000  00000000  000952f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000110c0  00000000  00000000  00095da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c1       	rjmp	.+756    	; 0x2f6 <__ctors_end>
       2:	00 00       	nop
       4:	9e c1       	rjmp	.+828    	; 0x342 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c1       	rjmp	.+824    	; 0x342 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c1       	rjmp	.+820    	; 0x342 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c1       	rjmp	.+816    	; 0x342 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c1       	rjmp	.+812    	; 0x342 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c1       	rjmp	.+808    	; 0x342 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c1       	rjmp	.+804    	; 0x342 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c1       	rjmp	.+800    	; 0x342 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c1       	rjmp	.+796    	; 0x342 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_10>
      2c:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_11>
      30:	88 c1       	rjmp	.+784    	; 0x342 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_13>
      38:	84 c1       	rjmp	.+776    	; 0x342 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c1       	rjmp	.+772    	; 0x342 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c1       	rjmp	.+768    	; 0x342 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c1       	rjmp	.+764    	; 0x342 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c1       	rjmp	.+760    	; 0x342 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c1       	rjmp	.+756    	; 0x342 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c1       	rjmp	.+752    	; 0x342 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c1       	rjmp	.+748    	; 0x342 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c1       	rjmp	.+744    	; 0x342 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c1       	rjmp	.+740    	; 0x342 <__bad_interrupt>
      5e:	00 00       	nop
      60:	70 c1       	rjmp	.+736    	; 0x342 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c1       	rjmp	.+732    	; 0x342 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c1       	rjmp	.+728    	; 0x342 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c1       	rjmp	.+724    	; 0x342 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c1       	rjmp	.+720    	; 0x342 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c1       	rjmp	.+716    	; 0x342 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c1       	rjmp	.+712    	; 0x342 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c1       	rjmp	.+708    	; 0x342 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c1       	rjmp	.+704    	; 0x342 <__bad_interrupt>
      82:	00 00       	nop
      84:	5e c1       	rjmp	.+700    	; 0x342 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c1       	rjmp	.+696    	; 0x342 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c1       	rjmp	.+692    	; 0x342 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c1       	rjmp	.+688    	; 0x342 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c1       	rjmp	.+684    	; 0x342 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c1       	rjmp	.+680    	; 0x342 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c1       	rjmp	.+676    	; 0x342 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c1       	rjmp	.+672    	; 0x342 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c1       	rjmp	.+668    	; 0x342 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c1       	rjmp	.+664    	; 0x342 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c1       	rjmp	.+660    	; 0x342 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c1       	rjmp	.+656    	; 0x342 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c1       	rjmp	.+652    	; 0x342 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_46>
      bc:	42 c1       	rjmp	.+644    	; 0x342 <__bad_interrupt>
      be:	00 00       	nop
      c0:	40 c1       	rjmp	.+640    	; 0x342 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c1       	rjmp	.+636    	; 0x342 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c1       	rjmp	.+632    	; 0x342 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c1       	rjmp	.+628    	; 0x342 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c1       	rjmp	.+624    	; 0x342 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c1       	rjmp	.+620    	; 0x342 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c1       	rjmp	.+616    	; 0x342 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c1       	rjmp	.+612    	; 0x342 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c1       	rjmp	.+608    	; 0x342 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2e c1       	rjmp	.+604    	; 0x342 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2c c1       	rjmp	.+600    	; 0x342 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2a c1       	rjmp	.+596    	; 0x342 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	28 c1       	rjmp	.+592    	; 0x342 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	26 c1       	rjmp	.+588    	; 0x342 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	24 c1       	rjmp	.+584    	; 0x342 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	22 c1       	rjmp	.+580    	; 0x342 <__bad_interrupt>
      fe:	00 00       	nop
     100:	20 c1       	rjmp	.+576    	; 0x342 <__bad_interrupt>
     102:	00 00       	nop
     104:	1e c1       	rjmp	.+572    	; 0x342 <__bad_interrupt>
     106:	00 00       	nop
     108:	1c c1       	rjmp	.+568    	; 0x342 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1a c1       	rjmp	.+564    	; 0x342 <__bad_interrupt>
     10e:	00 00       	nop
     110:	18 c1       	rjmp	.+560    	; 0x342 <__bad_interrupt>
     112:	00 00       	nop
     114:	16 c1       	rjmp	.+556    	; 0x342 <__bad_interrupt>
     116:	00 00       	nop
     118:	14 c1       	rjmp	.+552    	; 0x342 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	12 c1       	rjmp	.+548    	; 0x342 <__bad_interrupt>
     11e:	00 00       	nop
     120:	10 c1       	rjmp	.+544    	; 0x342 <__bad_interrupt>
     122:	00 00       	nop
     124:	0e c1       	rjmp	.+540    	; 0x342 <__bad_interrupt>
     126:	00 00       	nop
     128:	0c c1       	rjmp	.+536    	; 0x342 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	0a c1       	rjmp	.+532    	; 0x342 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_76>
     134:	06 c1       	rjmp	.+524    	; 0x342 <__bad_interrupt>
     136:	00 00       	nop
     138:	04 c1       	rjmp	.+520    	; 0x342 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	02 c1       	rjmp	.+516    	; 0x342 <__bad_interrupt>
     13e:	00 00       	nop
     140:	00 c1       	rjmp	.+512    	; 0x342 <__bad_interrupt>
     142:	00 00       	nop
     144:	fe c0       	rjmp	.+508    	; 0x342 <__bad_interrupt>
     146:	00 00       	nop
     148:	fc c0       	rjmp	.+504    	; 0x342 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	fa c0       	rjmp	.+500    	; 0x342 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f8 c0       	rjmp	.+496    	; 0x342 <__bad_interrupt>
     152:	00 00       	nop
     154:	f6 c0       	rjmp	.+492    	; 0x342 <__bad_interrupt>
     156:	00 00       	nop
     158:	f4 c0       	rjmp	.+488    	; 0x342 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f2 c0       	rjmp	.+484    	; 0x342 <__bad_interrupt>
     15e:	00 00       	nop
     160:	f0 c0       	rjmp	.+480    	; 0x342 <__bad_interrupt>
     162:	00 00       	nop
     164:	ee c0       	rjmp	.+476    	; 0x342 <__bad_interrupt>
     166:	00 00       	nop
     168:	ec c0       	rjmp	.+472    	; 0x342 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ea c0       	rjmp	.+468    	; 0x342 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e8 c0       	rjmp	.+464    	; 0x342 <__bad_interrupt>
     172:	00 00       	nop
     174:	e6 c0       	rjmp	.+460    	; 0x342 <__bad_interrupt>
     176:	00 00       	nop
     178:	e4 c0       	rjmp	.+456    	; 0x342 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e2 c0       	rjmp	.+452    	; 0x342 <__bad_interrupt>
     17e:	00 00       	nop
     180:	e0 c0       	rjmp	.+448    	; 0x342 <__bad_interrupt>
     182:	00 00       	nop
     184:	de c0       	rjmp	.+444    	; 0x342 <__bad_interrupt>
     186:	00 00       	nop
     188:	dc c0       	rjmp	.+440    	; 0x342 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	da c0       	rjmp	.+436    	; 0x342 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d8 c0       	rjmp	.+432    	; 0x342 <__bad_interrupt>
     192:	00 00       	nop
     194:	d6 c0       	rjmp	.+428    	; 0x342 <__bad_interrupt>
     196:	00 00       	nop
     198:	d4 c0       	rjmp	.+424    	; 0x342 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d2 c0       	rjmp	.+420    	; 0x342 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d1 c0       	rjmp	.+418    	; 0x344 <__vector_104>
     1a2:	00 00       	nop
     1a4:	ce c0       	rjmp	.+412    	; 0x342 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cc c0       	rjmp	.+408    	; 0x342 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__vector_107>
     1b0:	c8 c0       	rjmp	.+400    	; 0x342 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c6 c0       	rjmp	.+396    	; 0x342 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c4 c0       	rjmp	.+392    	; 0x342 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c2 c0       	rjmp	.+388    	; 0x342 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c0 c0       	rjmp	.+384    	; 0x342 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	be c0       	rjmp	.+380    	; 0x342 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bc c0       	rjmp	.+376    	; 0x342 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	ba c0       	rjmp	.+372    	; 0x342 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b8 c0       	rjmp	.+368    	; 0x342 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b6 c0       	rjmp	.+364    	; 0x342 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b4 c0       	rjmp	.+360    	; 0x342 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b2 c0       	rjmp	.+356    	; 0x342 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b0 c0       	rjmp	.+352    	; 0x342 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ae c0       	rjmp	.+348    	; 0x342 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ac c0       	rjmp	.+344    	; 0x342 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	aa c0       	rjmp	.+340    	; 0x342 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a8 c0       	rjmp	.+336    	; 0x342 <__bad_interrupt>
	...

000001f4 <__trampolines_end>:
     1f4:	6e 61       	ori	r22, 0x1E	; 30
     1f6:	6e 00       	.word	0x006e	; ????

000001f8 <__c.2159>:
     1f8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     208:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     218:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     228:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     238:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     248:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     258:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     268:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     278:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     288:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     298:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2a8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2b8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2c8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2d8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2e8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002f6 <__ctors_end>:
     2f6:	11 24       	eor	r1, r1
     2f8:	1f be       	out	0x3f, r1	; 63
     2fa:	cf ef       	ldi	r28, 0xFF	; 255
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	df e3       	ldi	r29, 0x3F	; 63
     300:	de bf       	out	0x3e, r29	; 62
     302:	00 e0       	ldi	r16, 0x00	; 0
     304:	0c bf       	out	0x3c, r16	; 60
     306:	18 be       	out	0x38, r1	; 56
     308:	19 be       	out	0x39, r1	; 57
     30a:	1a be       	out	0x3a, r1	; 58
     30c:	1b be       	out	0x3b, r1	; 59

0000030e <__do_copy_data>:
     30e:	11 e2       	ldi	r17, 0x21	; 33
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b0 e2       	ldi	r27, 0x20	; 32
     314:	e4 e9       	ldi	r30, 0x94	; 148
     316:	fd e2       	ldi	r31, 0x2D	; 45
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	0b bf       	out	0x3b, r16	; 59
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__do_copy_data+0x14>
     31e:	07 90       	elpm	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	a2 34       	cpi	r26, 0x42	; 66
     324:	b1 07       	cpc	r27, r17
     326:	d9 f7       	brne	.-10     	; 0x31e <__do_copy_data+0x10>
     328:	1b be       	out	0x3b, r1	; 59

0000032a <__do_clear_bss>:
     32a:	22 e2       	ldi	r18, 0x22	; 34
     32c:	a2 e4       	ldi	r26, 0x42	; 66
     32e:	b1 e2       	ldi	r27, 0x21	; 33
     330:	01 c0       	rjmp	.+2      	; 0x334 <.do_clear_bss_start>

00000332 <.do_clear_bss_loop>:
     332:	1d 92       	st	X+, r1

00000334 <.do_clear_bss_start>:
     334:	aa 33       	cpi	r26, 0x3A	; 58
     336:	b2 07       	cpc	r27, r18
     338:	e1 f7       	brne	.-8      	; 0x332 <.do_clear_bss_loop>
     33a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <main>
     33e:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <_exit>

00000342 <__bad_interrupt>:
     342:	5e ce       	rjmp	.-836    	; 0x0 <__vectors>

00000344 <__vector_104>:
	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
}
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	08 b6       	in	r0, 0x38	; 56
     350:	0f 92       	push	r0
     352:	18 be       	out	0x38, r1	; 56
     354:	09 b6       	in	r0, 0x39	; 57
     356:	0f 92       	push	r0
     358:	19 be       	out	0x39, r1	; 57
     35a:	0b b6       	in	r0, 0x3b	; 59
     35c:	0f 92       	push	r0
     35e:	1b be       	out	0x3b, r1	; 59
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
     378:	e0 91 4c 21 	lds	r30, 0x214C
     37c:	f0 91 4d 21 	lds	r31, 0x214D
     380:	30 97       	sbiw	r30, 0x00	; 0
     382:	49 f0       	breq	.+18     	; 0x396 <__vector_104+0x52>
     384:	80 91 a8 06 	lds	r24, 0x06A8
     388:	82 ff       	sbrs	r24, 2
     38a:	05 c0       	rjmp	.+10     	; 0x396 <__vector_104+0x52>
     38c:	80 91 4a 21 	lds	r24, 0x214A
     390:	90 91 4b 21 	lds	r25, 0x214B
     394:	1d c0       	rjmp	.+58     	; 0x3d0 <__vector_104+0x8c>
     396:	e0 91 48 21 	lds	r30, 0x2148
     39a:	f0 91 49 21 	lds	r31, 0x2149
     39e:	30 97       	sbiw	r30, 0x00	; 0
     3a0:	49 f0       	breq	.+18     	; 0x3b4 <__vector_104+0x70>
     3a2:	80 91 a8 06 	lds	r24, 0x06A8
     3a6:	83 ff       	sbrs	r24, 3
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <__vector_104+0x70>
     3aa:	80 91 46 21 	lds	r24, 0x2146
     3ae:	90 91 47 21 	lds	r25, 0x2147
     3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <__vector_104+0x8c>
     3b4:	e0 91 44 21 	lds	r30, 0x2144
     3b8:	f0 91 45 21 	lds	r31, 0x2145
     3bc:	30 97       	sbiw	r30, 0x00	; 0
     3be:	49 f0       	breq	.+18     	; 0x3d2 <__vector_104+0x8e>
     3c0:	80 91 a8 06 	lds	r24, 0x06A8
     3c4:	84 ff       	sbrs	r24, 4
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <__vector_104+0x8e>
     3c8:	80 91 42 21 	lds	r24, 0x2142
     3cc:	90 91 43 21 	lds	r25, 0x2143
     3d0:	19 95       	eicall
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 ac 06 	sts	0x06AC, r24
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0b be       	out	0x3b, r0	; 59
     3f4:	0f 90       	pop	r0
     3f6:	09 be       	out	0x39, r0	; 57
     3f8:	0f 90       	pop	r0
     3fa:	08 be       	out	0x38, r0	; 56
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <sensor_board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     406:	43 e0       	ldi	r20, 0x03	; 3
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	64 e0       	ldi	r22, 0x04	; 4
     40c:	80 ea       	ldi	r24, 0xA0	; 160
     40e:	96 e0       	ldi	r25, 0x06	; 6
     410:	5f d0       	rcall	.+190    	; 0x4d0 <ioport_configure_port_pin>
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	68 e0       	ldi	r22, 0x08	; 8
     418:	80 ea       	ldi	r24, 0xA0	; 160
     41a:	96 e0       	ldi	r25, 0x06	; 6
     41c:	59 d0       	rcall	.+178    	; 0x4d0 <ioport_configure_port_pin>
#elif (EXT_BOARD == SENSORS_XPLAINED_BREADBOARD)
	gpio_configure_pin(SENSOR_BOARD_PIN4, PIN_INPUT_FLAGS);
#endif

	/* Global Interrupt Disable */
	cpu_irq_disable();
     41e:	f8 94       	cli

	/* Initialize interrupt vector table support. */
	irq_initialize_vectors();
     420:	87 e0       	ldi	r24, 0x07	; 7
     422:	e0 ea       	ldi	r30, 0xA0	; 160
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	82 83       	std	Z+2, r24	; 0x02

	/* Global Interrupt Enable */
	cpu_irq_enable();
     428:	78 94       	sei
     42a:	08 95       	ret

0000042c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	80 93 70 00 	sts	0x0070, r24
     432:	80 93 71 00 	sts	0x0071, r24
     436:	80 93 72 00 	sts	0x0072, r24
     43a:	80 93 73 00 	sts	0x0073, r24
     43e:	80 93 74 00 	sts	0x0074, r24
     442:	80 93 75 00 	sts	0x0075, r24
     446:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	81 e4       	ldi	r24, 0x41	; 65
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	6f d7       	rcall	.+3806   	; 0x1330 <ccp_write_io>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     452:	80 91 51 00 	lds	r24, 0x0051

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
     456:	84 ff       	sbrs	r24, 4
     458:	0d c0       	rjmp	.+26     	; 0x474 <sysclk_init+0x48>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	67 d7       	rcall	.+3790   	; 0x1330 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     462:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     464:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     466:	80 91 50 00 	lds	r24, 0x0050
     46a:	8e 7f       	andi	r24, 0xFE	; 254
     46c:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     470:	9f bf       	out	0x3f, r25	; 63
     472:	08 95       	ret

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     474:	80 91 51 00 	lds	r24, 0x0051
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     478:	81 ff       	sbrs	r24, 1
     47a:	0c c0       	rjmp	.+24     	; 0x494 <sysclk_init+0x68>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     47c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     47e:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
     480:	88 e8       	ldi	r24, 0x88	; 136
     482:	80 93 55 00 	sts	0x0055, r24

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
     486:	80 91 50 00 	lds	r24, 0x0050
     48a:	80 61       	ori	r24, 0x10	; 16
     48c:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     490:	9f bf       	out	0x3f, r25	; 63
     492:	0d c0       	rjmp	.+26     	; 0x4ae <sysclk_init+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     494:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     496:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     498:	80 91 50 00 	lds	r24, 0x0050
     49c:	82 60       	ori	r24, 0x02	; 2
     49e:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4a2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     4a4:	80 91 51 00 	lds	r24, 0x0051
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     4a8:	81 ff       	sbrs	r24, 1
     4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <sysclk_init+0x78>
     4ac:	e7 cf       	rjmp	.-50     	; 0x47c <sysclk_init+0x50>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     4ae:	80 91 51 00 	lds	r24, 0x0051
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
     4b2:	84 ff       	sbrs	r24, 4
     4b4:	fc cf       	rjmp	.-8      	; 0x4ae <sysclk_init+0x82>
     4b6:	d1 cf       	rjmp	.-94     	; 0x45a <sysclk_init+0x2e>

000004b8 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4b8:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     4ba:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     4bc:	e8 2f       	mov	r30, r24
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	e0 59       	subi	r30, 0x90	; 144
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	60 95       	com	r22
     4c6:	80 81       	ld	r24, Z
     4c8:	86 23       	and	r24, r22
     4ca:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4cc:	9f bf       	out	0x3f, r25	; 63
     4ce:	08 95       	ret

000004d0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     4d0:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     4d6:	26 2f       	mov	r18, r22
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	d9 01       	movw	r26, r18
     4dc:	08 2e       	mov	r0, r24
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <ioport_configure_port_pin+0x14>
     4e0:	b5 95       	asr	r27
     4e2:	a7 95       	ror	r26
     4e4:	0a 94       	dec	r0
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <ioport_configure_port_pin+0x10>
     4e8:	a0 ff       	sbrs	r26, 0
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <ioport_configure_port_pin+0x26>
     4ec:	df 01       	movw	r26, r30
     4ee:	a8 0f       	add	r26, r24
     4f0:	b9 1f       	adc	r27, r25
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     4f2:	50 96       	adiw	r26, 0x10	; 16
     4f4:	5c 93       	st	X, r21
     4f6:	01 96       	adiw	r24, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     4f8:	88 30       	cpi	r24, 0x08	; 8
     4fa:	91 05       	cpc	r25, r1
     4fc:	71 f7       	brne	.-36     	; 0x4da <ioport_configure_port_pin+0xa>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     4fe:	40 ff       	sbrs	r20, 0
     500:	07 c0       	rjmp	.+14     	; 0x510 <ioport_configure_port_pin+0x40>
		if (flags & IOPORT_INIT_HIGH) {
     502:	41 ff       	sbrs	r20, 1
     504:	02 c0       	rjmp	.+4      	; 0x50a <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     506:	65 83       	std	Z+5, r22	; 0x05
     508:	01 c0       	rjmp	.+2      	; 0x50c <ioport_configure_port_pin+0x3c>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     50a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     50c:	61 83       	std	Z+1, r22	; 0x01
     50e:	08 95       	ret
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     510:	62 83       	std	Z+2, r22	; 0x02
     512:	08 95       	ret

00000514 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     514:	61 50       	subi	r22, 0x01	; 1
     516:	71 09       	sbc	r23, r1
     518:	81 09       	sbc	r24, r1
     51a:	91 09       	sbc	r25, r1
     51c:	61 15       	cp	r22, r1
     51e:	71 05       	cpc	r23, r1
     520:	81 05       	cpc	r24, r1
     522:	91 05       	cpc	r25, r1
     524:	b9 f7       	brne	.-18     	; 0x514 <__portable_avr_delay_cycles>
}
     526:	08 95       	ret

00000528 <bus_get>:
 *
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	1f 92       	push	r1
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0;
     532:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	ae 01       	movw	r20, r28
     53a:	4f 5f       	subi	r20, 0xFF	; 255
     53c:	5f 4f       	sbci	r21, 0xFF	; 255
     53e:	f1 d5       	rcall	.+3042   	; 0x1122 <bus_read>

	return data;
}
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	0f 90       	pop	r0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <bmp_get_cal_param>:
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @retval  bool    "true" if valid coefficients have been fetched
 * @retval  bool    "false" for errors reading the device coefficients
 */
static bool bmp_get_cal_param(sensor_hal_t *hal)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	66 97       	sbiw	r28, 0x16	; 22
     554:	cd bf       	out	0x3d, r28	; 61
     556:	de bf       	out	0x3e, r29	; 62
	/* Set an intermediate buffer to known invalid values (0 or ffff). */
	uint8_t *const coeffs = (uint8_t [BMP_EEPROM_SIZE_BYTES]) {0};
     558:	ae 01       	movw	r20, r28
     55a:	4f 5f       	subi	r20, 0xFF	; 255
     55c:	5f 4f       	sbci	r21, 0xFF	; 255
     55e:	26 e1       	ldi	r18, 0x16	; 22
     560:	fa 01       	movw	r30, r20
     562:	11 92       	st	Z+, r1
     564:	2a 95       	dec	r18
     566:	e9 f7       	brne	.-6      	; 0x562 <bmp_get_cal_param+0x18>

	/* Attempt to fetch calibration coefficients from the slave EEPROM. */
	const size_t bytes_read = sensor_bus_read
     568:	26 e1       	ldi	r18, 0x16	; 22
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	6a ea       	ldi	r22, 0xAA	; 170
     56e:	d9 d5       	rcall	.+2994   	; 0x1122 <bus_read>
				(hal, BMP_EEPROM_ADDR, coeffs,
				BMP_EEPROM_SIZE_BYTES);

	AC1 = ((uint16_t)coeffs[ 0] << 8) | coeffs[ 1];
     570:	29 81       	ldd	r18, Y+1	; 0x01
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	32 2f       	mov	r19, r18
     576:	22 27       	eor	r18, r18
     578:	4a 81       	ldd	r20, Y+2	; 0x02
     57a:	24 2b       	or	r18, r20
     57c:	20 93 4e 21 	sts	0x214E, r18
     580:	30 93 4f 21 	sts	0x214F, r19
	AC2 = ((uint16_t)coeffs[ 2] << 8) | coeffs[ 3];
     584:	2b 81       	ldd	r18, Y+3	; 0x03
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	32 2f       	mov	r19, r18
     58a:	22 27       	eor	r18, r18
     58c:	4c 81       	ldd	r20, Y+4	; 0x04
     58e:	24 2b       	or	r18, r20
     590:	20 93 50 21 	sts	0x2150, r18
     594:	30 93 51 21 	sts	0x2151, r19
	AC3 = ((uint16_t)coeffs[ 4] << 8) | coeffs[ 5];
     598:	2d 81       	ldd	r18, Y+5	; 0x05
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	32 2f       	mov	r19, r18
     59e:	22 27       	eor	r18, r18
     5a0:	4e 81       	ldd	r20, Y+6	; 0x06
     5a2:	24 2b       	or	r18, r20
     5a4:	20 93 52 21 	sts	0x2152, r18
     5a8:	30 93 53 21 	sts	0x2153, r19
	AC4 = ((uint16_t)coeffs[ 6] << 8) | coeffs[ 7];
     5ac:	2f 81       	ldd	r18, Y+7	; 0x07
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	32 2f       	mov	r19, r18
     5b2:	22 27       	eor	r18, r18
     5b4:	48 85       	ldd	r20, Y+8	; 0x08
     5b6:	24 2b       	or	r18, r20
     5b8:	20 93 54 21 	sts	0x2154, r18
     5bc:	30 93 55 21 	sts	0x2155, r19
	AC5 = ((uint16_t)coeffs[ 8] << 8) | coeffs[ 9];
     5c0:	29 85       	ldd	r18, Y+9	; 0x09
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	32 2f       	mov	r19, r18
     5c6:	22 27       	eor	r18, r18
     5c8:	4a 85       	ldd	r20, Y+10	; 0x0a
     5ca:	24 2b       	or	r18, r20
     5cc:	20 93 56 21 	sts	0x2156, r18
     5d0:	30 93 57 21 	sts	0x2157, r19
	AC6 = ((uint16_t)coeffs[10] << 8) | coeffs[11];
     5d4:	2b 85       	ldd	r18, Y+11	; 0x0b
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	32 2f       	mov	r19, r18
     5da:	22 27       	eor	r18, r18
     5dc:	4c 85       	ldd	r20, Y+12	; 0x0c
     5de:	24 2b       	or	r18, r20
     5e0:	20 93 58 21 	sts	0x2158, r18
     5e4:	30 93 59 21 	sts	0x2159, r19

	B1  = ((uint16_t)coeffs[12] << 8) | coeffs[13];
     5e8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	32 2f       	mov	r19, r18
     5ee:	22 27       	eor	r18, r18
     5f0:	4e 85       	ldd	r20, Y+14	; 0x0e
     5f2:	24 2b       	or	r18, r20
     5f4:	20 93 5a 21 	sts	0x215A, r18
     5f8:	30 93 5b 21 	sts	0x215B, r19
	B2  = ((uint16_t)coeffs[14] << 8) | coeffs[15];
     5fc:	2f 85       	ldd	r18, Y+15	; 0x0f
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	32 2f       	mov	r19, r18
     602:	22 27       	eor	r18, r18
     604:	48 89       	ldd	r20, Y+16	; 0x10
     606:	24 2b       	or	r18, r20
     608:	20 93 5c 21 	sts	0x215C, r18
     60c:	30 93 5d 21 	sts	0x215D, r19

	Mb  = ((uint16_t)coeffs[16] << 8) | coeffs[17];
     610:	29 89       	ldd	r18, Y+17	; 0x11
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	32 2f       	mov	r19, r18
     616:	22 27       	eor	r18, r18
     618:	4a 89       	ldd	r20, Y+18	; 0x12
     61a:	24 2b       	or	r18, r20
     61c:	20 93 5e 21 	sts	0x215E, r18
     620:	30 93 5f 21 	sts	0x215F, r19
	Mc  = ((uint16_t)coeffs[18] << 8) | coeffs[19];
     624:	2b 89       	ldd	r18, Y+19	; 0x13
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	32 2f       	mov	r19, r18
     62a:	22 27       	eor	r18, r18
     62c:	4c 89       	ldd	r20, Y+20	; 0x14
     62e:	24 2b       	or	r18, r20
     630:	20 93 60 21 	sts	0x2160, r18
     634:	30 93 61 21 	sts	0x2161, r19
	Md  = ((uint16_t)coeffs[20] << 8) | coeffs[21];
     638:	2d 89       	ldd	r18, Y+21	; 0x15
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	32 2f       	mov	r19, r18
     63e:	22 27       	eor	r18, r18
     640:	4e 89       	ldd	r20, Y+22	; 0x16
     642:	24 2b       	or	r18, r20
     644:	20 93 62 21 	sts	0x2162, r18
     648:	30 93 63 21 	sts	0x2163, r19

	return (BMP_EEPROM_SIZE_BYTES == bytes_read);
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	46 97       	sbiw	r24, 0x16	; 22
     650:	09 f0       	breq	.+2      	; 0x654 <bmp_get_cal_param+0x10a>
     652:	20 e0       	ldi	r18, 0x00	; 0
}
     654:	82 2f       	mov	r24, r18
     656:	66 96       	adiw	r28, 0x16	; 22
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <bmp_get_ut>:
 *
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @return  An uncompensated temperature reading.
 */
static int32_t bmp_get_ut(sensor_hal_t *hal)
{
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	00 d0       	rcall	.+0      	; 0x66c <bmp_get_ut+0xa>
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	8c 01       	movw	r16, r24
     672:	8e e2       	ldi	r24, 0x2E	; 46
     674:	8b 83       	std	Y+3, r24	; 0x03
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	ae 01       	movw	r20, r28
     67c:	4d 5f       	subi	r20, 0xFD	; 253
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	64 ef       	ldi	r22, 0xF4	; 244
     682:	c8 01       	movw	r24, r16
     684:	8c d5       	rcall	.+2840   	; 0x119e <bus_write>
	uint8_t buff[2];

	sensor_bus_put(hal, BMP_CONTROL, BMP_TEMP_READ);

	/* The conversion time for temperature is 4.5ms at most. */
	delay_ms(5);
     686:	6a e2       	ldi	r22, 0x2A	; 42
     688:	78 e6       	ldi	r23, 0x68	; 104
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	42 df       	rcall	.-380    	; 0x514 <__portable_avr_delay_cycles>

	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
     690:	22 e0       	ldi	r18, 0x02	; 2
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	ae 01       	movw	r20, r28
     696:	4f 5f       	subi	r20, 0xFF	; 255
     698:	5f 4f       	sbci	r21, 0xFF	; 255
     69a:	66 ef       	ldi	r22, 0xF6	; 246
     69c:	c8 01       	movw	r24, r16
     69e:	41 d5       	rcall	.+2690   	; 0x1122 <bus_read>
     6a0:	89 2b       	or	r24, r25
     6a2:	61 f0       	breq	.+24     	; 0x6bc <bmp_get_ut+0x5a>
		UT = ((uint32_t)buff[0] << 8) | buff[1];
     6a4:	69 81       	ldd	r22, Y+1	; 0x01
     6a6:	86 2f       	mov	r24, r22
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	a0 e0       	ldi	r26, 0x00	; 0
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	66 27       	eor	r22, r22
     6b0:	78 2f       	mov	r23, r24
     6b2:	89 2f       	mov	r24, r25
     6b4:	9a 2f       	mov	r25, r26
     6b6:	2a 81       	ldd	r18, Y+2	; 0x02
     6b8:	62 2b       	or	r22, r18
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <bmp_get_ut+0x60>
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @return  An uncompensated temperature reading.
 */
static int32_t bmp_get_ut(sensor_hal_t *hal)
{
	int32_t UT = -1;
     6bc:	6f ef       	ldi	r22, 0xFF	; 255
     6be:	7f ef       	ldi	r23, 0xFF	; 255
     6c0:	cb 01       	movw	r24, r22
	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
		UT = ((uint32_t)buff[0] << 8) | buff[1];
	}

	return UT;
}
     6c2:	23 96       	adiw	r28, 0x03	; 3
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <bmp_read>:
 * @param type      Type of sensor data to read.
 * @param data      The address where pressure samples are returned.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool bmp_read(sensor_t *sensor, sensor_read_t type, sensor_data_t *data)
{
     6d2:	2f 92       	push	r2
     6d4:	3f 92       	push	r3
     6d6:	4f 92       	push	r4
     6d8:	5f 92       	push	r5
     6da:	6f 92       	push	r6
     6dc:	7f 92       	push	r7
     6de:	8f 92       	push	r8
     6e0:	9f 92       	push	r9
     6e2:	af 92       	push	r10
     6e4:	bf 92       	push	r11
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	2d 97       	sbiw	r28, 0x0d	; 13
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	fc 01       	movw	r30, r24
     702:	1a 01       	movw	r2, r20
	switch (type) {
     704:	66 30       	cpi	r22, 0x06	; 6
     706:	11 f1       	breq	.+68     	; 0x74c <bmp_read+0x7a>
     708:	69 30       	cpi	r22, 0x09	; 9
     70a:	09 f4       	brne	.+2      	; 0x70e <bmp_read+0x3c>
     70c:	ef c1       	rjmp	.+990    	; 0xaec <bmp_read+0x41a>
     70e:	63 30       	cpi	r22, 0x03	; 3
     710:	09 f0       	breq	.+2      	; 0x714 <bmp_read+0x42>
     712:	4b c2       	rjmp	.+1174   	; 0xbaa <bmp_read+0x4d8>
 * @param data      Address of sensor_data_t structure to return values.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool bmp_device_id(sensor_hal_t *hal, sensor_data_t *data)
{
	data->device.id = (uint32_t)sensor_bus_get(hal, BMP_CHIP_ID);
     714:	00 81       	ld	r16, Z
     716:	11 81       	ldd	r17, Z+1	; 0x01
     718:	60 ed       	ldi	r22, 0xD0	; 208
     71a:	c8 01       	movw	r24, r16
     71c:	05 df       	rcall	.-502    	; 0x528 <bus_get>
     71e:	48 2f       	mov	r20, r24
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	f1 01       	movw	r30, r2
     728:	40 83       	st	Z, r20
     72a:	51 83       	std	Z+1, r21	; 0x01
     72c:	62 83       	std	Z+2, r22	; 0x02
     72e:	73 83       	std	Z+3, r23	; 0x03
	data->device.version = (uint8_t)sensor_bus_get(hal, BMP_CHIP_VERSION);
     730:	61 ed       	ldi	r22, 0xD1	; 209
     732:	c8 01       	movw	r24, r16
     734:	f9 de       	rcall	.-526    	; 0x528 <bus_get>
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	f1 01       	movw	r30, r2
     73e:	84 83       	std	Z+4, r24	; 0x04
     740:	95 83       	std	Z+5, r25	; 0x05
     742:	a6 83       	std	Z+6, r26	; 0x06
     744:	b7 83       	std	Z+7, r27	; 0x07
     746:	01 e0       	ldi	r16, 0x01	; 1
     748:	0d 83       	std	Y+5, r16	; 0x05
     74a:	34 c2       	rjmp	.+1128   	; 0xbb4 <bmp_read+0x4e2>
 */
static bool bmp_read(sensor_t *sensor, sensor_read_t type, sensor_data_t *data)
{
	switch (type) {
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);
     74c:	80 80       	ld	r8, Z
     74e:	91 80       	ldd	r9, Z+1	; 0x01
{
	int32_t UP = -1;

	uint8_t buff[3];

	sensor_bus_put(hal, BMP_CONTROL, BMP_PRESS_READ + (sensor_oss << 6));
     750:	80 91 64 21 	lds	r24, 0x2164
     754:	82 95       	swap	r24
     756:	88 0f       	add	r24, r24
     758:	88 0f       	add	r24, r24
     75a:	80 7c       	andi	r24, 0xC0	; 192
     75c:	8c 5c       	subi	r24, 0xCC	; 204
     75e:	8c 83       	std	Y+4, r24	; 0x04
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	ae 01       	movw	r20, r28
     766:	4c 5f       	subi	r20, 0xFC	; 252
     768:	5f 4f       	sbci	r21, 0xFF	; 255
     76a:	64 ef       	ldi	r22, 0xF4	; 244
     76c:	c4 01       	movw	r24, r8
     76e:	17 d5       	rcall	.+2606   	; 0x119e <bus_write>
	 *
	 * This works on the BMP085 but not on the BMP180.
	 *
	 * while (gpio_pin_is_low (hal->mcu_sigint));
	 */
	delay_ms(2 + (3 << sensor_oss));
     770:	e3 e0       	ldi	r30, 0x03	; 3
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	00 90 64 21 	lds	r0, 0x2164
     778:	02 c0       	rjmp	.+4      	; 0x77e <bmp_read+0xac>
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	0a 94       	dec	r0
     780:	e2 f7       	brpl	.-8      	; 0x77a <bmp_read+0xa8>
     782:	32 96       	adiw	r30, 0x02	; 2
     784:	9f 2f       	mov	r25, r31
     786:	99 0f       	add	r25, r25
     788:	99 0b       	sbc	r25, r25
     78a:	a1 2c       	mov	r10, r1
     78c:	58 e4       	ldi	r21, 0x48	; 72
     78e:	b5 2e       	mov	r11, r21
     790:	68 ee       	ldi	r22, 0xE8	; 232
     792:	c6 2e       	mov	r12, r22
     794:	dd 24       	eor	r13, r13
     796:	d3 94       	inc	r13
     798:	e1 2c       	mov	r14, r1
     79a:	f1 2c       	mov	r15, r1
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	9f 01       	movw	r18, r30
     7a2:	49 2f       	mov	r20, r25
     7a4:	59 2f       	mov	r21, r25
     7a6:	69 2f       	mov	r22, r25
     7a8:	79 2f       	mov	r23, r25
     7aa:	89 2f       	mov	r24, r25
     7ac:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__muldi3>
     7b0:	29 51       	subi	r18, 0x19	; 25
     7b2:	3c 4f       	sbci	r19, 0xFC	; 252
     7b4:	4f 4f       	sbci	r20, 0xFF	; 255
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	6f 4f       	sbci	r22, 0xFF	; 255
     7ba:	7f 4f       	sbci	r23, 0xFF	; 255
     7bc:	8f 4f       	sbci	r24, 0xFF	; 255
     7be:	9f 4f       	sbci	r25, 0xFF	; 255
     7c0:	0e 94 45 10 	call	0x208a	; 0x208a <__floatundisf>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e8       	ldi	r19, 0x80	; 128
     7c8:	4b eb       	ldi	r20, 0xBB	; 187
     7ca:	55 e4       	ldi	r21, 0x45	; 69
     7cc:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
     7d0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__fixunssfdi>
     7d4:	b9 01       	movw	r22, r18
     7d6:	ca 01       	movw	r24, r20
     7d8:	9d de       	rcall	.-710    	; 0x514 <__portable_avr_delay_cycles>

	sensor_bus_put(hal, BMP_CONTROL, BMP_PRESS_READ + (sensor_oss << 6));

	bmp_eoc_wait(hal);

	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
     7da:	23 e0       	ldi	r18, 0x03	; 3
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	ae 01       	movw	r20, r28
     7e0:	4f 5f       	subi	r20, 0xFF	; 255
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	66 ef       	ldi	r22, 0xF6	; 246
     7e6:	c4 01       	movw	r24, r8
     7e8:	9c d4       	rcall	.+2360   	; 0x1122 <bus_read>
     7ea:	89 2b       	or	r24, r25
     7ec:	69 f0       	breq	.+26     	; 0x808 <bmp_read+0x136>
		UP = ((uint32_t)buff[0] << 16) | ((uint32_t)buff[1] << 8) | buff[2];
     7ee:	29 81       	ldd	r18, Y+1	; 0x01
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	ba 2f       	mov	r27, r26
     7fa:	a9 2f       	mov	r26, r25
     7fc:	98 2f       	mov	r25, r24
     7fe:	88 27       	eor	r24, r24
     800:	a2 2b       	or	r26, r18
     802:	2b 81       	ldd	r18, Y+3	; 0x03
     804:	82 2b       	or	r24, r18
     806:	03 c0       	rjmp	.+6      	; 0x80e <bmp_read+0x13c>
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @return  An uncompensated pressure reading.
 */
static int32_t bmp_get_up(sensor_hal_t *hal)
{
	int32_t UP = -1;
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	9f ef       	ldi	r25, 0xFF	; 255
     80c:	dc 01       	movw	r26, r24

	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
		UP = ((uint32_t)buff[0] << 16) | ((uint32_t)buff[1] << 8) | buff[2];
	}

	return (UP >> (8 - sensor_oss));
     80e:	40 91 64 21 	lds	r20, 0x2164
     812:	28 e0       	ldi	r18, 0x08	; 8
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	24 1b       	sub	r18, r20
     818:	31 09       	sbc	r19, r1
     81a:	7c 01       	movw	r14, r24
     81c:	8d 01       	movw	r16, r26
     81e:	04 c0       	rjmp	.+8      	; 0x828 <bmp_read+0x156>
     820:	15 95       	asr	r17
     822:	07 95       	ror	r16
     824:	f7 94       	ror	r15
     826:	e7 94       	ror	r14
     828:	2a 95       	dec	r18
     82a:	d2 f7       	brpl	.-12     	; 0x820 <bmp_read+0x14e>
     82c:	ea 86       	std	Y+10, r14	; 0x0a
     82e:	fb 86       	std	Y+11, r15	; 0x0b
     830:	0c 87       	std	Y+12, r16	; 0x0c
     832:	1d 87       	std	Y+13, r17	; 0x0d
 */
static bool bmp_get_pressure(sensor_hal_t *hal, sensor_data_t *data)
{
	int32_t const UP = bmp_get_up(hal);

	if (data->scaled == false) {
     834:	d1 01       	movw	r26, r2
     836:	50 96       	adiw	r26, 0x10	; 16
     838:	bc 91       	ld	r27, X
     83a:	bd 83       	std	Y+5, r27	; 0x05
     83c:	b1 11       	cpse	r27, r1
     83e:	08 c0       	rjmp	.+16     	; 0x850 <bmp_read+0x17e>
		data->pressure.value = UP;
     840:	f1 01       	movw	r30, r2
     842:	e0 82       	st	Z, r14
     844:	f1 82       	std	Z+1, r15	; 0x01
     846:	02 83       	std	Z+2, r16	; 0x02
     848:	13 83       	std	Z+3, r17	; 0x03
 */
static bool bmp_read(sensor_t *sensor, sensor_read_t type, sensor_data_t *data)
{
	switch (type) {
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);
     84a:	01 e0       	ldi	r16, 0x01	; 1
     84c:	0d 83       	std	Y+5, r16	; 0x05
     84e:	b2 c1       	rjmp	.+868    	; 0xbb4 <bmp_read+0x4e2>

	if (data->scaled == false) {
		data->pressure.value = UP;
	} else {
		/* The compensated pressure in pascal (Pa) units. */
		int32_t const UT = bmp_get_ut(hal);
     850:	c4 01       	movw	r24, r8
     852:	07 df       	rcall	.-498    	; 0x662 <bmp_get_ut>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24

		int32_t const x1 = ((UT - AC6) * AC5) >> 15;
     858:	80 91 58 21 	lds	r24, 0x2158
     85c:	90 91 59 21 	lds	r25, 0x2159
     860:	28 1b       	sub	r18, r24
     862:	39 0b       	sbc	r19, r25
     864:	41 09       	sbc	r20, r1
     866:	51 09       	sbc	r21, r1
     868:	a0 91 56 21 	lds	r26, 0x2156
     86c:	b0 91 57 21 	lds	r27, 0x2157
     870:	0e 94 c1 14 	call	0x2982	; 0x2982 <__muluhisi3>
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24
     878:	3f e0       	ldi	r19, 0x0F	; 15
     87a:	f5 94       	asr	r15
     87c:	e7 94       	ror	r14
     87e:	d7 94       	ror	r13
     880:	c7 94       	ror	r12
     882:	3a 95       	dec	r19
     884:	d1 f7       	brne	.-12     	; 0x87a <bmp_read+0x1a8>
		int32_t const x2 = ((int32_t)Mc << 11) / (x1 + Md);
     886:	60 91 60 21 	lds	r22, 0x2160
     88a:	70 91 61 21 	lds	r23, 0x2161
     88e:	88 27       	eor	r24, r24
     890:	77 fd       	sbrc	r23, 7
     892:	80 95       	com	r24
     894:	98 2f       	mov	r25, r24
     896:	4b e0       	ldi	r20, 0x0B	; 11
     898:	66 0f       	add	r22, r22
     89a:	77 1f       	adc	r23, r23
     89c:	88 1f       	adc	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	4a 95       	dec	r20
     8a2:	d1 f7       	brne	.-12     	; 0x898 <bmp_read+0x1c6>
     8a4:	20 91 62 21 	lds	r18, 0x2162
     8a8:	30 91 63 21 	lds	r19, 0x2163
     8ac:	44 27       	eor	r20, r20
     8ae:	37 fd       	sbrc	r19, 7
     8b0:	40 95       	com	r20
     8b2:	54 2f       	mov	r21, r20
     8b4:	2c 0d       	add	r18, r12
     8b6:	3d 1d       	adc	r19, r13
     8b8:	4e 1d       	adc	r20, r14
     8ba:	5f 1d       	adc	r21, r15
     8bc:	0e 94 96 14 	call	0x292c	; 0x292c <__divmodsi4>
     8c0:	49 01       	movw	r8, r18
     8c2:	5a 01       	movw	r10, r20

		int32_t const B5 = (x1 + x2);
     8c4:	8c 0c       	add	r8, r12
     8c6:	9d 1c       	adc	r9, r13
     8c8:	ae 1c       	adc	r10, r14
     8ca:	bf 1c       	adc	r11, r15
		int32_t const B6 = B5 - 4000L;
     8cc:	10 ea       	ldi	r17, 0xA0	; 160
     8ce:	81 1a       	sub	r8, r17
     8d0:	1f e0       	ldi	r17, 0x0F	; 15
     8d2:	91 0a       	sbc	r9, r17
     8d4:	a1 08       	sbc	r10, r1
     8d6:	b1 08       	sbc	r11, r1

		int32_t X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
     8d8:	a5 01       	movw	r20, r10
     8da:	94 01       	movw	r18, r8
     8dc:	c5 01       	movw	r24, r10
     8de:	b4 01       	movw	r22, r8
     8e0:	0e 94 65 14 	call	0x28ca	; 0x28ca <__mulsi3>
     8e4:	2b 01       	movw	r4, r22
     8e6:	3c 01       	movw	r6, r24
     8e8:	6c e0       	ldi	r22, 0x0C	; 12
     8ea:	75 94       	asr	r7
     8ec:	67 94       	ror	r6
     8ee:	57 94       	ror	r5
     8f0:	47 94       	ror	r4
     8f2:	6a 95       	dec	r22
     8f4:	d1 f7       	brne	.-12     	; 0x8ea <bmp_read+0x218>
		int32_t X2 = (AC2 * B6) >> 11;
		int32_t X3 = X1 + X2;

		int32_t const B3 = ((((int32_t)AC1 * 4 + X3) << sensor_oss) + 2) >> 2;
     8f6:	00 91 4e 21 	lds	r16, 0x214E
     8fa:	10 91 4f 21 	lds	r17, 0x214F
     8fe:	e0 91 64 21 	lds	r30, 0x2164

		X1 = (AC3 * B6) >> 13;
     902:	a0 91 52 21 	lds	r26, 0x2152
     906:	b0 91 53 21 	lds	r27, 0x2153
     90a:	0e 94 cb 14 	call	0x2996	; 0x2996 <__mulshisi3>
     90e:	6b 01       	movw	r12, r22
     910:	7c 01       	movw	r14, r24
     912:	7d e0       	ldi	r23, 0x0D	; 13
     914:	f5 94       	asr	r15
     916:	e7 94       	ror	r14
     918:	d7 94       	ror	r13
     91a:	c7 94       	ror	r12
     91c:	7a 95       	dec	r23
     91e:	d1 f7       	brne	.-12     	; 0x914 <bmp_read+0x242>
		X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
     920:	a0 91 5a 21 	lds	r26, 0x215A
     924:	b0 91 5b 21 	lds	r27, 0x215B
     928:	a3 01       	movw	r20, r6
     92a:	92 01       	movw	r18, r4
     92c:	0e 94 cb 14 	call	0x2996	; 0x2996 <__mulshisi3>
     930:	bb 27       	eor	r27, r27
     932:	97 fd       	sbrc	r25, 7
     934:	b0 95       	com	r27
     936:	ab 2f       	mov	r26, r27
		X3 = ((X1 + X2) + 2) >> 2;
     938:	c8 0e       	add	r12, r24
     93a:	d9 1e       	adc	r13, r25
     93c:	ea 1e       	adc	r14, r26
     93e:	fb 1e       	adc	r15, r27
     940:	22 e0       	ldi	r18, 0x02	; 2
     942:	c2 0e       	add	r12, r18
     944:	d1 1c       	adc	r13, r1
     946:	e1 1c       	adc	r14, r1
     948:	f1 1c       	adc	r15, r1
     94a:	a2 e0       	ldi	r26, 0x02	; 2
     94c:	f5 94       	asr	r15
     94e:	e7 94       	ror	r14
     950:	d7 94       	ror	r13
     952:	c7 94       	ror	r12
     954:	aa 95       	dec	r26
     956:	d1 f7       	brne	.-12     	; 0x94c <bmp_read+0x27a>

		uint32_t const B4 = (AC4 * (uint32_t)(X3 + 32768L)) >> 15;
     958:	40 e8       	ldi	r20, 0x80	; 128
     95a:	d4 0e       	add	r13, r20
     95c:	e1 1c       	adc	r14, r1
     95e:	f1 1c       	adc	r15, r1
     960:	a0 91 54 21 	lds	r26, 0x2154
     964:	b0 91 55 21 	lds	r27, 0x2155
     968:	a7 01       	movw	r20, r14
     96a:	96 01       	movw	r18, r12
     96c:	0e 94 c1 14 	call	0x2982	; 0x2982 <__muluhisi3>
     970:	bf e0       	ldi	r27, 0x0F	; 15
     972:	96 95       	lsr	r25
     974:	87 95       	ror	r24
     976:	77 95       	ror	r23
     978:	67 95       	ror	r22
     97a:	ba 95       	dec	r27
     97c:	d1 f7       	brne	.-12     	; 0x972 <bmp_read+0x2a0>
     97e:	6e 83       	std	Y+6, r22	; 0x06
     980:	7f 83       	std	Y+7, r23	; 0x07
     982:	88 87       	std	Y+8, r24	; 0x08
     984:	99 87       	std	Y+9, r25	; 0x09

		int32_t X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
		int32_t X2 = (AC2 * B6) >> 11;
		int32_t X3 = X1 + X2;

		int32_t const B3 = ((((int32_t)AC1 * 4 + X3) << sensor_oss) + 2) >> 2;
     986:	68 01       	movw	r12, r16
     988:	ee 24       	eor	r14, r14
     98a:	d7 fc       	sbrc	r13, 7
     98c:	e0 94       	com	r14
     98e:	fe 2c       	mov	r15, r14
     990:	12 e0       	ldi	r17, 0x02	; 2
     992:	cc 0c       	add	r12, r12
     994:	dd 1c       	adc	r13, r13
     996:	ee 1c       	adc	r14, r14
     998:	ff 1c       	adc	r15, r15
     99a:	1a 95       	dec	r17
     99c:	d1 f7       	brne	.-12     	; 0x992 <bmp_read+0x2c0>
		int32_t const x2 = ((int32_t)Mc << 11) / (x1 + Md);

		int32_t const B5 = (x1 + x2);
		int32_t const B6 = B5 - 4000L;

		int32_t X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
     99e:	a0 91 5c 21 	lds	r26, 0x215C
     9a2:	b0 91 5d 21 	lds	r27, 0x215D
     9a6:	a3 01       	movw	r20, r6
     9a8:	92 01       	movw	r18, r4
     9aa:	0e 94 cb 14 	call	0x2996	; 0x2996 <__mulshisi3>
     9ae:	2b 01       	movw	r4, r22
     9b0:	3c 01       	movw	r6, r24
     9b2:	0b e0       	ldi	r16, 0x0B	; 11
     9b4:	75 94       	asr	r7
     9b6:	67 94       	ror	r6
     9b8:	57 94       	ror	r5
     9ba:	47 94       	ror	r4
     9bc:	0a 95       	dec	r16
     9be:	d1 f7       	brne	.-12     	; 0x9b4 <bmp_read+0x2e2>
		int32_t X2 = (AC2 * B6) >> 11;
     9c0:	a0 91 50 21 	lds	r26, 0x2150
     9c4:	b0 91 51 21 	lds	r27, 0x2151
     9c8:	a5 01       	movw	r20, r10
     9ca:	94 01       	movw	r18, r8
     9cc:	0e 94 cb 14 	call	0x2996	; 0x2996 <__mulshisi3>
     9d0:	2b e0       	ldi	r18, 0x0B	; 11
     9d2:	95 95       	asr	r25
     9d4:	87 95       	ror	r24
     9d6:	77 95       	ror	r23
     9d8:	67 95       	ror	r22
     9da:	2a 95       	dec	r18
     9dc:	d1 f7       	brne	.-12     	; 0x9d2 <bmp_read+0x300>
		int32_t X3 = X1 + X2;
     9de:	46 0e       	add	r4, r22
     9e0:	57 1e       	adc	r5, r23
     9e2:	68 1e       	adc	r6, r24
     9e4:	79 1e       	adc	r7, r25

		int32_t const B3 = ((((int32_t)AC1 * 4 + X3) << sensor_oss) + 2) >> 2;
     9e6:	c4 0c       	add	r12, r4
     9e8:	d5 1c       	adc	r13, r5
     9ea:	e6 1c       	adc	r14, r6
     9ec:	f7 1c       	adc	r15, r7
     9ee:	0e 2e       	mov	r0, r30
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <bmp_read+0x328>
     9f2:	cc 0c       	add	r12, r12
     9f4:	dd 1c       	adc	r13, r13
     9f6:	ee 1c       	adc	r14, r14
     9f8:	ff 1c       	adc	r15, r15
     9fa:	0a 94       	dec	r0
     9fc:	d2 f7       	brpl	.-12     	; 0x9f2 <bmp_read+0x320>
     9fe:	52 e0       	ldi	r21, 0x02	; 2
     a00:	c5 0e       	add	r12, r21
     a02:	d1 1c       	adc	r13, r1
     a04:	e1 1c       	adc	r14, r1
     a06:	f1 1c       	adc	r15, r1
     a08:	32 e0       	ldi	r19, 0x02	; 2
     a0a:	f5 94       	asr	r15
     a0c:	e7 94       	ror	r14
     a0e:	d7 94       	ror	r13
     a10:	c7 94       	ror	r12
     a12:	3a 95       	dec	r19
     a14:	d1 f7       	brne	.-12     	; 0xa0a <bmp_read+0x338>
		X1 = (AC3 * B6) >> 13;
		X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
		X3 = ((X1 + X2) + 2) >> 2;

		uint32_t const B4 = (AC4 * (uint32_t)(X3 + 32768L)) >> 15;
		uint32_t const B7 = (UP - B3) * (50000L >> sensor_oss);
     a16:	2a 85       	ldd	r18, Y+10	; 0x0a
     a18:	3b 85       	ldd	r19, Y+11	; 0x0b
     a1a:	4c 85       	ldd	r20, Y+12	; 0x0c
     a1c:	5d 85       	ldd	r21, Y+13	; 0x0d
     a1e:	2c 19       	sub	r18, r12
     a20:	3d 09       	sbc	r19, r13
     a22:	4e 09       	sbc	r20, r14
     a24:	5f 09       	sbc	r21, r15
     a26:	60 e5       	ldi	r22, 0x50	; 80
     a28:	73 ec       	ldi	r23, 0xC3	; 195
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <bmp_read+0x366>
     a30:	95 95       	asr	r25
     a32:	87 95       	ror	r24
     a34:	77 95       	ror	r23
     a36:	67 95       	ror	r22
     a38:	ea 95       	dec	r30
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <bmp_read+0x35e>
     a3c:	0e 94 65 14 	call	0x28ca	; 0x28ca <__mulsi3>

		int32_t P = (B7 < 0x80000000UL) ? ((B7 << 1) / B4) : ((B7 / B4) << 1);
     a40:	97 fd       	sbrc	r25, 7
     a42:	0d c0       	rjmp	.+26     	; 0xa5e <bmp_read+0x38c>
     a44:	66 0f       	add	r22, r22
     a46:	77 1f       	adc	r23, r23
     a48:	88 1f       	adc	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	2e 81       	ldd	r18, Y+6	; 0x06
     a4e:	3f 81       	ldd	r19, Y+7	; 0x07
     a50:	48 85       	ldd	r20, Y+8	; 0x08
     a52:	59 85       	ldd	r21, Y+9	; 0x09
     a54:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__udivmodsi4>
     a58:	49 01       	movw	r8, r18
     a5a:	5a 01       	movw	r10, r20
     a5c:	0c c0       	rjmp	.+24     	; 0xa76 <bmp_read+0x3a4>
     a5e:	2e 81       	ldd	r18, Y+6	; 0x06
     a60:	3f 81       	ldd	r19, Y+7	; 0x07
     a62:	48 85       	ldd	r20, Y+8	; 0x08
     a64:	59 85       	ldd	r21, Y+9	; 0x09
     a66:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__udivmodsi4>
     a6a:	49 01       	movw	r8, r18
     a6c:	5a 01       	movw	r10, r20
     a6e:	88 0c       	add	r8, r8
     a70:	99 1c       	adc	r9, r9
     a72:	aa 1c       	adc	r10, r10
     a74:	bb 1c       	adc	r11, r11

		X1 = (P >> 8);
     a76:	99 27       	eor	r25, r25
     a78:	b7 fc       	sbrc	r11, 7
     a7a:	9a 95       	dec	r25
     a7c:	8b 2d       	mov	r24, r11
     a7e:	7a 2d       	mov	r23, r10
     a80:	69 2d       	mov	r22, r9
		X1 = (X1 * X1 * 3038L) >> 16;
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	0e 94 65 14 	call	0x28ca	; 0x28ca <__mulsi3>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	ae ed       	ldi	r26, 0xDE	; 222
     a90:	bb e0       	ldi	r27, 0x0B	; 11
     a92:	0e 94 c1 14 	call	0x2982	; 0x2982 <__muluhisi3>
     a96:	6c 01       	movw	r12, r24
     a98:	ff 24       	eor	r15, r15
     a9a:	d7 fc       	sbrc	r13, 7
     a9c:	f0 94       	com	r15
     a9e:	ef 2c       	mov	r14, r15
		X2 = (-7357L * P) >> 16;
     aa0:	a3 e4       	ldi	r26, 0x43	; 67
     aa2:	b3 ee       	ldi	r27, 0xE3	; 227
     aa4:	a5 01       	movw	r20, r10
     aa6:	94 01       	movw	r18, r8
     aa8:	0e 94 cd 14 	call	0x299a	; 0x299a <__mulohisi3>
     aac:	bb 27       	eor	r27, r27
     aae:	97 fd       	sbrc	r25, 7
     ab0:	b0 95       	com	r27
     ab2:	ab 2f       	mov	r26, r27

		P += ((X1 + X2 + 3791L) >> 4);
     ab4:	c8 0e       	add	r12, r24
     ab6:	d9 1e       	adc	r13, r25
     ab8:	ea 1e       	adc	r14, r26
     aba:	fb 1e       	adc	r15, r27
     abc:	6f ec       	ldi	r22, 0xCF	; 207
     abe:	c6 0e       	add	r12, r22
     ac0:	6e e0       	ldi	r22, 0x0E	; 14
     ac2:	d6 1e       	adc	r13, r22
     ac4:	e1 1c       	adc	r14, r1
     ac6:	f1 1c       	adc	r15, r1
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	f5 94       	asr	r15
     acc:	e7 94       	ror	r14
     ace:	d7 94       	ror	r13
     ad0:	c7 94       	ror	r12
     ad2:	8a 95       	dec	r24
     ad4:	d1 f7       	brne	.-12     	; 0xaca <bmp_read+0x3f8>
     ad6:	c8 0c       	add	r12, r8
     ad8:	d9 1c       	adc	r13, r9
     ada:	ea 1c       	adc	r14, r10
     adc:	fb 1c       	adc	r15, r11

		data->pressure.value = P;
     ade:	d1 01       	movw	r26, r2
     ae0:	cd 92       	st	X+, r12
     ae2:	dd 92       	st	X+, r13
     ae4:	ed 92       	st	X+, r14
     ae6:	fc 92       	st	X, r15
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	64 c0       	rjmp	.+200    	; 0xbb4 <bmp_read+0x4e2>
 * @param data      The address where temperature samples are returned.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool bmp_get_temperature(sensor_hal_t *hal, sensor_data_t *data)
{
	int32_t const UT = bmp_get_ut(hal);
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	b8 dd       	rcall	.-1168   	; 0x662 <bmp_get_ut>

	if (false == data->scaled) {
     af2:	f1 01       	movw	r30, r2
     af4:	f0 89       	ldd	r31, Z+16	; 0x10
     af6:	fd 83       	std	Y+5, r31	; 0x05
     af8:	f1 11       	cpse	r31, r1
     afa:	09 c0       	rjmp	.+18     	; 0xb0e <bmp_read+0x43c>
		data->temperature.value = UT;
     afc:	d1 01       	movw	r26, r2
     afe:	6d 93       	st	X+, r22
     b00:	7d 93       	st	X+, r23
     b02:	8d 93       	st	X+, r24
     b04:	9c 93       	st	X, r25
     b06:	13 97       	sbiw	r26, 0x03	; 3
	switch (type) {
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);

	case SENSOR_READ_TEMPERATURE:
		return bmp_get_temperature(sensor->hal, data);
     b08:	01 e0       	ldi	r16, 0x01	; 1
     b0a:	0d 83       	std	Y+5, r16	; 0x05
     b0c:	53 c0       	rjmp	.+166    	; 0xbb4 <bmp_read+0x4e2>

	if (false == data->scaled) {
		data->temperature.value = UT;
	} else {
		/* The compensated temperature in 0.1 degrees C units. */
		int32_t const x1 = ((UT - AC6) * AC5) >> 15;
     b0e:	20 91 58 21 	lds	r18, 0x2158
     b12:	30 91 59 21 	lds	r19, 0x2159
     b16:	7b 01       	movw	r14, r22
     b18:	8c 01       	movw	r16, r24
     b1a:	e2 1a       	sub	r14, r18
     b1c:	f3 0a       	sbc	r15, r19
     b1e:	01 09       	sbc	r16, r1
     b20:	11 09       	sbc	r17, r1
     b22:	a8 01       	movw	r20, r16
     b24:	97 01       	movw	r18, r14
     b26:	a0 91 56 21 	lds	r26, 0x2156
     b2a:	b0 91 57 21 	lds	r27, 0x2157
     b2e:	0e 94 c1 14 	call	0x2982	; 0x2982 <__muluhisi3>
     b32:	6b 01       	movw	r12, r22
     b34:	7c 01       	movw	r14, r24
     b36:	ef e0       	ldi	r30, 0x0F	; 15
     b38:	f5 94       	asr	r15
     b3a:	e7 94       	ror	r14
     b3c:	d7 94       	ror	r13
     b3e:	c7 94       	ror	r12
     b40:	ea 95       	dec	r30
     b42:	d1 f7       	brne	.-12     	; 0xb38 <bmp_read+0x466>
		int32_t const x2 = ((int32_t)Mc << 11) / (x1 + Md);
     b44:	60 91 60 21 	lds	r22, 0x2160
     b48:	70 91 61 21 	lds	r23, 0x2161
     b4c:	88 27       	eor	r24, r24
     b4e:	77 fd       	sbrc	r23, 7
     b50:	80 95       	com	r24
     b52:	98 2f       	mov	r25, r24
     b54:	fb e0       	ldi	r31, 0x0B	; 11
     b56:	66 0f       	add	r22, r22
     b58:	77 1f       	adc	r23, r23
     b5a:	88 1f       	adc	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	fa 95       	dec	r31
     b60:	d1 f7       	brne	.-12     	; 0xb56 <bmp_read+0x484>
     b62:	20 91 62 21 	lds	r18, 0x2162
     b66:	30 91 63 21 	lds	r19, 0x2163
     b6a:	44 27       	eor	r20, r20
     b6c:	37 fd       	sbrc	r19, 7
     b6e:	40 95       	com	r20
     b70:	54 2f       	mov	r21, r20
     b72:	2c 0d       	add	r18, r12
     b74:	3d 1d       	adc	r19, r13
     b76:	4e 1d       	adc	r20, r14
     b78:	5f 1d       	adc	r21, r15
     b7a:	0e 94 96 14 	call	0x292c	; 0x292c <__divmodsi4>

		data->temperature.value = ((x1 + x2) + 8) >> 4;
     b7e:	2c 0d       	add	r18, r12
     b80:	3d 1d       	adc	r19, r13
     b82:	4e 1d       	adc	r20, r14
     b84:	5f 1d       	adc	r21, r15
     b86:	28 5f       	subi	r18, 0xF8	; 248
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	4f 4f       	sbci	r20, 0xFF	; 255
     b8c:	5f 4f       	sbci	r21, 0xFF	; 255
     b8e:	a4 e0       	ldi	r26, 0x04	; 4
     b90:	55 95       	asr	r21
     b92:	47 95       	ror	r20
     b94:	37 95       	ror	r19
     b96:	27 95       	ror	r18
     b98:	aa 95       	dec	r26
     b9a:	d1 f7       	brne	.-12     	; 0xb90 <bmp_read+0x4be>
     b9c:	d1 01       	movw	r26, r2
     b9e:	2d 93       	st	X+, r18
     ba0:	3d 93       	st	X+, r19
     ba2:	4d 93       	st	X+, r20
     ba4:	5c 93       	st	X, r21
     ba6:	13 97       	sbiw	r26, 0x03	; 3
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <bmp_read+0x4e2>

	case SENSOR_READ_ID:
		return bmp_device_id(sensor->hal, data);

	default:
		sensor->err = SENSOR_ERR_FUNCTION;
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	92 e8       	ldi	r25, 0x82	; 130
     bae:	87 83       	std	Z+7, r24	; 0x07
     bb0:	90 87       	std	Z+8, r25	; 0x08
		return false;
     bb2:	1d 82       	std	Y+5, r1	; 0x05
	}
}
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	2d 96       	adiw	r28, 0x0d	; 13
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	bf 90       	pop	r11
     bce:	af 90       	pop	r10
     bd0:	9f 90       	pop	r9
     bd2:	8f 90       	pop	r8
     bd4:	7f 90       	pop	r7
     bd6:	6f 90       	pop	r6
     bd8:	5f 90       	pop	r5
     bda:	4f 90       	pop	r4
     bdc:	3f 90       	pop	r3
     bde:	2f 90       	pop	r2
     be0:	08 95       	ret

00000be2 <bmp_ioctl>:
 * @param   cmd     Command to execute
 * @param   arg     Argument for command (varies)
 * @return  bool    true if the call succeeds, else false is returned.
 */
static bool bmp_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	1f 92       	push	r1
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
	sensor_hal_t *const hal = sensor->hal;
     bf0:	fc 01       	movw	r30, r24
     bf2:	00 81       	ld	r16, Z
     bf4:	11 81       	ldd	r17, Z+1	; 0x01
	bool status = false;

	switch (cmd) {
     bf6:	60 31       	cpi	r22, 0x10	; 16
     bf8:	69 f5       	brne	.+90     	; 0xc54 <bmp_ioctl+0x72>
 */
static bool bmp_set_state(sensor_hal_t *hal, sensor_state_t state)
{
	/* \todo  Handle Sleep & Suspend states. */

	switch (state) {
     bfa:	fa 01       	movw	r30, r20
     bfc:	80 81       	ld	r24, Z
     bfe:	86 30       	cpi	r24, 0x06	; 6
     c00:	28 f4       	brcc	.+10     	; 0xc0c <bmp_ioctl+0x2a>
     c02:	84 30       	cpi	r24, 0x04	; 4
     c04:	98 f4       	brcc	.+38     	; 0xc2c <bmp_ioctl+0x4a>
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	a9 f0       	breq	.+42     	; 0xc34 <bmp_ioctl+0x52>
     c0a:	29 c0       	rjmp	.+82     	; 0xc5e <bmp_ioctl+0x7c>
     c0c:	87 30       	cpi	r24, 0x07	; 7
     c0e:	a9 f0       	breq	.+42     	; 0xc3a <bmp_ioctl+0x58>
     c10:	80 f0       	brcs	.+32     	; 0xc32 <bmp_ioctl+0x50>
     c12:	8b 30       	cpi	r24, 0x0B	; 11
     c14:	21 f5       	brne	.+72     	; 0xc5e <bmp_ioctl+0x7c>
     c16:	86 eb       	ldi	r24, 0xB6	; 182
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	ae 01       	movw	r20, r28
     c20:	4f 5f       	subi	r20, 0xFF	; 255
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	60 ee       	ldi	r22, 0xE0	; 224
     c26:	c8 01       	movw	r24, r16
     c28:	ba d2       	rcall	.+1396   	; 0x119e <bus_write>
     c2a:	0a c0       	rjmp	.+20     	; 0xc40 <bmp_ioctl+0x5e>
		return false;

	case SENSOR_STATE_LOWEST_POWER:
	case SENSOR_STATE_LOW_POWER:

		sensor_oss = OSS_LOW_POWER;
     c2c:	10 92 64 21 	sts	0x2164, r1
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <bmp_ioctl+0x5e>
		sensor_oss = OSS_STANDARD;
		break;

	case SENSOR_STATE_HIGH_POWER:

		sensor_oss = OSS_HIGH;
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	80 93 64 21 	sts	0x2164, r24
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <bmp_ioctl+0x5e>
		break;

	case SENSOR_STATE_HIGHEST_POWER:

		sensor_oss = OSS_ULTRA_HIGH;
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	80 93 64 21 	sts	0x2164, r24
		 */
		sensor_bus_put(hal, BMP_SOFT_RESET, BMP_RESET_CMD);
		break;
	}

	hal->resolution = BMP_RESOLUTION;
     c40:	20 91 64 21 	lds	r18, 0x2164
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	20 5f       	subi	r18, 0xF0	; 240
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	f8 01       	movw	r30, r16
     c4c:	26 8f       	std	Z+30, r18	; 0x1e
     c4e:	37 8f       	std	Z+31, r19	; 0x1f

	return true;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <bmp_ioctl+0x7e>
	case SENSOR_SET_STATE:
		status = bmp_set_state(hal, *((sensor_state_t *)arg));
		break;

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e8       	ldi	r19, 0x80	; 128
     c58:	fc 01       	movw	r30, r24
     c5a:	27 83       	std	Z+7, r18	; 0x07
     c5c:	30 87       	std	Z+8, r19	; 0x08
 * @return  bool    true if the call succeeds, else false is returned.
 */
static bool bmp_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	sensor_hal_t *const hal = sensor->hal;
	bool status = false;
     c5e:	80 e0       	ldi	r24, 0x00	; 0
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
	}

	return status;
}
     c60:	0f 90       	pop	r0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <bmp085_init>:
 * @param   sensor  Address of a sensor device descriptor.
 * @param   resvd   Reserved value.
 * @return  bool    true if the sensor is ready for use, else false.
 */
bool bmp085_init(sensor_t *sensor, int resvd)
{
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	8c 01       	movw	r16, r24
	bool status = false;

	sensor_hal_t *const hal = sensor->hal;
     c78:	fc 01       	movw	r30, r24
     c7a:	c0 81       	ld	r28, Z
     c7c:	d1 81       	ldd	r29, Z+1	; 0x01

	if ((BMP085_ID_VAL == sensor_bus_get(hal, BMP_CHIP_ID)) &&
     c7e:	60 ed       	ldi	r22, 0xD0	; 208
     c80:	ce 01       	movw	r24, r28
     c82:	52 dc       	rcall	.-1884   	; 0x528 <bus_get>
     c84:	85 35       	cpi	r24, 0x55	; 85
     c86:	11 f0       	breq	.+4      	; 0xc8c <bmp085_init+0x20>
 * @param   resvd   Reserved value.
 * @return  bool    true if the sensor is ready for use, else false.
 */
bool bmp085_init(sensor_t *sensor, int resvd)
{
	bool status = false;
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	14 c0       	rjmp	.+40     	; 0xcb4 <bmp085_init+0x48>

	sensor_hal_t *const hal = sensor->hal;

	if ((BMP085_ID_VAL == sensor_bus_get(hal, BMP_CHIP_ID)) &&
			(BMP085_VER_VAL ==
			sensor_bus_get(hal, BMP_CHIP_VERSION))) {
     c8c:	61 ed       	ldi	r22, 0xD1	; 209
     c8e:	ce 01       	movw	r24, r28
     c90:	4b dc       	rcall	.-1898   	; 0x528 <bus_get>
     c92:	f8 2e       	mov	r15, r24
{
	bool status = false;

	sensor_hal_t *const hal = sensor->hal;

	if ((BMP085_ID_VAL == sensor_bus_get(hal, BMP_CHIP_ID)) &&
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	8f 13       	cpse	r24, r31
     c98:	f7 cf       	rjmp	.-18     	; 0xc88 <bmp085_init+0x1c>
			(BMP085_VER_VAL ==
			sensor_bus_get(hal, BMP_CHIP_VERSION))) {
		status = bmp_get_cal_param(hal);
     c9a:	ce 01       	movw	r24, r28
     c9c:	56 dc       	rcall	.-1876   	; 0x54a <bmp_get_cal_param>
			.caps.vendor  = SENSOR_VENDOR_BOSCH,
			.caps.units   = SENSOR_UNITS_pascal,
			.caps.name    = "BMP085 Digital pressure sensor"
		};

		sensor->drv = &bmp085_device;
     c9e:	26 ea       	ldi	r18, 0xA6	; 166
     ca0:	30 e2       	ldi	r19, 0x20	; 32
     ca2:	f8 01       	movw	r30, r16
     ca4:	22 83       	std	Z+2, r18	; 0x02
     ca6:	33 83       	std	Z+3, r19	; 0x03
		/* The initial "normal" execution state corresponds to the
		 * BMP085 standard mode (2 internal samples) with 17-bit data
		 * resolution and an average current @ 1 sample/s of typically
		 * 5 microamps.
		 */
		sensor_oss = OSS_STANDARD;
     ca8:	f0 92 64 21 	sts	0x2164, r15

		hal->resolution = BMP_RESOLUTION;
     cac:	21 e1       	ldi	r18, 0x11	; 17
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	2e 8f       	std	Y+30, r18	; 0x1e
     cb2:	3f 8f       	std	Y+31, r19	; 0x1f
	}

	return status;
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	08 95       	ret

00000cc0 <sensor_attach>:
 */
bool sensor_calibrate(sensor_t *sensor, sensor_calibration_t caltype,
		int code, void *caldata)
{
	return SENSOR_DRV_CALL(sensor, calibrate, caltype, code, caldata);
}
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	ec 01       	movw	r28, r24
     cd2:	8b 01       	movw	r16, r22
     cd4:	7a 01       	movw	r14, r20
     cd6:	69 01       	movw	r12, r18
     cd8:	cb 01       	movw	r24, r22
     cda:	ad d2       	rcall	.+1370   	; 0x1236 <sensor_find>
     cdc:	88 83       	st	Y, r24
     cde:	99 83       	std	Y+1, r25	; 0x01
     ce0:	0c 83       	std	Y+4, r16	; 0x04
     ce2:	1d 83       	std	Y+5, r17	; 0x05
     ce4:	cb 86       	std	Y+11, r12	; 0x0b
     ce6:	dc 86       	std	Y+12, r13	; 0x0c
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	79 f0       	breq	.+30     	; 0xd0a <sensor_attach+0x4a>
     cec:	dc 01       	movw	r26, r24
     cee:	90 96       	adiw	r26, 0x20	; 32
     cf0:	ed 91       	ld	r30, X+
     cf2:	fc 91       	ld	r31, X
     cf4:	91 97       	sbiw	r26, 0x21	; 33
     cf6:	b7 01       	movw	r22, r14
     cf8:	ce 01       	movw	r24, r28
     cfa:	19 95       	eicall
     cfc:	88 23       	and	r24, r24
     cfe:	29 f0       	breq	.+10     	; 0xd0a <sensor_attach+0x4a>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	8e 83       	std	Y+6, r24	; 0x06
     d04:	1f 82       	std	Y+7, r1	; 0x07
     d06:	18 86       	std	Y+8, r1	; 0x08
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <sensor_attach+0x54>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	8f 83       	std	Y+7, r24	; 0x07
     d10:	98 87       	std	Y+8, r25	; 0x08
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	08 95       	ret

00000d26 <sensor_read>:
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ea 01       	movw	r28, r20
     d2e:	dc 01       	movw	r26, r24
     d30:	12 96       	adiw	r26, 0x02	; 2
     d32:	ed 91       	ld	r30, X+
     d34:	fc 91       	ld	r31, X
     d36:	13 97       	sbiw	r26, 0x03	; 3
     d38:	01 90       	ld	r0, Z+
     d3a:	f0 81       	ld	r31, Z
     d3c:	e0 2d       	mov	r30, r0
     d3e:	30 97       	sbiw	r30, 0x00	; 0
     d40:	51 f0       	breq	.+20     	; 0xd56 <sensor_read+0x30>
     d42:	19 95       	eicall
     d44:	18 2f       	mov	r17, r24
     d46:	88 23       	and	r24, r24
     d48:	61 f0       	breq	.+24     	; 0xd62 <sensor_read+0x3c>
     d4a:	71 d2       	rcall	.+1250   	; 0x122e <sensor_timestamp>
     d4c:	6c 87       	std	Y+12, r22	; 0x0c
     d4e:	7d 87       	std	Y+13, r23	; 0x0d
     d50:	8e 87       	std	Y+14, r24	; 0x0e
     d52:	9f 87       	std	Y+15, r25	; 0x0f
     d54:	06 c0       	rjmp	.+12     	; 0xd62 <sensor_read+0x3c>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	32 e8       	ldi	r19, 0x82	; 130
     d5a:	fc 01       	movw	r30, r24
     d5c:	27 83       	std	Z+7, r18	; 0x07
     d5e:	30 87       	std	Z+8, r19	; 0x08
     d60:	10 e0       	ldi	r17, 0x00	; 0
     d62:	81 2f       	mov	r24, r17
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	08 95       	ret

00000d6c <sensor_device_id>:
     d6c:	cf 92       	push	r12
     d6e:	df 92       	push	r13
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	61 97       	sbiw	r28, 0x11	; 17
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	6b 01       	movw	r12, r22
     d88:	7a 01       	movw	r14, r20
     d8a:	ae 01       	movw	r20, r28
     d8c:	4f 5f       	subi	r20, 0xFF	; 255
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	63 e0       	ldi	r22, 0x03	; 3
     d92:	c9 df       	rcall	.-110    	; 0xd26 <sensor_read>
     d94:	88 23       	and	r24, r24
     d96:	61 f0       	breq	.+24     	; 0xdb0 <sensor_device_id+0x44>
     d98:	09 81       	ldd	r16, Y+1	; 0x01
     d9a:	1a 81       	ldd	r17, Y+2	; 0x02
     d9c:	2b 81       	ldd	r18, Y+3	; 0x03
     d9e:	3c 81       	ldd	r19, Y+4	; 0x04
     da0:	f6 01       	movw	r30, r12
     da2:	00 83       	st	Z, r16
     da4:	11 83       	std	Z+1, r17	; 0x01
     da6:	22 83       	std	Z+2, r18	; 0x02
     da8:	33 83       	std	Z+3, r19	; 0x03
     daa:	9d 81       	ldd	r25, Y+5	; 0x05
     dac:	f7 01       	movw	r30, r14
     dae:	90 83       	st	Z, r25
     db0:	61 96       	adiw	r28, 0x11	; 17
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	08 95       	ret

00000dc8 <sensor_set_state>:
 * @param   sensor  The address of an initialized sensor descriptor.
 * @param   mode    A specified sensor operational mode.
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_set_state(sensor_t *sensor, sensor_state_t mode)
{
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	1f 92       	push	r1
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	8c 01       	movw	r16, r24
     dd8:	69 83       	std	Y+1, r22	; 0x01
	bool result = false;

	if (mode != sensor->mod) {
     dda:	d8 01       	movw	r26, r16
     ddc:	16 96       	adiw	r26, 0x06	; 6
     dde:	9c 91       	ld	r25, X
     de0:	16 97       	sbiw	r26, 0x06	; 6
     de2:	69 17       	cp	r22, r25
     de4:	01 f1       	breq	.+64     	; 0xe26 <sensor_set_state+0x5e>
		result
			= SENSOR_DRV_CALL(sensor, ioctl, SENSOR_SET_STATE,
     de6:	12 96       	adiw	r26, 0x02	; 2
     de8:	ed 91       	ld	r30, X+
     dea:	fc 91       	ld	r31, X
     dec:	13 97       	sbiw	r26, 0x03	; 3
     dee:	02 80       	ldd	r0, Z+2	; 0x02
     df0:	f3 81       	ldd	r31, Z+3	; 0x03
     df2:	e0 2d       	mov	r30, r0
     df4:	30 97       	sbiw	r30, 0x00	; 0
     df6:	49 f0       	breq	.+18     	; 0xe0a <sensor_set_state+0x42>
     df8:	ae 01       	movw	r20, r28
     dfa:	4f 5f       	subi	r20, 0xFF	; 255
     dfc:	5f 4f       	sbci	r21, 0xFF	; 255
     dfe:	60 e1       	ldi	r22, 0x10	; 16
     e00:	c8 01       	movw	r24, r16
     e02:	19 95       	eicall
				&mode);
	}

	if (result) {
     e04:	81 11       	cpse	r24, r1
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <sensor_set_state+0x4e>
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <sensor_set_state+0x60>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	92 e8       	ldi	r25, 0x82	; 130
     e0e:	f8 01       	movw	r30, r16
     e10:	87 83       	std	Z+7, r24	; 0x07
     e12:	90 87       	std	Z+8, r25	; 0x08
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <sensor_set_state+0x5e>
				&mode);
	}

	if (result) {
		sensor->mod
			= (mode ==
     e16:	99 81       	ldd	r25, Y+1	; 0x01
     e18:	9b 30       	cpi	r25, 0x0B	; 11
     e1a:	09 f4       	brne	.+2      	; 0xe1e <sensor_set_state+0x56>
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	d8 01       	movw	r26, r16
     e20:	16 96       	adiw	r26, 0x06	; 6
     e22:	9c 93       	st	X, r25
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <sensor_set_state+0x60>
     e26:	80 e0       	ldi	r24, 0x00	; 0
				SENSOR_STATE_RESET) ? SENSOR_STATE_NORMAL : mode;
	}

	return result;
}
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret

00000e34 <bus_init>:
 */
uint8_t bus_reg_fieldget(bus_desc_t *bus, uint8_t addr, uint8_t mask)
{
	uint8_t const value = mask & bus_get(bus, addr);
	return (value / (mask & ~(mask << 1)));
}
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	29 97       	sbiw	r28, 0x09	; 9
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	8c 01       	movw	r16, r24
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	7c 01       	movw	r14, r24
     e52:	89 e0       	ldi	r24, 0x09	; 9
     e54:	f7 01       	movw	r30, r14
     e56:	11 92       	st	Z+, r1
     e58:	8a 95       	dec	r24
     e5a:	e9 f7       	brne	.-6      	; 0xe56 <bus_init+0x22>
     e5c:	49 83       	std	Y+1, r20	; 0x01
     e5e:	5a 83       	std	Y+2, r21	; 0x02
     e60:	6b 83       	std	Y+3, r22	; 0x03
     e62:	7c 83       	std	Y+4, r23	; 0x04
     e64:	9a 01       	movw	r18, r20
     e66:	ab 01       	movw	r20, r22
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	44 1f       	adc	r20, r20
     e6e:	55 1f       	adc	r21, r21
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	78 e4       	ldi	r23, 0x48	; 72
     e74:	88 ee       	ldi	r24, 0xE8	; 232
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__udivmodsi4>
     e7c:	25 50       	subi	r18, 0x05	; 5
     e7e:	31 09       	sbc	r19, r1
     e80:	41 09       	sbc	r20, r1
     e82:	51 09       	sbc	r21, r1
     e84:	2d 83       	std	Y+5, r18	; 0x05
     e86:	3e 83       	std	Y+6, r19	; 0x06
     e88:	4f 83       	std	Y+7, r20	; 0x07
     e8a:	58 87       	std	Y+8, r21	; 0x08
     e8c:	01 15       	cp	r16, r1
     e8e:	11 05       	cpc	r17, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <bus_init+0x60>
     e92:	36 c1       	rjmp	.+620    	; 0x1100 <bus_init+0x2cc>
     e94:	00 3c       	cpi	r16, 0xC0	; 192
     e96:	11 05       	cpc	r17, r1
     e98:	21 f4       	brne	.+8      	; 0xea2 <bus_init+0x6e>
     e9a:	60 e1       	ldi	r22, 0x10	; 16
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0c db       	rcall	.-2536   	; 0x4b8 <sysclk_enable_module>
     ea0:	2f c1       	rjmp	.+606    	; 0x1100 <bus_init+0x2cc>
     ea2:	00 34       	cpi	r16, 0x40	; 64
     ea4:	f4 e0       	ldi	r31, 0x04	; 4
     ea6:	1f 07       	cpc	r17, r31
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <bus_init+0x7e>
     eaa:	68 e0       	ldi	r22, 0x08	; 8
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	04 db       	rcall	.-2552   	; 0x4b8 <sysclk_enable_module>
     eb0:	27 c1       	rjmp	.+590    	; 0x1100 <bus_init+0x2cc>
     eb2:	01 15       	cp	r16, r1
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	18 07       	cpc	r17, r24
     eb8:	21 f4       	brne	.+8      	; 0xec2 <bus_init+0x8e>
     eba:	64 e0       	ldi	r22, 0x04	; 4
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	fc da       	rcall	.-2568   	; 0x4b8 <sysclk_enable_module>
     ec0:	1f c1       	rjmp	.+574    	; 0x1100 <bus_init+0x2cc>
     ec2:	00 38       	cpi	r16, 0x80	; 128
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	19 07       	cpc	r17, r25
     ec8:	21 f4       	brne	.+8      	; 0xed2 <bus_init+0x9e>
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	f4 da       	rcall	.-2584   	; 0x4b8 <sysclk_enable_module>
     ed0:	17 c1       	rjmp	.+558    	; 0x1100 <bus_init+0x2cc>
     ed2:	01 15       	cp	r16, r1
     ed4:	e1 e0       	ldi	r30, 0x01	; 1
     ed6:	1e 07       	cpc	r17, r30
     ed8:	21 f4       	brne	.+8      	; 0xee2 <bus_init+0xae>
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	ec da       	rcall	.-2600   	; 0x4b8 <sysclk_enable_module>
     ee0:	0f c1       	rjmp	.+542    	; 0x1100 <bus_init+0x2cc>
     ee2:	00 38       	cpi	r16, 0x80	; 128
     ee4:	f3 e0       	ldi	r31, 0x03	; 3
     ee6:	1f 07       	cpc	r17, r31
     ee8:	21 f4       	brne	.+8      	; 0xef2 <bus_init+0xbe>
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	e4 da       	rcall	.-2616   	; 0x4b8 <sysclk_enable_module>
     ef0:	07 c1       	rjmp	.+526    	; 0x1100 <bus_init+0x2cc>
     ef2:	00 39       	cpi	r16, 0x90	; 144
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	18 07       	cpc	r17, r24
     ef8:	21 f4       	brne	.+8      	; 0xf02 <bus_init+0xce>
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	dc da       	rcall	.-2632   	; 0x4b8 <sysclk_enable_module>
     f00:	ff c0       	rjmp	.+510    	; 0x1100 <bus_init+0x2cc>
     f02:	01 15       	cp	r16, r1
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	19 07       	cpc	r17, r25
     f08:	21 f4       	brne	.+8      	; 0xf12 <bus_init+0xde>
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	d4 da       	rcall	.-2648   	; 0x4b8 <sysclk_enable_module>
     f10:	f7 c0       	rjmp	.+494    	; 0x1100 <bus_init+0x2cc>
     f12:	00 34       	cpi	r16, 0x40	; 64
     f14:	e2 e0       	ldi	r30, 0x02	; 2
     f16:	1e 07       	cpc	r17, r30
     f18:	21 f4       	brne	.+8      	; 0xf22 <bus_init+0xee>
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	cc da       	rcall	.-2664   	; 0x4b8 <sysclk_enable_module>
     f20:	ef c0       	rjmp	.+478    	; 0x1100 <bus_init+0x2cc>
     f22:	01 15       	cp	r16, r1
     f24:	f3 e0       	ldi	r31, 0x03	; 3
     f26:	1f 07       	cpc	r17, r31
     f28:	21 f4       	brne	.+8      	; 0xf32 <bus_init+0xfe>
     f2a:	64 e0       	ldi	r22, 0x04	; 4
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	c4 da       	rcall	.-2680   	; 0x4b8 <sysclk_enable_module>
     f30:	e7 c0       	rjmp	.+462    	; 0x1100 <bus_init+0x2cc>
     f32:	00 32       	cpi	r16, 0x20	; 32
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	18 07       	cpc	r17, r24
     f38:	21 f4       	brne	.+8      	; 0xf42 <bus_init+0x10e>
     f3a:	64 e0       	ldi	r22, 0x04	; 4
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	bc da       	rcall	.-2696   	; 0x4b8 <sysclk_enable_module>
     f40:	df c0       	rjmp	.+446    	; 0x1100 <bus_init+0x2cc>
     f42:	01 15       	cp	r16, r1
     f44:	98 e0       	ldi	r25, 0x08	; 8
     f46:	19 07       	cpc	r17, r25
     f48:	21 f4       	brne	.+8      	; 0xf52 <bus_init+0x11e>
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	b4 da       	rcall	.-2712   	; 0x4b8 <sysclk_enable_module>
     f50:	d7 c0       	rjmp	.+430    	; 0x1100 <bus_init+0x2cc>
     f52:	01 15       	cp	r16, r1
     f54:	e9 e0       	ldi	r30, 0x09	; 9
     f56:	1e 07       	cpc	r17, r30
     f58:	21 f4       	brne	.+8      	; 0xf62 <bus_init+0x12e>
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	84 e0       	ldi	r24, 0x04	; 4
     f5e:	ac da       	rcall	.-2728   	; 0x4b8 <sysclk_enable_module>
     f60:	cf c0       	rjmp	.+414    	; 0x1100 <bus_init+0x2cc>
     f62:	01 15       	cp	r16, r1
     f64:	fa e0       	ldi	r31, 0x0A	; 10
     f66:	1f 07       	cpc	r17, r31
     f68:	21 f4       	brne	.+8      	; 0xf72 <bus_init+0x13e>
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	85 e0       	ldi	r24, 0x05	; 5
     f6e:	a4 da       	rcall	.-2744   	; 0x4b8 <sysclk_enable_module>
     f70:	c7 c0       	rjmp	.+398    	; 0x1100 <bus_init+0x2cc>
     f72:	01 15       	cp	r16, r1
     f74:	8b e0       	ldi	r24, 0x0B	; 11
     f76:	18 07       	cpc	r17, r24
     f78:	21 f4       	brne	.+8      	; 0xf82 <bus_init+0x14e>
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	86 e0       	ldi	r24, 0x06	; 6
     f7e:	9c da       	rcall	.-2760   	; 0x4b8 <sysclk_enable_module>
     f80:	bf c0       	rjmp	.+382    	; 0x1100 <bus_init+0x2cc>
     f82:	00 34       	cpi	r16, 0x40	; 64
     f84:	98 e0       	ldi	r25, 0x08	; 8
     f86:	19 07       	cpc	r17, r25
     f88:	21 f4       	brne	.+8      	; 0xf92 <bus_init+0x15e>
     f8a:	62 e0       	ldi	r22, 0x02	; 2
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	94 da       	rcall	.-2776   	; 0x4b8 <sysclk_enable_module>
     f90:	b7 c0       	rjmp	.+366    	; 0x1100 <bus_init+0x2cc>
     f92:	00 34       	cpi	r16, 0x40	; 64
     f94:	e9 e0       	ldi	r30, 0x09	; 9
     f96:	1e 07       	cpc	r17, r30
     f98:	21 f4       	brne	.+8      	; 0xfa2 <bus_init+0x16e>
     f9a:	62 e0       	ldi	r22, 0x02	; 2
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	8c da       	rcall	.-2792   	; 0x4b8 <sysclk_enable_module>
     fa0:	af c0       	rjmp	.+350    	; 0x1100 <bus_init+0x2cc>
     fa2:	00 34       	cpi	r16, 0x40	; 64
     fa4:	fa e0       	ldi	r31, 0x0A	; 10
     fa6:	1f 07       	cpc	r17, r31
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <bus_init+0x17e>
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	85 e0       	ldi	r24, 0x05	; 5
     fae:	84 da       	rcall	.-2808   	; 0x4b8 <sysclk_enable_module>
     fb0:	a7 c0       	rjmp	.+334    	; 0x1100 <bus_init+0x2cc>
     fb2:	00 34       	cpi	r16, 0x40	; 64
     fb4:	8b e0       	ldi	r24, 0x0B	; 11
     fb6:	18 07       	cpc	r17, r24
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <bus_init+0x18e>
     fba:	62 e0       	ldi	r22, 0x02	; 2
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	7c da       	rcall	.-2824   	; 0x4b8 <sysclk_enable_module>
     fc0:	9f c0       	rjmp	.+318    	; 0x1100 <bus_init+0x2cc>
     fc2:	00 39       	cpi	r16, 0x90	; 144
     fc4:	98 e0       	ldi	r25, 0x08	; 8
     fc6:	19 07       	cpc	r17, r25
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <bus_init+0x19e>
     fca:	64 e0       	ldi	r22, 0x04	; 4
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	74 da       	rcall	.-2840   	; 0x4b8 <sysclk_enable_module>
     fd0:	97 c0       	rjmp	.+302    	; 0x1100 <bus_init+0x2cc>
     fd2:	00 39       	cpi	r16, 0x90	; 144
     fd4:	e9 e0       	ldi	r30, 0x09	; 9
     fd6:	1e 07       	cpc	r17, r30
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <bus_init+0x1ae>
     fda:	64 e0       	ldi	r22, 0x04	; 4
     fdc:	84 e0       	ldi	r24, 0x04	; 4
     fde:	6c da       	rcall	.-2856   	; 0x4b8 <sysclk_enable_module>
     fe0:	8f c0       	rjmp	.+286    	; 0x1100 <bus_init+0x2cc>
     fe2:	00 39       	cpi	r16, 0x90	; 144
     fe4:	fa e0       	ldi	r31, 0x0A	; 10
     fe6:	1f 07       	cpc	r17, r31
     fe8:	21 f4       	brne	.+8      	; 0xff2 <bus_init+0x1be>
     fea:	64 e0       	ldi	r22, 0x04	; 4
     fec:	85 e0       	ldi	r24, 0x05	; 5
     fee:	64 da       	rcall	.-2872   	; 0x4b8 <sysclk_enable_module>
     ff0:	87 c0       	rjmp	.+270    	; 0x1100 <bus_init+0x2cc>
     ff2:	00 39       	cpi	r16, 0x90	; 144
     ff4:	8b e0       	ldi	r24, 0x0B	; 11
     ff6:	18 07       	cpc	r17, r24
     ff8:	21 f4       	brne	.+8      	; 0x1002 <bus_init+0x1ce>
     ffa:	64 e0       	ldi	r22, 0x04	; 4
     ffc:	86 e0       	ldi	r24, 0x06	; 6
     ffe:	5c da       	rcall	.-2888   	; 0x4b8 <sysclk_enable_module>
    1000:	7f c0       	rjmp	.+254    	; 0x1100 <bus_init+0x2cc>
    1002:	00 3c       	cpi	r16, 0xC0	; 192
    1004:	98 e0       	ldi	r25, 0x08	; 8
    1006:	19 07       	cpc	r17, r25
    1008:	21 f4       	brne	.+8      	; 0x1012 <bus_init+0x1de>
    100a:	68 e0       	ldi	r22, 0x08	; 8
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	54 da       	rcall	.-2904   	; 0x4b8 <sysclk_enable_module>
    1010:	77 c0       	rjmp	.+238    	; 0x1100 <bus_init+0x2cc>
    1012:	00 3c       	cpi	r16, 0xC0	; 192
    1014:	e9 e0       	ldi	r30, 0x09	; 9
    1016:	1e 07       	cpc	r17, r30
    1018:	21 f4       	brne	.+8      	; 0x1022 <bus_init+0x1ee>
    101a:	68 e0       	ldi	r22, 0x08	; 8
    101c:	84 e0       	ldi	r24, 0x04	; 4
    101e:	4c da       	rcall	.-2920   	; 0x4b8 <sysclk_enable_module>
    1020:	6f c0       	rjmp	.+222    	; 0x1100 <bus_init+0x2cc>
    1022:	00 3c       	cpi	r16, 0xC0	; 192
    1024:	fa e0       	ldi	r31, 0x0A	; 10
    1026:	1f 07       	cpc	r17, r31
    1028:	21 f4       	brne	.+8      	; 0x1032 <bus_init+0x1fe>
    102a:	68 e0       	ldi	r22, 0x08	; 8
    102c:	85 e0       	ldi	r24, 0x05	; 5
    102e:	44 da       	rcall	.-2936   	; 0x4b8 <sysclk_enable_module>
    1030:	67 c0       	rjmp	.+206    	; 0x1100 <bus_init+0x2cc>
    1032:	00 3c       	cpi	r16, 0xC0	; 192
    1034:	8b e0       	ldi	r24, 0x0B	; 11
    1036:	18 07       	cpc	r17, r24
    1038:	21 f4       	brne	.+8      	; 0x1042 <bus_init+0x20e>
    103a:	68 e0       	ldi	r22, 0x08	; 8
    103c:	86 e0       	ldi	r24, 0x06	; 6
    103e:	3c da       	rcall	.-2952   	; 0x4b8 <sysclk_enable_module>
    1040:	5f c0       	rjmp	.+190    	; 0x1100 <bus_init+0x2cc>
    1042:	00 3a       	cpi	r16, 0xA0	; 160
    1044:	98 e0       	ldi	r25, 0x08	; 8
    1046:	19 07       	cpc	r17, r25
    1048:	21 f4       	brne	.+8      	; 0x1052 <bus_init+0x21e>
    104a:	60 e1       	ldi	r22, 0x10	; 16
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	34 da       	rcall	.-2968   	; 0x4b8 <sysclk_enable_module>
    1050:	57 c0       	rjmp	.+174    	; 0x1100 <bus_init+0x2cc>
    1052:	00 3a       	cpi	r16, 0xA0	; 160
    1054:	e9 e0       	ldi	r30, 0x09	; 9
    1056:	1e 07       	cpc	r17, r30
    1058:	21 f4       	brne	.+8      	; 0x1062 <bus_init+0x22e>
    105a:	60 e1       	ldi	r22, 0x10	; 16
    105c:	84 e0       	ldi	r24, 0x04	; 4
    105e:	2c da       	rcall	.-2984   	; 0x4b8 <sysclk_enable_module>
    1060:	4f c0       	rjmp	.+158    	; 0x1100 <bus_init+0x2cc>
    1062:	00 3a       	cpi	r16, 0xA0	; 160
    1064:	fa e0       	ldi	r31, 0x0A	; 10
    1066:	1f 07       	cpc	r17, r31
    1068:	21 f4       	brne	.+8      	; 0x1072 <bus_init+0x23e>
    106a:	60 e1       	ldi	r22, 0x10	; 16
    106c:	85 e0       	ldi	r24, 0x05	; 5
    106e:	24 da       	rcall	.-3000   	; 0x4b8 <sysclk_enable_module>
    1070:	47 c0       	rjmp	.+142    	; 0x1100 <bus_init+0x2cc>
    1072:	00 3a       	cpi	r16, 0xA0	; 160
    1074:	8b e0       	ldi	r24, 0x0B	; 11
    1076:	18 07       	cpc	r17, r24
    1078:	21 f4       	brne	.+8      	; 0x1082 <bus_init+0x24e>
    107a:	60 e1       	ldi	r22, 0x10	; 16
    107c:	86 e0       	ldi	r24, 0x06	; 6
    107e:	1c da       	rcall	.-3016   	; 0x4b8 <sysclk_enable_module>
    1080:	3f c0       	rjmp	.+126    	; 0x1100 <bus_init+0x2cc>
    1082:	00 3b       	cpi	r16, 0xB0	; 176
    1084:	98 e0       	ldi	r25, 0x08	; 8
    1086:	19 07       	cpc	r17, r25
    1088:	21 f4       	brne	.+8      	; 0x1092 <bus_init+0x25e>
    108a:	60 e2       	ldi	r22, 0x20	; 32
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	14 da       	rcall	.-3032   	; 0x4b8 <sysclk_enable_module>
    1090:	37 c0       	rjmp	.+110    	; 0x1100 <bus_init+0x2cc>
    1092:	00 3b       	cpi	r16, 0xB0	; 176
    1094:	e9 e0       	ldi	r30, 0x09	; 9
    1096:	1e 07       	cpc	r17, r30
    1098:	21 f4       	brne	.+8      	; 0x10a2 <bus_init+0x26e>
    109a:	60 e2       	ldi	r22, 0x20	; 32
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	0c da       	rcall	.-3048   	; 0x4b8 <sysclk_enable_module>
    10a0:	2f c0       	rjmp	.+94     	; 0x1100 <bus_init+0x2cc>
    10a2:	00 3b       	cpi	r16, 0xB0	; 176
    10a4:	fa e0       	ldi	r31, 0x0A	; 10
    10a6:	1f 07       	cpc	r17, r31
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <bus_init+0x27e>
    10aa:	60 e2       	ldi	r22, 0x20	; 32
    10ac:	85 e0       	ldi	r24, 0x05	; 5
    10ae:	04 da       	rcall	.-3064   	; 0x4b8 <sysclk_enable_module>
    10b0:	27 c0       	rjmp	.+78     	; 0x1100 <bus_init+0x2cc>
    10b2:	00 3b       	cpi	r16, 0xB0	; 176
    10b4:	8b e0       	ldi	r24, 0x0B	; 11
    10b6:	18 07       	cpc	r17, r24
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <bus_init+0x28e>
    10ba:	60 e2       	ldi	r22, 0x20	; 32
    10bc:	86 e0       	ldi	r24, 0x06	; 6
    10be:	fc d9       	rcall	.-3080   	; 0x4b8 <sysclk_enable_module>
    10c0:	1f c0       	rjmp	.+62     	; 0x1100 <bus_init+0x2cc>
    10c2:	00 38       	cpi	r16, 0x80	; 128
    10c4:	94 e0       	ldi	r25, 0x04	; 4
    10c6:	19 07       	cpc	r17, r25
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <bus_init+0x29e>
    10ca:	60 e4       	ldi	r22, 0x40	; 64
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	f4 d9       	rcall	.-3096   	; 0x4b8 <sysclk_enable_module>
    10d0:	17 c0       	rjmp	.+46     	; 0x1100 <bus_init+0x2cc>
    10d2:	00 39       	cpi	r16, 0x90	; 144
    10d4:	e4 e0       	ldi	r30, 0x04	; 4
    10d6:	1e 07       	cpc	r17, r30
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <bus_init+0x2ae>
    10da:	60 e4       	ldi	r22, 0x40	; 64
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	ec d9       	rcall	.-3112   	; 0x4b8 <sysclk_enable_module>
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <bus_init+0x2cc>
    10e2:	00 3a       	cpi	r16, 0xA0	; 160
    10e4:	f4 e0       	ldi	r31, 0x04	; 4
    10e6:	1f 07       	cpc	r17, r31
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <bus_init+0x2be>
    10ea:	60 e4       	ldi	r22, 0x40	; 64
    10ec:	85 e0       	ldi	r24, 0x05	; 5
    10ee:	e4 d9       	rcall	.-3128   	; 0x4b8 <sysclk_enable_module>
    10f0:	07 c0       	rjmp	.+14     	; 0x1100 <bus_init+0x2cc>
    10f2:	00 3b       	cpi	r16, 0xB0	; 176
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	18 07       	cpc	r17, r24
    10f8:	19 f4       	brne	.+6      	; 0x1100 <bus_init+0x2cc>
    10fa:	60 e4       	ldi	r22, 0x40	; 64
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	dc d9       	rcall	.-3144   	; 0x4b8 <sysclk_enable_module>
    1100:	b7 01       	movw	r22, r14
    1102:	c8 01       	movw	r24, r16
    1104:	09 d3       	rcall	.+1554   	; 0x1718 <twi_master_init>
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	81 11       	cpse	r24, r1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	89 2f       	mov	r24, r25
    110e:	29 96       	adiw	r28, 0x09	; 9
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	08 95       	ret

00001122 <bus_read>:
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	2d 97       	sbiw	r28, 0x0d	; 13
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	8c 01       	movw	r16, r24
    1136:	fe 01       	movw	r30, r28
    1138:	31 96       	adiw	r30, 0x01	; 1
    113a:	8b e0       	ldi	r24, 0x0B	; 11
    113c:	df 01       	movw	r26, r30
    113e:	1d 92       	st	X+, r1
    1140:	8a 95       	dec	r24
    1142:	e9 f7       	brne	.-6      	; 0x113e <bus_read+0x1c>
    1144:	d8 01       	movw	r26, r16
    1146:	13 96       	adiw	r26, 0x03	; 3
    1148:	8c 91       	ld	r24, X
    114a:	13 97       	sbiw	r26, 0x03	; 3
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	6a 83       	std	Y+2, r22	; 0x02
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	6d 83       	std	Y+5, r22	; 0x05
    1156:	7e 83       	std	Y+6, r23	; 0x06
    1158:	4f 83       	std	Y+7, r20	; 0x07
    115a:	58 87       	std	Y+8, r21	; 0x08
    115c:	29 87       	std	Y+9, r18	; 0x09
    115e:	3a 87       	std	Y+10, r19	; 0x0a
    1160:	16 96       	adiw	r26, 0x06	; 6
    1162:	8c 91       	ld	r24, X
    1164:	16 97       	sbiw	r26, 0x06	; 6
    1166:	8b 87       	std	Y+11, r24	; 0x0b
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	bf 01       	movw	r22, r30
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	8d 91       	ld	r24, X+
    1170:	9c 91       	ld	r25, X
    1172:	12 97       	sbiw	r26, 0x02	; 2
    1174:	2c 87       	std	Y+12, r18	; 0x0c
    1176:	3d 87       	std	Y+13, r19	; 0x0d
    1178:	e4 d2       	rcall	.+1480   	; 0x1742 <twi_master_transfer>
    117a:	f8 01       	movw	r30, r16
    117c:	85 83       	std	Z+5, r24	; 0x05
    117e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1180:	3d 85       	ldd	r19, Y+13	; 0x0d
    1182:	88 23       	and	r24, r24
    1184:	19 f0       	breq	.+6      	; 0x118c <bus_read+0x6a>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	01 c0       	rjmp	.+2      	; 0x118e <bus_read+0x6c>
    118c:	c9 01       	movw	r24, r18
    118e:	2d 96       	adiw	r28, 0x0d	; 13
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <bus_write>:
 * \return The number of Bytes written, which may be less than the
 *         requested number of Bytes in the event of an error.
 */
size_t twi_bus_write(bus_desc_t *bus, uint8_t addr, const void *data,
		size_t count)
{
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	2d 97       	sbiw	r28, 0x0d	; 13
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	8c 01       	movw	r16, r24
	twi_package_t const pkg = {
    11b2:	fe 01       	movw	r30, r28
    11b4:	31 96       	adiw	r30, 0x01	; 1
    11b6:	8b e0       	ldi	r24, 0x0B	; 11
    11b8:	df 01       	movw	r26, r30
    11ba:	1d 92       	st	X+, r1
    11bc:	8a 95       	dec	r24
    11be:	e9 f7       	brne	.-6      	; 0x11ba <bus_write+0x1c>
    11c0:	d8 01       	movw	r26, r16
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	8c 91       	ld	r24, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	6a 83       	std	Y+2, r22	; 0x02
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	6d 83       	std	Y+5, r22	; 0x05
    11d2:	7e 83       	std	Y+6, r23	; 0x06
    11d4:	4f 83       	std	Y+7, r20	; 0x07
    11d6:	58 87       	std	Y+8, r21	; 0x08
    11d8:	29 87       	std	Y+9, r18	; 0x09
    11da:	3a 87       	std	Y+10, r19	; 0x0a
    11dc:	16 96       	adiw	r26, 0x06	; 6
    11de:	8c 91       	ld	r24, X
    11e0:	16 97       	sbiw	r26, 0x06	; 6
    11e2:	8b 87       	std	Y+11, r24	; 0x0b
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	bf 01       	movw	r22, r30
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	8d 91       	ld	r24, X+
    11ec:	9c 91       	ld	r25, X
    11ee:	12 97       	sbiw	r26, 0x02	; 2
    11f0:	2c 87       	std	Y+12, r18	; 0x0c
    11f2:	3d 87       	std	Y+13, r19	; 0x0d
    11f4:	a6 d2       	rcall	.+1356   	; 0x1742 <twi_master_transfer>
		.buffer      = (void *)data,
		.length      = count,
		.no_wait     = bus->no_wait
	};

	bus->status = twi_master_write((twi_master_t)(bus->id), &pkg);
    11f6:	f8 01       	movw	r30, r16
    11f8:	85 83       	std	Z+5, r24	; 0x05
	return (STATUS_OK == bus->status) ? count : 0;
    11fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    11fe:	88 23       	and	r24, r24
    1200:	19 f0       	breq	.+6      	; 0x1208 <bus_write+0x6a>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	01 c0       	rjmp	.+2      	; 0x120a <bus_write+0x6c>
    1208:	c9 01       	movw	r24, r18
}
    120a:	2d 96       	adiw	r28, 0x0d	; 13
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <__portable_avr_delay_cycles>:
	};

	*dev_count = ARRAYSIZE(sensor_dev_list);

	return sensor_dev_list;
}
    121a:	61 50       	subi	r22, 0x01	; 1
    121c:	71 09       	sbc	r23, r1
    121e:	81 09       	sbc	r24, r1
    1220:	91 09       	sbc	r25, r1
    1222:	61 15       	cp	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	81 05       	cpc	r24, r1
    1228:	91 05       	cpc	r25, r1
    122a:	b9 f7       	brne	.-18     	; 0x121a <__portable_avr_delay_cycles>
    122c:	08 95       	ret

0000122e <sensor_timestamp>:
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	cb 01       	movw	r24, r22
    1234:	08 95       	ret

00001236 <sensor_find>:
	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    1236:	20 91 10 20 	lds	r18, 0x2010
    123a:	30 91 11 20 	lds	r19, 0x2011
    123e:	28 23       	and	r18, r24
    1240:	39 23       	and	r19, r25
    1242:	28 17       	cp	r18, r24
    1244:	39 07       	cpc	r19, r25
    1246:	19 f4       	brne	.+6      	; 0x124e <sensor_find+0x18>
			return &dev_list [index];
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e2       	ldi	r25, 0x20	; 32
    124c:	08 95       	ret
		}
	}

	return 0;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
}
    1252:	08 95       	ret

00001254 <sensor_platform_init>:
 * hardware abstraction layer (HAL) for the Xplained Sensor API.
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_platform_init(void)
{
    1254:	cf 93       	push	r28
	bool initialized = false;

	/* Initialize the system clock and all clocks derived from it. */

	sysclk_init();
    1256:	ea d8       	rcall	.-3628   	; 0x42c <sysclk_init>
	/* Initialize the board (UC3/XMEGA Xplained & Sensor Xplained boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */

	board_init();
    1258:	22 d0       	rcall	.+68     	; 0x129e <board_init>

	/* Initialize the sensor bus I/O interface. */

	if (BUSIO_TYPE != BUS_TYPE_UNKNOWN) {
		initialized = sensor_bus_init(&BUSIO_IF, BUSIO_SPEED);
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5a e1       	ldi	r21, 0x1A	; 26
    125e:	66 e0       	ldi	r22, 0x06	; 6
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 eb       	ldi	r24, 0xB0	; 176
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	e6 dd       	rcall	.-1076   	; 0xe34 <bus_init>
    1268:	c8 2f       	mov	r28, r24
	/* Sensor devices typically require time to settle after power
	 * is applied.  Wait here for a standard time.  (Individual sensor
	 * drivers may need to wait an additional period during initialization
	 * if the device is particularly slow to settle.)
	 */
	delay_ms(SENSOR_START_DELAY_MSEC);
    126a:	6a ea       	ldi	r22, 0xAA	; 170
    126c:	71 e1       	ldi	r23, 0x11	; 17
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	d3 df       	rcall	.-90     	; 0x121a <__portable_avr_delay_cycles>

	return initialized;
}
    1274:	8c 2f       	mov	r24, r28
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    127a:	ab 01       	movw	r20, r22
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    127c:	98 2f       	mov	r25, r24
    127e:	96 95       	lsr	r25
    1280:	96 95       	lsr	r25
    1282:	96 95       	lsr	r25
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1284:	87 70       	andi	r24, 0x07	; 7
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	01 c0       	rjmp	.+2      	; 0x128e <ioport_configure_pin+0x14>
    128c:	66 0f       	add	r22, r22
    128e:	8a 95       	dec	r24
    1290:	ea f7       	brpl	.-6      	; 0x128c <ioport_configure_pin+0x12>
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1292:	20 e2       	ldi	r18, 0x20	; 32
    1294:	92 9f       	mul	r25, r18
    1296:	c0 01       	movw	r24, r0
    1298:	11 24       	eor	r1, r1
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    129a:	9a 5f       	subi	r25, 0xFA	; 250
    129c:	19 c9       	rjmp	.-3534   	; 0x4d0 <ioport_configure_port_pin>

0000129e <board_init>:
#include <board.h>
#include <ioport.h>

void board_init(void)
{
	ioport_configure_pin(LED0_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    129e:	63 e0       	ldi	r22, 0x03	; 3
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	ea df       	rcall	.-44     	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(LED1_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    12a6:	63 e0       	ldi	r22, 0x03	; 3
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	81 e2       	ldi	r24, 0x21	; 33
    12ac:	e6 df       	rcall	.-52     	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(LED2_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    12ae:	63 e0       	ldi	r22, 0x03	; 3
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	82 e2       	ldi	r24, 0x22	; 34
    12b4:	e2 df       	rcall	.-60     	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(LED3_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    12b6:	63 e0       	ldi	r22, 0x03	; 3
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	83 e2       	ldi	r24, 0x23	; 35
    12bc:	de df       	rcall	.-68     	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(LED4_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    12be:	63 e0       	ldi	r22, 0x03	; 3
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	84 e2       	ldi	r24, 0x24	; 36
    12c4:	da df       	rcall	.-76     	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(LED5_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    12c6:	63 e0       	ldi	r22, 0x03	; 3
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	85 e2       	ldi	r24, 0x25	; 37
    12cc:	d6 df       	rcall	.-84     	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(LED6_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    12ce:	63 e0       	ldi	r22, 0x03	; 3
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	86 e2       	ldi	r24, 0x26	; 38
    12d4:	d2 df       	rcall	.-92     	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(LED7_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    12d6:	63 e0       	ldi	r22, 0x03	; 3
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	87 e2       	ldi	r24, 0x27	; 39
    12dc:	ce df       	rcall	.-100    	; 0x127a <ioport_configure_pin>

	ioport_configure_pin(GPIO_PUSH_BUTTON_0, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	78 e1       	ldi	r23, 0x18	; 24
    12e2:	88 e1       	ldi	r24, 0x18	; 24
    12e4:	ca df       	rcall	.-108    	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_1, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	78 e1       	ldi	r23, 0x18	; 24
    12ea:	89 e1       	ldi	r24, 0x19	; 25
    12ec:	c6 df       	rcall	.-116    	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_2, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	78 e1       	ldi	r23, 0x18	; 24
    12f2:	8a e1       	ldi	r24, 0x1A	; 26
    12f4:	c2 df       	rcall	.-124    	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_3, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	78 e1       	ldi	r23, 0x18	; 24
    12fa:	8b e1       	ldi	r24, 0x1B	; 27
    12fc:	be df       	rcall	.-132    	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_4, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	78 e1       	ldi	r23, 0x18	; 24
    1302:	8c e1       	ldi	r24, 0x1C	; 28
    1304:	ba df       	rcall	.-140    	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_5, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	78 e1       	ldi	r23, 0x18	; 24
    130a:	8d e1       	ldi	r24, 0x1D	; 29
    130c:	b6 df       	rcall	.-148    	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_6, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	78 e1       	ldi	r23, 0x18	; 24
    1312:	88 e7       	ldi	r24, 0x78	; 120
    1314:	b2 df       	rcall	.-156    	; 0x127a <ioport_configure_pin>
	ioport_configure_pin(GPIO_PUSH_BUTTON_7, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	78 e1       	ldi	r23, 0x18	; 24
    131a:	89 e7       	ldi	r24, 0x79	; 121
    131c:	ae df       	rcall	.-164    	; 0x127a <ioport_configure_pin>
			| (SPEAKER_ENABLE_LEVEL ?
				IOPORT_INIT_HIGH : IOPORT_INIT_LOW));
#endif

#ifdef CONF_BOARD_ENABLE_USARTC0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT
    131e:	63 e0       	ldi	r22, 0x03	; 3
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	83 e1       	ldi	r24, 0x13	; 19
    1324:	aa df       	rcall	.-172    	; 0x127a <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 2), IOPORT_DIR_INPUT);
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	82 e1       	ldi	r24, 0x12	; 18
    132c:	a6 df       	rcall	.-180    	; 0x127a <ioport_configure_pin>
#if defined (SENSORS_XPLAINED_BOARD)
	/* Configure the Xplained Sensor extension board, if any, after
	 * the platform Xplained board has configured basic clock settings,
	 * GPIO pin mapping, interrupt controller options, etc.
	 */
	sensor_board_init ();
    132e:	6b c8       	rjmp	.-3882   	; 0x406 <sensor_board_init>

00001330 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1330:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1332:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1334:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1336:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1338:	60 83       	st	Z, r22
	ret                             // Return to caller
    133a:	08 95       	ret

0000133c <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    133c:	64 e0       	ldi	r22, 0x04	; 4
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	bb d8       	rcall	.-3722   	; 0x4b8 <sysclk_enable_module>
	RTC.PER = 0xffff;
    1342:	e0 e0       	ldi	r30, 0x00	; 0
    1344:	f4 e0       	ldi	r31, 0x04	; 4
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	9f ef       	ldi	r25, 0xFF	; 255
    134a:	82 87       	std	Z+10, r24	; 0x0a
    134c:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    134e:	10 86       	std	Z+8, r1	; 0x08
    1350:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1352:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1354:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1356:	e4 ef       	ldi	r30, 0xF4	; 244
    1358:	f1 e2       	ldi	r31, 0x21	; 33
    135a:	80 81       	ld	r24, Z
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1360:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    1362:	e0 e0       	ldi	r30, 0x00	; 0
    1364:	f4 e0       	ldi	r31, 0x04	; 4
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    136a:	87 e0       	ldi	r24, 0x07	; 7
    136c:	80 83       	st	Z, r24
    136e:	08 95       	ret

00001370 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	08 b6       	in	r0, 0x38	; 56
    137c:	0f 92       	push	r0
    137e:	18 be       	out	0x38, r1	; 56
    1380:	09 b6       	in	r0, 0x39	; 57
    1382:	0f 92       	push	r0
    1384:	19 be       	out	0x39, r1	; 57
    1386:	0b b6       	in	r0, 0x3b	; 59
    1388:	0f 92       	push	r0
    138a:	1b be       	out	0x3b, r1	; 59
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    13b0:	60 91 f7 21 	lds	r22, 0x21F7
    13b4:	70 91 f8 21 	lds	r23, 0x21F8
    13b8:	00 91 f9 21 	lds	r16, 0x21F9
    13bc:	10 91 fa 21 	lds	r17, 0x21FA
    13c0:	60 17       	cp	r22, r16
    13c2:	71 07       	cpc	r23, r17
    13c4:	98 f1       	brcs	.+102    	; 0x142c <__vector_11+0xbc>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 02 04 	sts	0x0402, r24
		if (rtc_data.callback) {
    13cc:	e0 91 fd 21 	lds	r30, 0x21FD
    13d0:	f0 91 fe 21 	lds	r31, 0x21FE
    13d4:	30 97       	sbiw	r30, 0x00	; 0
    13d6:	51 f1       	breq	.+84     	; 0x142c <__vector_11+0xbc>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    13d8:	c0 90 08 04 	lds	r12, 0x0408
    13dc:	d0 90 09 04 	lds	r13, 0x0409
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    13e0:	cb 01       	movw	r24, r22
    13e2:	a0 e0       	ldi	r26, 0x00	; 0
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	77 27       	eor	r23, r23
    13e8:	66 27       	eor	r22, r22
					| RTC.CNT;
    13ea:	e1 2c       	mov	r14, r1
    13ec:	f1 2c       	mov	r15, r1
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    13ee:	6c 29       	or	r22, r12
    13f0:	7d 29       	or	r23, r13
    13f2:	8e 29       	or	r24, r14
    13f4:	9f 29       	or	r25, r15
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	98 01       	movw	r18, r16
    13fc:	11 27       	eor	r17, r17
    13fe:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
    1400:	c0 90 fb 21 	lds	r12, 0x21FB
    1404:	d0 90 fc 21 	lds	r13, 0x21FC
    1408:	e1 2c       	mov	r14, r1
    140a:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    140c:	0c 29       	or	r16, r12
    140e:	1d 29       	or	r17, r13
    1410:	2e 29       	or	r18, r14
    1412:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    1414:	06 17       	cp	r16, r22
    1416:	17 07       	cpc	r17, r23
    1418:	28 07       	cpc	r18, r24
    141a:	39 07       	cpc	r19, r25
    141c:	30 f0       	brcs	.+12     	; 0x142a <__vector_11+0xba>
				count = alarm + 1;
    141e:	c9 01       	movw	r24, r18
    1420:	b8 01       	movw	r22, r16
    1422:	6f 5f       	subi	r22, 0xFF	; 255
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	8f 4f       	sbci	r24, 0xFF	; 255
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    142a:	19 95       	eicall
		}
	}
}
    142c:	ff 91       	pop	r31
    142e:	ef 91       	pop	r30
    1430:	bf 91       	pop	r27
    1432:	af 91       	pop	r26
    1434:	9f 91       	pop	r25
    1436:	8f 91       	pop	r24
    1438:	7f 91       	pop	r23
    143a:	6f 91       	pop	r22
    143c:	5f 91       	pop	r21
    143e:	4f 91       	pop	r20
    1440:	3f 91       	pop	r19
    1442:	2f 91       	pop	r18
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	0f 90       	pop	r0
    1452:	0b be       	out	0x3b, r0	; 59
    1454:	0f 90       	pop	r0
    1456:	09 be       	out	0x39, r0	; 57
    1458:	0f 90       	pop	r0
    145a:	08 be       	out	0x38, r0	; 56
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    146a:	e0 91 65 21 	lds	r30, 0x2165
    146e:	f0 91 66 21 	lds	r31, 0x2166
    1472:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1474:	83 ff       	sbrs	r24, 3
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <twim_interrupt_handler+0x1e>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1478:	88 60       	ori	r24, 0x08	; 8
    147a:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1480:	86 ef       	ldi	r24, 0xF6	; 246
    1482:	7d c0       	rjmp	.+250    	; 0x157e <twim_interrupt_handler+0x118>
    1484:	98 2f       	mov	r25, r24
    1486:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1488:	21 f0       	breq	.+8      	; 0x1492 <twim_interrupt_handler+0x2c>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	76 c0       	rjmp	.+236    	; 0x157e <twim_interrupt_handler+0x118>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1492:	86 ff       	sbrs	r24, 6
    1494:	40 c0       	rjmp	.+128    	; 0x1516 <twim_interrupt_handler+0xb0>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1496:	a0 91 67 21 	lds	r26, 0x2167
    149a:	b0 91 68 21 	lds	r27, 0x2168

	if (transfer.addr_count < pkg->addr_length) {
    149e:	80 91 69 21 	lds	r24, 0x2169
    14a2:	90 91 6a 21 	lds	r25, 0x216A
    14a6:	14 96       	adiw	r26, 0x04	; 4
    14a8:	2d 91       	ld	r18, X+
    14aa:	3c 91       	ld	r19, X
    14ac:	15 97       	sbiw	r26, 0x05	; 5
    14ae:	82 17       	cp	r24, r18
    14b0:	93 07       	cpc	r25, r19
    14b2:	64 f4       	brge	.+24     	; 0x14cc <twim_interrupt_handler+0x66>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    14b4:	9c 01       	movw	r18, r24
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	20 93 69 21 	sts	0x2169, r18
    14be:	30 93 6a 21 	sts	0x216A, r19
    14c2:	a8 0f       	add	r26, r24
    14c4:	b9 1f       	adc	r27, r25
    14c6:	11 96       	adiw	r26, 0x01	; 1
    14c8:	8c 91       	ld	r24, X
    14ca:	21 c0       	rjmp	.+66     	; 0x150e <twim_interrupt_handler+0xa8>

	} else if (transfer.data_count < pkg->length) {
    14cc:	80 91 6b 21 	lds	r24, 0x216B
    14d0:	90 91 6c 21 	lds	r25, 0x216C
    14d4:	18 96       	adiw	r26, 0x08	; 8
    14d6:	2d 91       	ld	r18, X+
    14d8:	3c 91       	ld	r19, X
    14da:	19 97       	sbiw	r26, 0x09	; 9
    14dc:	82 17       	cp	r24, r18
    14de:	93 07       	cpc	r25, r19
    14e0:	c0 f4       	brcc	.+48     	; 0x1512 <twim_interrupt_handler+0xac>

		if (transfer.read) {
    14e2:	20 91 6d 21 	lds	r18, 0x216D
    14e6:	22 23       	and	r18, r18
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <twim_interrupt_handler+0x8c>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    14ea:	86 81       	ldd	r24, Z+6	; 0x06
    14ec:	81 60       	ori	r24, 0x01	; 1
    14ee:	86 83       	std	Z+6, r24	; 0x06
    14f0:	48 c0       	rjmp	.+144    	; 0x1582 <twim_interrupt_handler+0x11c>

		} else {
			const uint8_t * const data = pkg->buffer;
    14f2:	16 96       	adiw	r26, 0x06	; 6
    14f4:	0d 90       	ld	r0, X+
    14f6:	bc 91       	ld	r27, X
    14f8:	a0 2d       	mov	r26, r0
			bus->MASTER.DATA = data[transfer.data_count++];
    14fa:	9c 01       	movw	r18, r24
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	20 93 6b 21 	sts	0x216B, r18
    1504:	30 93 6c 21 	sts	0x216C, r19
    1508:	a8 0f       	add	r26, r24
    150a:	b9 1f       	adc	r27, r25
    150c:	8c 91       	ld	r24, X
    150e:	87 83       	std	Z+7, r24	; 0x07
    1510:	38 c0       	rjmp	.+112    	; 0x1582 <twim_interrupt_handler+0x11c>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	2b c0       	rjmp	.+86     	; 0x156c <twim_interrupt_handler+0x106>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1516:	87 ff       	sbrs	r24, 7
    1518:	31 c0       	rjmp	.+98     	; 0x157c <twim_interrupt_handler+0x116>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    151a:	a0 91 67 21 	lds	r26, 0x2167
    151e:	b0 91 68 21 	lds	r27, 0x2168

	if (transfer.data_count < pkg->length) {
    1522:	80 91 6b 21 	lds	r24, 0x216B
    1526:	90 91 6c 21 	lds	r25, 0x216C
    152a:	18 96       	adiw	r26, 0x08	; 8
    152c:	2d 91       	ld	r18, X+
    152e:	3c 91       	ld	r19, X
    1530:	19 97       	sbiw	r26, 0x09	; 9
    1532:	82 17       	cp	r24, r18
    1534:	93 07       	cpc	r25, r19
    1536:	f0 f4       	brcc	.+60     	; 0x1574 <twim_interrupt_handler+0x10e>

		uint8_t * const data = pkg->buffer;
    1538:	16 96       	adiw	r26, 0x06	; 6
    153a:	cd 91       	ld	r28, X+
    153c:	dc 91       	ld	r29, X
    153e:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    1540:	9c 01       	movw	r18, r24
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	20 93 6b 21 	sts	0x216B, r18
    154a:	30 93 6c 21 	sts	0x216C, r19
    154e:	47 81       	ldd	r20, Z+7	; 0x07
    1550:	c8 0f       	add	r28, r24
    1552:	d9 1f       	adc	r29, r25
    1554:	48 83       	st	Y, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1556:	18 96       	adiw	r26, 0x08	; 8
    1558:	8d 91       	ld	r24, X+
    155a:	9c 91       	ld	r25, X
    155c:	19 97       	sbiw	r26, 0x09	; 9
    155e:	28 17       	cp	r18, r24
    1560:	39 07       	cpc	r19, r25
    1562:	18 f4       	brcc	.+6      	; 0x156a <twim_interrupt_handler+0x104>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	83 83       	std	Z+3, r24	; 0x03
    1568:	0c c0       	rjmp	.+24     	; 0x1582 <twim_interrupt_handler+0x11c>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    156a:	87 e0       	ldi	r24, 0x07	; 7
    156c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    156e:	10 92 6f 21 	sts	0x216F, r1
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <twim_interrupt_handler+0x11c>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1578:	89 ef       	ldi	r24, 0xF9	; 249
    157a:	01 c0       	rjmp	.+2      	; 0x157e <twim_interrupt_handler+0x118>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    157c:	8b ef       	ldi	r24, 0xFB	; 251
    157e:	80 93 6f 21 	sts	0x216F, r24
	}
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret

00001588 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	08 b6       	in	r0, 0x38	; 56
    1594:	0f 92       	push	r0
    1596:	18 be       	out	0x38, r1	; 56
    1598:	09 b6       	in	r0, 0x39	; 57
    159a:	0f 92       	push	r0
    159c:	19 be       	out	0x39, r1	; 57
    159e:	0b b6       	in	r0, 0x3b	; 59
    15a0:	0f 92       	push	r0
    15a2:	1b be       	out	0x3b, r1	; 59
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	54 df       	rcall	.-344    	; 0x1466 <twim_interrupt_handler>
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	bf 91       	pop	r27
    15c4:	af 91       	pop	r26
    15c6:	9f 91       	pop	r25
    15c8:	8f 91       	pop	r24
    15ca:	7f 91       	pop	r23
    15cc:	6f 91       	pop	r22
    15ce:	5f 91       	pop	r21
    15d0:	4f 91       	pop	r20
    15d2:	3f 91       	pop	r19
    15d4:	2f 91       	pop	r18
    15d6:	0f 90       	pop	r0
    15d8:	0b be       	out	0x3b, r0	; 59
    15da:	0f 90       	pop	r0
    15dc:	09 be       	out	0x39, r0	; 57
    15de:	0f 90       	pop	r0
    15e0:	08 be       	out	0x38, r0	; 56
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	08 b6       	in	r0, 0x38	; 56
    15f8:	0f 92       	push	r0
    15fa:	18 be       	out	0x38, r1	; 56
    15fc:	09 b6       	in	r0, 0x39	; 57
    15fe:	0f 92       	push	r0
    1600:	19 be       	out	0x39, r1	; 57
    1602:	0b b6       	in	r0, 0x3b	; 59
    1604:	0f 92       	push	r0
    1606:	1b be       	out	0x3b, r1	; 59
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	4f 93       	push	r20
    160e:	5f 93       	push	r21
    1610:	6f 93       	push	r22
    1612:	7f 93       	push	r23
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	af 93       	push	r26
    161a:	bf 93       	push	r27
    161c:	ef 93       	push	r30
    161e:	ff 93       	push	r31
    1620:	22 df       	rcall	.-444    	; 0x1466 <twim_interrupt_handler>
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0b be       	out	0x3b, r0	; 59
    163e:	0f 90       	pop	r0
    1640:	09 be       	out	0x39, r0	; 57
    1642:	0f 90       	pop	r0
    1644:	08 be       	out	0x38, r0	; 56
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	0f 90       	pop	r0
    164c:	1f 90       	pop	r1
    164e:	18 95       	reti

00001650 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	08 b6       	in	r0, 0x38	; 56
    165c:	0f 92       	push	r0
    165e:	18 be       	out	0x38, r1	; 56
    1660:	09 b6       	in	r0, 0x39	; 57
    1662:	0f 92       	push	r0
    1664:	19 be       	out	0x39, r1	; 57
    1666:	0b b6       	in	r0, 0x3b	; 59
    1668:	0f 92       	push	r0
    166a:	1b be       	out	0x3b, r1	; 59
    166c:	2f 93       	push	r18
    166e:	3f 93       	push	r19
    1670:	4f 93       	push	r20
    1672:	5f 93       	push	r21
    1674:	6f 93       	push	r22
    1676:	7f 93       	push	r23
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	af 93       	push	r26
    167e:	bf 93       	push	r27
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
    1684:	f0 de       	rcall	.-544    	; 0x1466 <twim_interrupt_handler>
    1686:	ff 91       	pop	r31
    1688:	ef 91       	pop	r30
    168a:	bf 91       	pop	r27
    168c:	af 91       	pop	r26
    168e:	9f 91       	pop	r25
    1690:	8f 91       	pop	r24
    1692:	7f 91       	pop	r23
    1694:	6f 91       	pop	r22
    1696:	5f 91       	pop	r21
    1698:	4f 91       	pop	r20
    169a:	3f 91       	pop	r19
    169c:	2f 91       	pop	r18
    169e:	0f 90       	pop	r0
    16a0:	0b be       	out	0x3b, r0	; 59
    16a2:	0f 90       	pop	r0
    16a4:	09 be       	out	0x39, r0	; 57
    16a6:	0f 90       	pop	r0
    16a8:	08 be       	out	0x38, r0	; 56
    16aa:	0f 90       	pop	r0
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	0f 90       	pop	r0
    16b0:	1f 90       	pop	r1
    16b2:	18 95       	reti

000016b4 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    16b4:	1f 92       	push	r1
    16b6:	0f 92       	push	r0
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	0f 92       	push	r0
    16bc:	11 24       	eor	r1, r1
    16be:	08 b6       	in	r0, 0x38	; 56
    16c0:	0f 92       	push	r0
    16c2:	18 be       	out	0x38, r1	; 56
    16c4:	09 b6       	in	r0, 0x39	; 57
    16c6:	0f 92       	push	r0
    16c8:	19 be       	out	0x39, r1	; 57
    16ca:	0b b6       	in	r0, 0x3b	; 59
    16cc:	0f 92       	push	r0
    16ce:	1b be       	out	0x3b, r1	; 59
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	6f 93       	push	r22
    16da:	7f 93       	push	r23
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	af 93       	push	r26
    16e2:	bf 93       	push	r27
    16e4:	ef 93       	push	r30
    16e6:	ff 93       	push	r31
    16e8:	be de       	rcall	.-644    	; 0x1466 <twim_interrupt_handler>
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0b be       	out	0x3b, r0	; 59
    1706:	0f 90       	pop	r0
    1708:	09 be       	out	0x39, r0	; 57
    170a:	0f 90       	pop	r0
    170c:	08 be       	out	0x38, r0	; 56
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1718:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    171a:	db 01       	movw	r26, r22
    171c:	14 96       	adiw	r26, 0x04	; 4
    171e:	8c 91       	ld	r24, X
    1720:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    1722:	88 eb       	ldi	r24, 0xB8	; 184
    1724:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    172a:	10 92 6e 21 	sts	0x216E, r1
	transfer.status    = STATUS_OK;
    172e:	10 92 6f 21 	sts	0x216F, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    1732:	e0 ea       	ldi	r30, 0xA0	; 160
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	82 60       	ori	r24, 0x02	; 2
    173a:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    173c:	78 94       	sei

	return STATUS_OK;
}
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	08 95       	ret

00001742 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    1742:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	09 f4       	brne	.+2      	; 0x174a <twi_master_transfer+0x8>
    1748:	43 c0       	rjmp	.+134    	; 0x17d0 <twi_master_transfer+0x8e>
    174a:	30 97       	sbiw	r30, 0x00	; 0
    174c:	09 f4       	brne	.+2      	; 0x1750 <twi_master_transfer+0xe>
    174e:	40 c0       	rjmp	.+128    	; 0x17d0 <twi_master_transfer+0x8e>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    1750:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1752:	20 91 6e 21 	lds	r18, 0x216E
    1756:	22 23       	and	r18, r18
    1758:	21 f0       	breq	.+8      	; 0x1762 <twi_master_transfer+0x20>

		if (no_wait) { return ERR_BUSY; }
    175a:	33 23       	and	r19, r19
    175c:	e1 f3       	breq	.-8      	; 0x1756 <twi_master_transfer+0x14>
    175e:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1760:	08 95       	ret

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1762:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1764:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1766:	31 e0       	ldi	r19, 0x01	; 1
    1768:	30 93 6e 21 	sts	0x216E, r19
	transfer.status = OPERATION_IN_PROGRESS;
    176c:	30 e8       	ldi	r19, 0x80	; 128
    176e:	30 93 6f 21 	sts	0x216F, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1772:	2f bf       	out	0x3f, r18	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1774:	80 93 65 21 	sts	0x2165, r24
    1778:	90 93 66 21 	sts	0x2166, r25
		transfer.pkg         = (twi_package_t *) package;
    177c:	e0 93 67 21 	sts	0x2167, r30
    1780:	f0 93 68 21 	sts	0x2168, r31
		transfer.addr_count  = 0;
    1784:	10 92 69 21 	sts	0x2169, r1
    1788:	10 92 6a 21 	sts	0x216A, r1
		transfer.data_count  = 0;
    178c:	10 92 6b 21 	sts	0x216B, r1
    1790:	10 92 6c 21 	sts	0x216C, r1
		transfer.read        = read;
    1794:	40 93 6d 21 	sts	0x216D, r20

		uint8_t const chip = (package->chip) << 1;
    1798:	50 81       	ld	r21, Z
    179a:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    179c:	24 81       	ldd	r18, Z+4	; 0x04
    179e:	35 81       	ldd	r19, Z+5	; 0x05
    17a0:	23 2b       	or	r18, r19
    17a2:	11 f4       	brne	.+4      	; 0x17a8 <twi_master_transfer+0x66>
    17a4:	41 11       	cpse	r20, r1
			transfer.bus->MASTER.ADDR = chip;
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    17a6:	51 60       	ori	r21, 0x01	; 1
    17a8:	fc 01       	movw	r30, r24
    17aa:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    17ac:	80 91 6f 21 	lds	r24, 0x216F
    17b0:	80 38       	cpi	r24, 0x80	; 128
    17b2:	e1 f3       	breq	.-8      	; 0x17ac <twi_master_transfer+0x6a>

	while (! twim_idle(transfer.bus)) { barrier(); }
    17b4:	e0 91 65 21 	lds	r30, 0x2165
    17b8:	f0 91 66 21 	lds	r31, 0x2166
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    17bc:	84 81       	ldd	r24, Z+4	; 0x04
    17be:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <twi_master_transfer+0x84>
    17c4:	f7 cf       	rjmp	.-18     	; 0x17b4 <twi_master_transfer+0x72>

	status_code_t const status = transfer.status;
    17c6:	80 91 6f 21 	lds	r24, 0x216F

	transfer.locked = false;
    17ca:	10 92 6e 21 	sts	0x216E, r1
    17ce:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    17d0:	88 ef       	ldi	r24, 0xF8	; 248
    17d2:	08 95       	ret

000017d4 <sysclk_enable_peripheral_clock>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	09 f4       	brne	.+2      	; 0x17da <sysclk_enable_peripheral_clock+0x6>
    17d8:	f0 c0       	rjmp	.+480    	; 0x19ba <sysclk_enable_peripheral_clock+0x1e6>
    17da:	80 3c       	cpi	r24, 0xC0	; 192
    17dc:	91 05       	cpc	r25, r1
    17de:	11 f4       	brne	.+4      	; 0x17e4 <sysclk_enable_peripheral_clock+0x10>
    17e0:	60 e1       	ldi	r22, 0x10	; 16
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <sysclk_enable_peripheral_clock+0x1a>
    17e4:	80 34       	cpi	r24, 0x40	; 64
    17e6:	24 e0       	ldi	r18, 0x04	; 4
    17e8:	92 07       	cpc	r25, r18
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <sysclk_enable_peripheral_clock+0x1e>
    17ec:	68 e0       	ldi	r22, 0x08	; 8
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	e2 c0       	rjmp	.+452    	; 0x19b6 <sysclk_enable_peripheral_clock+0x1e2>
    17f2:	81 15       	cp	r24, r1
    17f4:	24 e0       	ldi	r18, 0x04	; 4
    17f6:	92 07       	cpc	r25, r18
    17f8:	11 f4       	brne	.+4      	; 0x17fe <sysclk_enable_peripheral_clock+0x2a>
    17fa:	64 e0       	ldi	r22, 0x04	; 4
    17fc:	f8 cf       	rjmp	.-16     	; 0x17ee <sysclk_enable_peripheral_clock+0x1a>
    17fe:	80 38       	cpi	r24, 0x80	; 128
    1800:	21 e0       	ldi	r18, 0x01	; 1
    1802:	92 07       	cpc	r25, r18
    1804:	11 f4       	brne	.+4      	; 0x180a <sysclk_enable_peripheral_clock+0x36>
    1806:	62 e0       	ldi	r22, 0x02	; 2
    1808:	f2 cf       	rjmp	.-28     	; 0x17ee <sysclk_enable_peripheral_clock+0x1a>
    180a:	81 15       	cp	r24, r1
    180c:	21 e0       	ldi	r18, 0x01	; 1
    180e:	92 07       	cpc	r25, r18
    1810:	11 f4       	brne	.+4      	; 0x1816 <sysclk_enable_peripheral_clock+0x42>
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	ec cf       	rjmp	.-40     	; 0x17ee <sysclk_enable_peripheral_clock+0x1a>
    1816:	80 38       	cpi	r24, 0x80	; 128
    1818:	23 e0       	ldi	r18, 0x03	; 3
    181a:	92 07       	cpc	r25, r18
    181c:	11 f4       	brne	.+4      	; 0x1822 <sysclk_enable_peripheral_clock+0x4e>
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	17 c0       	rjmp	.+46     	; 0x1850 <sysclk_enable_peripheral_clock+0x7c>
    1822:	80 39       	cpi	r24, 0x90	; 144
    1824:	23 e0       	ldi	r18, 0x03	; 3
    1826:	92 07       	cpc	r25, r18
    1828:	11 f4       	brne	.+4      	; 0x182e <sysclk_enable_peripheral_clock+0x5a>
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	18 c0       	rjmp	.+48     	; 0x185e <sysclk_enable_peripheral_clock+0x8a>
    182e:	81 15       	cp	r24, r1
    1830:	22 e0       	ldi	r18, 0x02	; 2
    1832:	92 07       	cpc	r25, r18
    1834:	11 f4       	brne	.+4      	; 0x183a <sysclk_enable_peripheral_clock+0x66>
    1836:	62 e0       	ldi	r22, 0x02	; 2
    1838:	0b c0       	rjmp	.+22     	; 0x1850 <sysclk_enable_peripheral_clock+0x7c>
    183a:	80 34       	cpi	r24, 0x40	; 64
    183c:	22 e0       	ldi	r18, 0x02	; 2
    183e:	92 07       	cpc	r25, r18
    1840:	11 f4       	brne	.+4      	; 0x1846 <sysclk_enable_peripheral_clock+0x72>
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	0c c0       	rjmp	.+24     	; 0x185e <sysclk_enable_peripheral_clock+0x8a>
    1846:	81 15       	cp	r24, r1
    1848:	23 e0       	ldi	r18, 0x03	; 3
    184a:	92 07       	cpc	r25, r18
    184c:	19 f4       	brne	.+6      	; 0x1854 <sysclk_enable_peripheral_clock+0x80>
    184e:	64 e0       	ldi	r22, 0x04	; 4
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	b1 c0       	rjmp	.+354    	; 0x19b6 <sysclk_enable_peripheral_clock+0x1e2>
    1854:	80 32       	cpi	r24, 0x20	; 32
    1856:	23 e0       	ldi	r18, 0x03	; 3
    1858:	92 07       	cpc	r25, r18
    185a:	19 f4       	brne	.+6      	; 0x1862 <sysclk_enable_peripheral_clock+0x8e>
    185c:	64 e0       	ldi	r22, 0x04	; 4
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	aa c0       	rjmp	.+340    	; 0x19b6 <sysclk_enable_peripheral_clock+0x1e2>
    1862:	81 15       	cp	r24, r1
    1864:	28 e0       	ldi	r18, 0x08	; 8
    1866:	92 07       	cpc	r25, r18
    1868:	11 f4       	brne	.+4      	; 0x186e <sysclk_enable_peripheral_clock+0x9a>
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	8f c0       	rjmp	.+286    	; 0x198c <sysclk_enable_peripheral_clock+0x1b8>
    186e:	81 15       	cp	r24, r1
    1870:	29 e0       	ldi	r18, 0x09	; 9
    1872:	92 07       	cpc	r25, r18
    1874:	11 f4       	brne	.+4      	; 0x187a <sysclk_enable_peripheral_clock+0xa6>
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	90 c0       	rjmp	.+288    	; 0x199a <sysclk_enable_peripheral_clock+0x1c6>
    187a:	81 15       	cp	r24, r1
    187c:	2a e0       	ldi	r18, 0x0A	; 10
    187e:	92 07       	cpc	r25, r18
    1880:	11 f4       	brne	.+4      	; 0x1886 <sysclk_enable_peripheral_clock+0xb2>
    1882:	61 e0       	ldi	r22, 0x01	; 1
    1884:	91 c0       	rjmp	.+290    	; 0x19a8 <sysclk_enable_peripheral_clock+0x1d4>
    1886:	81 15       	cp	r24, r1
    1888:	2b e0       	ldi	r18, 0x0B	; 11
    188a:	92 07       	cpc	r25, r18
    188c:	11 f4       	brne	.+4      	; 0x1892 <sysclk_enable_peripheral_clock+0xbe>
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	91 c0       	rjmp	.+290    	; 0x19b4 <sysclk_enable_peripheral_clock+0x1e0>
    1892:	80 34       	cpi	r24, 0x40	; 64
    1894:	28 e0       	ldi	r18, 0x08	; 8
    1896:	92 07       	cpc	r25, r18
    1898:	11 f4       	brne	.+4      	; 0x189e <sysclk_enable_peripheral_clock+0xca>
    189a:	62 e0       	ldi	r22, 0x02	; 2
    189c:	77 c0       	rjmp	.+238    	; 0x198c <sysclk_enable_peripheral_clock+0x1b8>
    189e:	80 34       	cpi	r24, 0x40	; 64
    18a0:	29 e0       	ldi	r18, 0x09	; 9
    18a2:	92 07       	cpc	r25, r18
    18a4:	11 f4       	brne	.+4      	; 0x18aa <sysclk_enable_peripheral_clock+0xd6>
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	78 c0       	rjmp	.+240    	; 0x199a <sysclk_enable_peripheral_clock+0x1c6>
    18aa:	80 34       	cpi	r24, 0x40	; 64
    18ac:	2a e0       	ldi	r18, 0x0A	; 10
    18ae:	92 07       	cpc	r25, r18
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <sysclk_enable_peripheral_clock+0xe2>
    18b2:	62 e0       	ldi	r22, 0x02	; 2
    18b4:	79 c0       	rjmp	.+242    	; 0x19a8 <sysclk_enable_peripheral_clock+0x1d4>
    18b6:	80 34       	cpi	r24, 0x40	; 64
    18b8:	2b e0       	ldi	r18, 0x0B	; 11
    18ba:	92 07       	cpc	r25, r18
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <sysclk_enable_peripheral_clock+0xee>
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	79 c0       	rjmp	.+242    	; 0x19b4 <sysclk_enable_peripheral_clock+0x1e0>
    18c2:	80 39       	cpi	r24, 0x90	; 144
    18c4:	28 e0       	ldi	r18, 0x08	; 8
    18c6:	92 07       	cpc	r25, r18
    18c8:	11 f4       	brne	.+4      	; 0x18ce <sysclk_enable_peripheral_clock+0xfa>
    18ca:	64 e0       	ldi	r22, 0x04	; 4
    18cc:	5f c0       	rjmp	.+190    	; 0x198c <sysclk_enable_peripheral_clock+0x1b8>
    18ce:	80 39       	cpi	r24, 0x90	; 144
    18d0:	29 e0       	ldi	r18, 0x09	; 9
    18d2:	92 07       	cpc	r25, r18
    18d4:	11 f4       	brne	.+4      	; 0x18da <sysclk_enable_peripheral_clock+0x106>
    18d6:	64 e0       	ldi	r22, 0x04	; 4
    18d8:	60 c0       	rjmp	.+192    	; 0x199a <sysclk_enable_peripheral_clock+0x1c6>
    18da:	80 39       	cpi	r24, 0x90	; 144
    18dc:	2a e0       	ldi	r18, 0x0A	; 10
    18de:	92 07       	cpc	r25, r18
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <sysclk_enable_peripheral_clock+0x112>
    18e2:	64 e0       	ldi	r22, 0x04	; 4
    18e4:	61 c0       	rjmp	.+194    	; 0x19a8 <sysclk_enable_peripheral_clock+0x1d4>
    18e6:	80 39       	cpi	r24, 0x90	; 144
    18e8:	2b e0       	ldi	r18, 0x0B	; 11
    18ea:	92 07       	cpc	r25, r18
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <sysclk_enable_peripheral_clock+0x11e>
    18ee:	64 e0       	ldi	r22, 0x04	; 4
    18f0:	61 c0       	rjmp	.+194    	; 0x19b4 <sysclk_enable_peripheral_clock+0x1e0>
    18f2:	80 3c       	cpi	r24, 0xC0	; 192
    18f4:	28 e0       	ldi	r18, 0x08	; 8
    18f6:	92 07       	cpc	r25, r18
    18f8:	11 f4       	brne	.+4      	; 0x18fe <sysclk_enable_peripheral_clock+0x12a>
    18fa:	68 e0       	ldi	r22, 0x08	; 8
    18fc:	47 c0       	rjmp	.+142    	; 0x198c <sysclk_enable_peripheral_clock+0x1b8>
    18fe:	80 3c       	cpi	r24, 0xC0	; 192
    1900:	29 e0       	ldi	r18, 0x09	; 9
    1902:	92 07       	cpc	r25, r18
    1904:	11 f4       	brne	.+4      	; 0x190a <sysclk_enable_peripheral_clock+0x136>
    1906:	68 e0       	ldi	r22, 0x08	; 8
    1908:	48 c0       	rjmp	.+144    	; 0x199a <sysclk_enable_peripheral_clock+0x1c6>
    190a:	80 3c       	cpi	r24, 0xC0	; 192
    190c:	2a e0       	ldi	r18, 0x0A	; 10
    190e:	92 07       	cpc	r25, r18
    1910:	11 f4       	brne	.+4      	; 0x1916 <sysclk_enable_peripheral_clock+0x142>
    1912:	68 e0       	ldi	r22, 0x08	; 8
    1914:	49 c0       	rjmp	.+146    	; 0x19a8 <sysclk_enable_peripheral_clock+0x1d4>
    1916:	80 3c       	cpi	r24, 0xC0	; 192
    1918:	2b e0       	ldi	r18, 0x0B	; 11
    191a:	92 07       	cpc	r25, r18
    191c:	11 f4       	brne	.+4      	; 0x1922 <sysclk_enable_peripheral_clock+0x14e>
    191e:	68 e0       	ldi	r22, 0x08	; 8
    1920:	49 c0       	rjmp	.+146    	; 0x19b4 <sysclk_enable_peripheral_clock+0x1e0>
    1922:	80 3a       	cpi	r24, 0xA0	; 160
    1924:	28 e0       	ldi	r18, 0x08	; 8
    1926:	92 07       	cpc	r25, r18
    1928:	11 f4       	brne	.+4      	; 0x192e <sysclk_enable_peripheral_clock+0x15a>
    192a:	60 e1       	ldi	r22, 0x10	; 16
    192c:	2f c0       	rjmp	.+94     	; 0x198c <sysclk_enable_peripheral_clock+0x1b8>
    192e:	80 3a       	cpi	r24, 0xA0	; 160
    1930:	29 e0       	ldi	r18, 0x09	; 9
    1932:	92 07       	cpc	r25, r18
    1934:	11 f4       	brne	.+4      	; 0x193a <sysclk_enable_peripheral_clock+0x166>
    1936:	60 e1       	ldi	r22, 0x10	; 16
    1938:	30 c0       	rjmp	.+96     	; 0x199a <sysclk_enable_peripheral_clock+0x1c6>
    193a:	80 3a       	cpi	r24, 0xA0	; 160
    193c:	2a e0       	ldi	r18, 0x0A	; 10
    193e:	92 07       	cpc	r25, r18
    1940:	11 f4       	brne	.+4      	; 0x1946 <sysclk_enable_peripheral_clock+0x172>
    1942:	60 e1       	ldi	r22, 0x10	; 16
    1944:	31 c0       	rjmp	.+98     	; 0x19a8 <sysclk_enable_peripheral_clock+0x1d4>
    1946:	80 3a       	cpi	r24, 0xA0	; 160
    1948:	2b e0       	ldi	r18, 0x0B	; 11
    194a:	92 07       	cpc	r25, r18
    194c:	11 f4       	brne	.+4      	; 0x1952 <sysclk_enable_peripheral_clock+0x17e>
    194e:	60 e1       	ldi	r22, 0x10	; 16
    1950:	31 c0       	rjmp	.+98     	; 0x19b4 <sysclk_enable_peripheral_clock+0x1e0>
    1952:	80 3b       	cpi	r24, 0xB0	; 176
    1954:	28 e0       	ldi	r18, 0x08	; 8
    1956:	92 07       	cpc	r25, r18
    1958:	11 f4       	brne	.+4      	; 0x195e <sysclk_enable_peripheral_clock+0x18a>
    195a:	60 e2       	ldi	r22, 0x20	; 32
    195c:	17 c0       	rjmp	.+46     	; 0x198c <sysclk_enable_peripheral_clock+0x1b8>
    195e:	80 3b       	cpi	r24, 0xB0	; 176
    1960:	29 e0       	ldi	r18, 0x09	; 9
    1962:	92 07       	cpc	r25, r18
    1964:	11 f4       	brne	.+4      	; 0x196a <sysclk_enable_peripheral_clock+0x196>
    1966:	60 e2       	ldi	r22, 0x20	; 32
    1968:	18 c0       	rjmp	.+48     	; 0x199a <sysclk_enable_peripheral_clock+0x1c6>
    196a:	80 3b       	cpi	r24, 0xB0	; 176
    196c:	2a e0       	ldi	r18, 0x0A	; 10
    196e:	92 07       	cpc	r25, r18
    1970:	11 f4       	brne	.+4      	; 0x1976 <sysclk_enable_peripheral_clock+0x1a2>
    1972:	60 e2       	ldi	r22, 0x20	; 32
    1974:	19 c0       	rjmp	.+50     	; 0x19a8 <sysclk_enable_peripheral_clock+0x1d4>
    1976:	80 3b       	cpi	r24, 0xB0	; 176
    1978:	2b e0       	ldi	r18, 0x0B	; 11
    197a:	92 07       	cpc	r25, r18
    197c:	11 f4       	brne	.+4      	; 0x1982 <sysclk_enable_peripheral_clock+0x1ae>
    197e:	60 e2       	ldi	r22, 0x20	; 32
    1980:	19 c0       	rjmp	.+50     	; 0x19b4 <sysclk_enable_peripheral_clock+0x1e0>
    1982:	80 38       	cpi	r24, 0x80	; 128
    1984:	24 e0       	ldi	r18, 0x04	; 4
    1986:	92 07       	cpc	r25, r18
    1988:	19 f4       	brne	.+6      	; 0x1990 <sysclk_enable_peripheral_clock+0x1bc>
    198a:	60 e4       	ldi	r22, 0x40	; 64
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <sysclk_enable_peripheral_clock+0x1e2>
    1990:	80 39       	cpi	r24, 0x90	; 144
    1992:	24 e0       	ldi	r18, 0x04	; 4
    1994:	92 07       	cpc	r25, r18
    1996:	19 f4       	brne	.+6      	; 0x199e <sysclk_enable_peripheral_clock+0x1ca>
    1998:	60 e4       	ldi	r22, 0x40	; 64
    199a:	84 e0       	ldi	r24, 0x04	; 4
    199c:	0c c0       	rjmp	.+24     	; 0x19b6 <sysclk_enable_peripheral_clock+0x1e2>
    199e:	80 3a       	cpi	r24, 0xA0	; 160
    19a0:	24 e0       	ldi	r18, 0x04	; 4
    19a2:	92 07       	cpc	r25, r18
    19a4:	19 f4       	brne	.+6      	; 0x19ac <sysclk_enable_peripheral_clock+0x1d8>
    19a6:	60 e4       	ldi	r22, 0x40	; 64
    19a8:	85 e0       	ldi	r24, 0x05	; 5
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <sysclk_enable_peripheral_clock+0x1e2>
    19ac:	80 3b       	cpi	r24, 0xB0	; 176
    19ae:	94 40       	sbci	r25, 0x04	; 4
    19b0:	21 f4       	brne	.+8      	; 0x19ba <sysclk_enable_peripheral_clock+0x1e6>
    19b2:	60 e4       	ldi	r22, 0x40	; 64
    19b4:	86 e0       	ldi	r24, 0x06	; 6
    19b6:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <sysclk_enable_module>
    19ba:	08 95       	ret

000019bc <usart_putchar>:
    19bc:	fc 01       	movw	r30, r24
    19be:	21 81       	ldd	r18, Z+1	; 0x01
    19c0:	25 ff       	sbrs	r18, 5
    19c2:	fc cf       	rjmp	.-8      	; 0x19bc <usart_putchar>
    19c4:	60 83       	st	Z, r22
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	08 95       	ret

000019cc <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    19cc:	8f 92       	push	r8
    19ce:	9f 92       	push	r9
    19d0:	af 92       	push	r10
    19d2:	bf 92       	push	r11
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ec 01       	movw	r28, r24
    19e6:	6a 01       	movw	r12, r20
    19e8:	7b 01       	movw	r14, r22
    19ea:	48 01       	movw	r8, r16
    19ec:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    19ee:	b9 01       	movw	r22, r18
    19f0:	a8 01       	movw	r20, r16
    19f2:	a3 e0       	ldi	r26, 0x03	; 3
    19f4:	76 95       	lsr	r23
    19f6:	67 95       	ror	r22
    19f8:	57 95       	ror	r21
    19fa:	47 95       	ror	r20
    19fc:	aa 95       	dec	r26
    19fe:	d1 f7       	brne	.-12     	; 0x19f4 <usart_set_baudrate+0x28>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1a00:	d9 01       	movw	r26, r18
    1a02:	c8 01       	movw	r24, r16
    1a04:	16 e1       	ldi	r17, 0x16	; 22
    1a06:	b6 95       	lsr	r27
    1a08:	a7 95       	ror	r26
    1a0a:	97 95       	ror	r25
    1a0c:	87 95       	ror	r24
    1a0e:	1a 95       	dec	r17
    1a10:	d1 f7       	brne	.-12     	; 0x1a06 <usart_set_baudrate+0x3a>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	22 fd       	sbrc	r18, 2
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <usart_set_baudrate+0x5c>
		max_rate /= 2;
    1a18:	76 95       	lsr	r23
    1a1a:	67 95       	ror	r22
    1a1c:	57 95       	ror	r21
    1a1e:	47 95       	ror	r20
		min_rate /= 2;
    1a20:	b6 95       	lsr	r27
    1a22:	a7 95       	ror	r26
    1a24:	97 95       	ror	r25
    1a26:	87 95       	ror	r24
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1a28:	4c 15       	cp	r20, r12
    1a2a:	5d 05       	cpc	r21, r13
    1a2c:	6e 05       	cpc	r22, r14
    1a2e:	7f 05       	cpc	r23, r15
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <usart_set_baudrate+0x68>
    1a32:	97 c0       	rjmp	.+302    	; 0x1b62 <usart_set_baudrate+0x196>
    1a34:	c8 16       	cp	r12, r24
    1a36:	d9 06       	cpc	r13, r25
    1a38:	ea 06       	cpc	r14, r26
    1a3a:	fb 06       	cpc	r15, r27
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <usart_set_baudrate+0x74>
    1a3e:	91 c0       	rjmp	.+290    	; 0x1b62 <usart_set_baudrate+0x196>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	82 fd       	sbrc	r24, 2
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <usart_set_baudrate+0x82>
		baud *= 2;
    1a46:	cc 0c       	add	r12, r12
    1a48:	dd 1c       	adc	r13, r13
    1a4a:	ee 1c       	adc	r14, r14
    1a4c:	ff 1c       	adc	r15, r15
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1a4e:	c5 01       	movw	r24, r10
    1a50:	b4 01       	movw	r22, r8
    1a52:	a7 01       	movw	r20, r14
    1a54:	96 01       	movw	r18, r12
    1a56:	48 d7       	rcall	.+3728   	; 0x28e8 <__udivmodsi4>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e0       	ldi	r26, 0x00	; 0
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1a60:	19 ef       	ldi	r17, 0xF9	; 249
		if (ratio < limit) {
    1a62:	28 17       	cp	r18, r24
    1a64:	39 07       	cpc	r19, r25
    1a66:	4a 07       	cpc	r20, r26
    1a68:	5b 07       	cpc	r21, r27
    1a6a:	58 f0       	brcs	.+22     	; 0x1a82 <usart_set_baudrate+0xb6>
			break;
		}

		limit <<= 1;
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	aa 1f       	adc	r26, r26
    1a72:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1a74:	1d 3f       	cpi	r17, 0xFD	; 253
    1a76:	0c f4       	brge	.+2      	; 0x1a7a <usart_set_baudrate+0xae>
			limit |= 1;
    1a78:	81 60       	ori	r24, 0x01	; 1
    1a7a:	1f 5f       	subi	r17, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1a7c:	17 30       	cpi	r17, 0x07	; 7
    1a7e:	89 f7       	brne	.-30     	; 0x1a62 <usart_set_baudrate+0x96>
    1a80:	4b c0       	rjmp	.+150    	; 0x1b18 <usart_set_baudrate+0x14c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1a82:	17 ff       	sbrs	r17, 7
    1a84:	49 c0       	rjmp	.+146    	; 0x1b18 <usart_set_baudrate+0x14c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1a86:	d7 01       	movw	r26, r14
    1a88:	c6 01       	movw	r24, r12
    1a8a:	03 e0       	ldi	r16, 0x03	; 3
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	aa 1f       	adc	r26, r26
    1a92:	bb 1f       	adc	r27, r27
    1a94:	0a 95       	dec	r16
    1a96:	d1 f7       	brne	.-12     	; 0x1a8c <usart_set_baudrate+0xc0>
    1a98:	88 1a       	sub	r8, r24
    1a9a:	99 0a       	sbc	r9, r25
    1a9c:	aa 0a       	sbc	r10, r26
    1a9e:	bb 0a       	sbc	r11, r27
    1aa0:	81 2f       	mov	r24, r17
    1aa2:	99 27       	eor	r25, r25
    1aa4:	87 fd       	sbrc	r24, 7
    1aa6:	90 95       	com	r25
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1aa8:	1e 3f       	cpi	r17, 0xFE	; 254
    1aaa:	e4 f4       	brge	.+56     	; 0x1ae4 <usart_set_baudrate+0x118>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1aac:	6d ef       	ldi	r22, 0xFD	; 253
    1aae:	7f ef       	ldi	r23, 0xFF	; 255
    1ab0:	68 1b       	sub	r22, r24
    1ab2:	79 0b       	sbc	r23, r25
    1ab4:	a5 01       	movw	r20, r10
    1ab6:	94 01       	movw	r18, r8
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <usart_set_baudrate+0xf6>
    1aba:	22 0f       	add	r18, r18
    1abc:	33 1f       	adc	r19, r19
    1abe:	44 1f       	adc	r20, r20
    1ac0:	55 1f       	adc	r21, r21
    1ac2:	6a 95       	dec	r22
    1ac4:	d2 f7       	brpl	.-12     	; 0x1aba <usart_set_baudrate+0xee>
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	b9 01       	movw	r22, r18
    1aca:	46 01       	movw	r8, r12
    1acc:	57 01       	movw	r10, r14
    1ace:	b6 94       	lsr	r11
    1ad0:	a7 94       	ror	r10
    1ad2:	97 94       	ror	r9
    1ad4:	87 94       	ror	r8
    1ad6:	68 0d       	add	r22, r8
    1ad8:	79 1d       	adc	r23, r9
    1ada:	8a 1d       	adc	r24, r10
    1adc:	9b 1d       	adc	r25, r11
    1ade:	a7 01       	movw	r20, r14
    1ae0:	96 01       	movw	r18, r12
    1ae2:	18 c0       	rjmp	.+48     	; 0x1b14 <usart_set_baudrate+0x148>
		} else {
			baud <<= exp + 3;
    1ae4:	9c 01       	movw	r18, r24
    1ae6:	2d 5f       	subi	r18, 0xFD	; 253
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	d7 01       	movw	r26, r14
    1aec:	c6 01       	movw	r24, r12
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <usart_set_baudrate+0x12c>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	aa 1f       	adc	r26, r26
    1af6:	bb 1f       	adc	r27, r27
    1af8:	2a 95       	dec	r18
    1afa:	d2 f7       	brpl	.-12     	; 0x1af0 <usart_set_baudrate+0x124>
    1afc:	9c 01       	movw	r18, r24
    1afe:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	96 95       	lsr	r25
    1b06:	87 95       	ror	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	68 0d       	add	r22, r8
    1b0e:	79 1d       	adc	r23, r9
    1b10:	8a 1d       	adc	r24, r10
    1b12:	9b 1d       	adc	r25, r11
    1b14:	e9 d6       	rcall	.+3538   	; 0x28e8 <__udivmodsi4>
    1b16:	1c c0       	rjmp	.+56     	; 0x1b50 <usart_set_baudrate+0x184>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1b18:	23 e0       	ldi	r18, 0x03	; 3
    1b1a:	21 0f       	add	r18, r17
    1b1c:	d7 01       	movw	r26, r14
    1b1e:	c6 01       	movw	r24, r12
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <usart_set_baudrate+0x15e>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	aa 1f       	adc	r26, r26
    1b28:	bb 1f       	adc	r27, r27
    1b2a:	2a 95       	dec	r18
    1b2c:	d2 f7       	brpl	.-12     	; 0x1b22 <usart_set_baudrate+0x156>
    1b2e:	9c 01       	movw	r18, r24
    1b30:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	96 95       	lsr	r25
    1b38:	87 95       	ror	r24
    1b3a:	77 95       	ror	r23
    1b3c:	67 95       	ror	r22
    1b3e:	68 0d       	add	r22, r8
    1b40:	79 1d       	adc	r23, r9
    1b42:	8a 1d       	adc	r24, r10
    1b44:	9b 1d       	adc	r25, r11
    1b46:	d0 d6       	rcall	.+3488   	; 0x28e8 <__udivmodsi4>
    1b48:	21 50       	subi	r18, 0x01	; 1
    1b4a:	31 09       	sbc	r19, r1
    1b4c:	41 09       	sbc	r20, r1
    1b4e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1b50:	83 2f       	mov	r24, r19
    1b52:	8f 70       	andi	r24, 0x0F	; 15
    1b54:	12 95       	swap	r17
    1b56:	10 7f       	andi	r17, 0xF0	; 240
    1b58:	81 2b       	or	r24, r17
    1b5a:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1b5c:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <usart_set_baudrate+0x198>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1b62:	80 e0       	ldi	r24, 0x00	; 0

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	df 90       	pop	r13
    1b72:	cf 90       	pop	r12
    1b74:	bf 90       	pop	r11
    1b76:	af 90       	pop	r10
    1b78:	9f 90       	pop	r9
    1b7a:	8f 90       	pop	r8
    1b7c:	08 95       	ret

00001b7e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	ec 01       	movw	r28, r24
    1b88:	8b 01       	movw	r16, r22
	bool result;
	sysclk_enable_peripheral_clock(usart);
    1b8a:	24 de       	rcall	.-952    	; 0x17d4 <sysclk_enable_peripheral_clock>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	8f 73       	andi	r24, 0x3F	; 63
    1b90:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1b92:	f8 01       	movw	r30, r16
    1b94:	84 81       	ldd	r24, Z+4	; 0x04
    1b96:	95 81       	ldd	r25, Z+5	; 0x05
    1b98:	89 2b       	or	r24, r25
    1b9a:	96 81       	ldd	r25, Z+6	; 0x06
    1b9c:	99 23       	and	r25, r25
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <usart_init_rs232+0x26>
    1ba0:	98 e0       	ldi	r25, 0x08	; 8
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <usart_init_rs232+0x28>
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	89 2b       	or	r24, r25
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1baa:	f8 01       	movw	r30, r16
    1bac:	40 81       	ld	r20, Z
    1bae:	51 81       	ldd	r21, Z+1	; 0x01
    1bb0:	62 81       	ldd	r22, Z+2	; 0x02
    1bb2:	73 81       	ldd	r23, Z+3	; 0x03
    1bb4:	00 e0       	ldi	r16, 0x00	; 0
    1bb6:	18 e4       	ldi	r17, 0x48	; 72
    1bb8:	28 ee       	ldi	r18, 0xE8	; 232
    1bba:	31 e0       	ldi	r19, 0x01	; 1
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	06 df       	rcall	.-500    	; 0x19cc <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	98 60       	ori	r25, 0x08	; 8
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	90 61       	ori	r25, 0x10	; 16
    1bca:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <__vector_10>:
	uint8_t date;
	uint16_t year;
	}datetime;


ISR (RTC_OVF_vect) {
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	08 b6       	in	r0, 0x38	; 56
    1be2:	0f 92       	push	r0
    1be4:	18 be       	out	0x38, r1	; 56
    1be6:	09 b6       	in	r0, 0x39	; 57
    1be8:	0f 92       	push	r0
    1bea:	19 be       	out	0x39, r1	; 57
    1bec:	0a b6       	in	r0, 0x3a	; 58
    1bee:	0f 92       	push	r0
    1bf0:	1a be       	out	0x3a, r1	; 58
    1bf2:	0b b6       	in	r0, 0x3b	; 59
    1bf4:	0f 92       	push	r0
    1bf6:	1b be       	out	0x3b, r1	; 59
    1bf8:	2f 93       	push	r18
    1bfa:	3f 93       	push	r19
    1bfc:	4f 93       	push	r20
    1bfe:	5f 93       	push	r21
    1c00:	6f 93       	push	r22
    1c02:	7f 93       	push	r23
    1c04:	8f 93       	push	r24
    1c06:	9f 93       	push	r25
    1c08:	af 93       	push	r26
    1c0a:	bf 93       	push	r27
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	ef 93       	push	r30
    1c12:	ff 93       	push	r31
	
	datetime.seconds++;
    1c14:	80 91 32 22 	lds	r24, 0x2232
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	80 93 32 22 	sts	0x2232, r24
	
	if (datetime.seconds > 59) {
    1c1e:	8c 33       	cpi	r24, 0x3C	; 60
    1c20:	a0 f0       	brcs	.+40     	; 0x1c4a <__vector_10+0x74>
		datetime.seconds = 0;
    1c22:	10 92 32 22 	sts	0x2232, r1
		datetime.minutes++;
    1c26:	80 91 33 22 	lds	r24, 0x2233
    1c2a:	8f 5f       	subi	r24, 0xFF	; 255
    1c2c:	80 93 33 22 	sts	0x2233, r24
		
		if (datetime.minutes > 59) {
    1c30:	8c 33       	cpi	r24, 0x3C	; 60
    1c32:	58 f0       	brcs	.+22     	; 0x1c4a <__vector_10+0x74>
			datetime.minutes = 0;
    1c34:	10 92 33 22 	sts	0x2233, r1
			datetime.hours++;
    1c38:	80 91 34 22 	lds	r24, 0x2234
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	80 93 34 22 	sts	0x2234, r24
			
			if (datetime.hours > 23 ) {
    1c42:	88 31       	cpi	r24, 0x18	; 24
    1c44:	10 f0       	brcs	.+4      	; 0x1c4a <__vector_10+0x74>
				datetime.hours = 0;
    1c46:	10 92 34 22 	sts	0x2234, r1
 *
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_pressure(sensor_t *sensor, sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_PRESSURE, data);
    1c4a:	4d e1       	ldi	r20, 0x1D	; 29
    1c4c:	52 e2       	ldi	r21, 0x22	; 34
    1c4e:	66 e0       	ldi	r22, 0x06	; 6
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	91 e2       	ldi	r25, 0x21	; 33
    1c54:	68 d8       	rcall	.-3888   	; 0xd26 <sensor_read>
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_temperature(sensor_t *sensor,
		sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_TEMPERATURE, data);
    1c56:	4c e0       	ldi	r20, 0x0C	; 12
    1c58:	52 e2       	ldi	r21, 0x22	; 34
    1c5a:	69 e0       	ldi	r22, 0x09	; 9
    1c5c:	8f ef       	ldi	r24, 0xFF	; 255
    1c5e:	91 e2       	ldi	r25, 0x21	; 33
    1c60:	62 d8       	rcall	.-3900   	; 0xd26 <sensor_read>
	//time = rtc_get_time();
			
	sensor_get_pressure(&barometer, &press_data);
	sensor_get_temperature(&barometer, &temp_data);
			
	memset(tx_buf2, 0, 128);
    1c62:	e1 e7       	ldi	r30, 0x71	; 113
    1c64:	f1 e2       	ldi	r31, 0x21	; 33
    1c66:	80 e8       	ldi	r24, 0x80	; 128
    1c68:	df 01       	movw	r26, r30
    1c6a:	1d 92       	st	X+, r1
    1c6c:	8a 95       	dec	r24
    1c6e:	e9 f7       	brne	.-6      	; 0x1c6a <__vector_10+0x94>
			
	//sprintf( (char *)tx_buf2, "Squat: %d	Squat1: %d\r\n", RTC.CTRL, RTC.CNTL);
	sprintf( (char *)tx_buf2, "Time: %2d:%2d:%2d	", datetime.hours, datetime.minutes, datetime.seconds);
    1c70:	80 91 32 22 	lds	r24, 0x2232
    1c74:	1f 92       	push	r1
    1c76:	8f 93       	push	r24
    1c78:	80 91 33 22 	lds	r24, 0x2233
    1c7c:	1f 92       	push	r1
    1c7e:	8f 93       	push	r24
    1c80:	80 91 34 22 	lds	r24, 0x2234
    1c84:	1f 92       	push	r1
    1c86:	8f 93       	push	r24
    1c88:	8f eb       	ldi	r24, 0xBF	; 191
    1c8a:	90 e2       	ldi	r25, 0x20	; 32
    1c8c:	9f 93       	push	r25
    1c8e:	8f 93       	push	r24
    1c90:	ff 93       	push	r31
    1c92:	ef 93       	push	r30
    1c94:	f7 d7       	rcall	.+4078   	; 0x2c84 <sprintf>
    1c96:	8d b7       	in	r24, 0x3d	; 61
    1c98:	9e b7       	in	r25, 0x3e	; 62
    1c9a:	0a 96       	adiw	r24, 0x0a	; 10
    1c9c:	8d bf       	out	0x3d, r24	; 61
    1c9e:	9e bf       	out	0x3e, r25	; 62
    1ca0:	c1 e7       	ldi	r28, 0x71	; 113
    1ca2:	d1 e2       	ldi	r29, 0x21	; 33
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
			usart_putchar(USART_SERIAL_EXAMPLE, data[i]);
    1ca4:	69 91       	ld	r22, Y+
    1ca6:	80 ea       	ldi	r24, 0xA0	; 160
    1ca8:	98 e0       	ldi	r25, 0x08	; 8
    1caa:	88 de       	rcall	.-752    	; 0x19bc <usart_putchar>
	
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
    1cac:	91 e2       	ldi	r25, 0x21	; 33
    1cae:	c1 3f       	cpi	r28, 0xF1	; 241
    1cb0:	d9 07       	cpc	r29, r25
    1cb2:	c1 f7       	brne	.-16     	; 0x1ca4 <__vector_10+0xce>
			
	//sprintf( (char *)tx_buf2, "Squat: %d	Squat1: %d\r\n", RTC.CTRL, RTC.CNTL);
	sprintf( (char *)tx_buf2, "Time: %2d:%2d:%2d	", datetime.hours, datetime.minutes, datetime.seconds);
	sendUARTdata(tx_buf2, sizeof(tx_buf2));
			
	sprintf( (char *)tx_buf2, "Time: %lu	Pressure: %.2f in Hg	Temperature: %.1f C\r\n", temp_data.timestamp, (  ( (double)press_data.pressure.value / 100) / 33.864  ), (double)temp_data.temperature.value / 10 );
    1cb4:	60 91 0c 22 	lds	r22, 0x220C
    1cb8:	70 91 0d 22 	lds	r23, 0x220D
    1cbc:	80 91 0e 22 	lds	r24, 0x220E
    1cc0:	90 91 0f 22 	lds	r25, 0x220F
    1cc4:	a7 d1       	rcall	.+846    	; 0x2014 <__floatsisf>
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	fe d0       	rcall	.+508    	; 0x1ecc <__divsf3>
    1cd0:	9f 93       	push	r25
    1cd2:	8f 93       	push	r24
    1cd4:	7f 93       	push	r23
    1cd6:	6f 93       	push	r22
    1cd8:	60 91 1d 22 	lds	r22, 0x221D
    1cdc:	70 91 1e 22 	lds	r23, 0x221E
    1ce0:	80 91 1f 22 	lds	r24, 0x221F
    1ce4:	90 91 20 22 	lds	r25, 0x2220
    1ce8:	95 d1       	rcall	.+810    	; 0x2014 <__floatsisf>
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	48 ec       	ldi	r20, 0xC8	; 200
    1cf0:	52 e4       	ldi	r21, 0x42	; 66
    1cf2:	ec d0       	rcall	.+472    	; 0x1ecc <__divsf3>
    1cf4:	2c eb       	ldi	r18, 0xBC	; 188
    1cf6:	34 e7       	ldi	r19, 0x74	; 116
    1cf8:	47 e0       	ldi	r20, 0x07	; 7
    1cfa:	52 e4       	ldi	r21, 0x42	; 66
    1cfc:	e7 d0       	rcall	.+462    	; 0x1ecc <__divsf3>
    1cfe:	9f 93       	push	r25
    1d00:	8f 93       	push	r24
    1d02:	7f 93       	push	r23
    1d04:	6f 93       	push	r22
    1d06:	80 91 1b 22 	lds	r24, 0x221B
    1d0a:	8f 93       	push	r24
    1d0c:	80 91 1a 22 	lds	r24, 0x221A
    1d10:	8f 93       	push	r24
    1d12:	80 91 19 22 	lds	r24, 0x2219
    1d16:	8f 93       	push	r24
    1d18:	80 91 18 22 	lds	r24, 0x2218
    1d1c:	8f 93       	push	r24
    1d1e:	82 ed       	ldi	r24, 0xD2	; 210
    1d20:	90 e2       	ldi	r25, 0x20	; 32
    1d22:	9f 93       	push	r25
    1d24:	8f 93       	push	r24
    1d26:	81 e7       	ldi	r24, 0x71	; 113
    1d28:	91 e2       	ldi	r25, 0x21	; 33
    1d2a:	9f 93       	push	r25
    1d2c:	8f 93       	push	r24
    1d2e:	aa d7       	rcall	.+3924   	; 0x2c84 <sprintf>
    1d30:	ad b7       	in	r26, 0x3d	; 61
    1d32:	be b7       	in	r27, 0x3e	; 62
    1d34:	50 96       	adiw	r26, 0x10	; 16
    1d36:	ad bf       	out	0x3d, r26	; 61
    1d38:	be bf       	out	0x3e, r27	; 62
    1d3a:	c1 e7       	ldi	r28, 0x71	; 113
    1d3c:	d1 e2       	ldi	r29, 0x21	; 33
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
			usart_putchar(USART_SERIAL_EXAMPLE, data[i]);
    1d3e:	69 91       	ld	r22, Y+
    1d40:	80 ea       	ldi	r24, 0xA0	; 160
    1d42:	98 e0       	ldi	r25, 0x08	; 8
    1d44:	3b de       	rcall	.-906    	; 0x19bc <usart_putchar>
	
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
    1d46:	b1 e2       	ldi	r27, 0x21	; 33
    1d48:	c1 3f       	cpi	r28, 0xF1	; 241
    1d4a:	db 07       	cpc	r29, r27
    1d4c:	c1 f7       	brne	.-16     	; 0x1d3e <__vector_10+0x168>
		}
	}
	
	getTempPress();
	
	if (isLED == true) {
    1d4e:	80 91 70 21 	lds	r24, 0x2170
    1d52:	88 23       	and	r24, r24
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <__vector_10+0x18c>
		isLED = false;
    1d56:	10 92 70 21 	sts	0x2170, r1
		PORTE.OUTSET = 0x01;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	80 93 85 06 	sts	0x0685, r24
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <__vector_10+0x196>
	} else {
		isLED = true;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 70 21 	sts	0x2170, r24
		PORTE.OUTCLR = 0x01;
    1d68:	80 93 86 06 	sts	0x0686, r24
	}
}
    1d6c:	ff 91       	pop	r31
    1d6e:	ef 91       	pop	r30
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	bf 91       	pop	r27
    1d76:	af 91       	pop	r26
    1d78:	9f 91       	pop	r25
    1d7a:	8f 91       	pop	r24
    1d7c:	7f 91       	pop	r23
    1d7e:	6f 91       	pop	r22
    1d80:	5f 91       	pop	r21
    1d82:	4f 91       	pop	r20
    1d84:	3f 91       	pop	r19
    1d86:	2f 91       	pop	r18
    1d88:	0f 90       	pop	r0
    1d8a:	0b be       	out	0x3b, r0	; 59
    1d8c:	0f 90       	pop	r0
    1d8e:	0a be       	out	0x3a, r0	; 58
    1d90:	0f 90       	pop	r0
    1d92:	09 be       	out	0x39, r0	; 57
    1d94:	0f 90       	pop	r0
    1d96:	08 be       	out	0x38, r0	; 56
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	0f 90       	pop	r0
    1d9e:	1f 90       	pop	r1
    1da0:	18 95       	reti

00001da2 <main>:
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
//	cli();
	board_init();
    1da2:	7d da       	rcall	.-2822   	; 0x129e <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1da4:	87 e0       	ldi	r24, 0x07	; 7
    1da6:	80 93 a2 00 	sts	0x00A2, r24
	pmic_init();
	sysclk_init();
    1daa:	0e 94 16 02 	call	0x42c	; 0x42c <sysclk_init>
//	sleepmgr_init();
	sensor_platform_init();
    1dae:	52 da       	rcall	.-2908   	; 0x1254 <sensor_platform_init>
	rtc_init();
    1db0:	c5 da       	rcall	.-2678   	; 0x133c <rtc_init>
	PORTE.DIRSET = 0x01;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	80 93 81 06 	sts	0x0681, r24
	

// Init the RTC

	CLK.RTCCTRL = 0x05;
    1db8:	85 e0       	ldi	r24, 0x05	; 5
    1dba:	80 93 43 00 	sts	0x0043, r24

//	while ( !( OSC_STATUS & OSC_RC32KRDY_bm ) ); /* Wait for the int. 32kHz oscillator to stabilize. */
	PMIC_CTRL |= 0x01; // Set Int. priority level to low in PMIC
    1dbe:	80 91 a2 00 	lds	r24, 0x00A2
    1dc2:	81 60       	ori	r24, 0x01	; 1
    1dc4:	80 93 a2 00 	sts	0x00A2, r24
		
	while( ( RTC_STATUS & 0x01 ) ); // Needed B 4 writing to RTC PER / CNT registers
    1dc8:	80 91 01 04 	lds	r24, 0x0401
    1dcc:	80 fd       	sbrc	r24, 0
    1dce:	fc cf       	rjmp	.-8      	; 0x1dc8 <main+0x26>
	RTC.PER = 0x0400;
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	94 e0       	ldi	r25, 0x04	; 4
    1dd4:	80 93 0a 04 	sts	0x040A, r24
    1dd8:	90 93 0b 04 	sts	0x040B, r25
	RTC.CTRL = 0x01;				
    1ddc:	c1 e0       	ldi	r28, 0x01	; 1
    1dde:	c0 93 00 04 	sts	0x0400, r28
	RTC.INTCTRL = 0x01;	 //Set this to match the interrupt level in PMIC_CTRL	
    1de2:	c0 93 02 04 	sts	0x0402, r28
		

	sensor_attach(&barometer, SENSOR_TYPE_BAROMETER, 0, 0);
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	62 e0       	ldi	r22, 0x02	; 2
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	91 e2       	ldi	r25, 0x21	; 33
    1df6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <sensor_attach>
	
	sensor_set_state(&barometer, SENSOR_STATE_HIGHEST_POWER);
    1dfa:	67 e0       	ldi	r22, 0x07	; 7
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	91 e2       	ldi	r25, 0x21	; 33
    1e00:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <sensor_set_state>
	
	press_data.scaled = true;
    1e04:	c0 93 2d 22 	sts	0x222D, r28
	temp_data.scaled = true;
    1e08:	c0 93 1c 22 	sts	0x221C, r28
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    1e0c:	62 e2       	ldi	r22, 0x22	; 34
    1e0e:	70 e2       	ldi	r23, 0x20	; 32
    1e10:	80 ea       	ldi	r24, 0xA0	; 160
    1e12:	98 e0       	ldi	r25, 0x08	; 8
    1e14:	b4 de       	rcall	.-664    	; 0x1b7e <usart_init_rs232>
    1e16:	c1 e5       	ldi	r28, 0x51	; 81
    1e18:	d0 e2       	ldi	r29, 0x20	; 32
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
			usart_putchar(USART_SERIAL_EXAMPLE, data[i]);
    1e1a:	69 91       	ld	r22, Y+
    1e1c:	80 ea       	ldi	r24, 0xA0	; 160
    1e1e:	98 e0       	ldi	r25, 0x08	; 8
    1e20:	cd dd       	rcall	.-1126   	; 0x19bc <usart_putchar>
	
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
    1e22:	80 e2       	ldi	r24, 0x20	; 32
    1e24:	c7 36       	cpi	r28, 0x67	; 103
    1e26:	d8 07       	cpc	r29, r24
    1e28:	c1 f7       	brne	.-16     	; 0x1e1a <main+0x78>
	
	//	sysclk_rtcsrc_enable(SYSCLK_SRC_RC2MHZ);
//		rtc_init();

	
	if (barometer.err) {
    1e2a:	80 91 06 22 	lds	r24, 0x2206
    1e2e:	90 91 07 22 	lds	r25, 0x2207
    1e32:	89 2b       	or	r24, r25
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <main+0xac>
    1e36:	c9 e2       	ldi	r28, 0x29	; 41
    1e38:	d0 e2       	ldi	r29, 0x20	; 32
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
			usart_putchar(USART_SERIAL_EXAMPLE, data[i]);
    1e3a:	69 91       	ld	r22, Y+
    1e3c:	80 ea       	ldi	r24, 0xA0	; 160
    1e3e:	98 e0       	ldi	r25, 0x08	; 8
    1e40:	bd dd       	rcall	.-1158   	; 0x19bc <usart_putchar>
	
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
    1e42:	90 e2       	ldi	r25, 0x20	; 32
    1e44:	c0 35       	cpi	r28, 0x50	; 80
    1e46:	d9 07       	cpc	r29, r25
    1e48:	c1 f7       	brne	.-16     	; 0x1e3a <main+0x98>
		sprintf((char*)tx_buf2, "%s\r\n\r\nSensor ID: 0x%02x ver: 0x%02x\r\n%d bit resolution\r\n\r\n", barometer.drv->caps.name, (unsigned)id, (unsigned)ver, barometer.hal->resolution);
		sendUARTdata(tx_buf2, sizeof(tx_buf2));				
	}
	
//	cpu_irq_enable();
	sei();
    1e4a:	78 94       	sei
    1e4c:	3e c0       	rjmp	.+124    	; 0x1eca <main+0x128>
	
	if (barometer.err) {
		sendUARTdata(press_err, 39);
	}
	else {
		memset(tx_buf2, 0, 128);
    1e4e:	c1 e7       	ldi	r28, 0x71	; 113
    1e50:	d1 e2       	ldi	r29, 0x21	; 33
    1e52:	80 e8       	ldi	r24, 0x80	; 128
    1e54:	fe 01       	movw	r30, r28
    1e56:	11 92       	st	Z+, r1
    1e58:	8a 95       	dec	r24
    1e5a:	e9 f7       	brne	.-6      	; 0x1e56 <main+0xb4>
		sensor_device_id(&barometer, &id, &ver);
    1e5c:	49 e3       	ldi	r20, 0x39	; 57
    1e5e:	52 e2       	ldi	r21, 0x22	; 34
    1e60:	6e e2       	ldi	r22, 0x2E	; 46
    1e62:	72 e2       	ldi	r23, 0x22	; 34
    1e64:	8f ef       	ldi	r24, 0xFF	; 255
    1e66:	91 e2       	ldi	r25, 0x21	; 33
    1e68:	0e 94 b6 06 	call	0xd6c	; 0xd6c <sensor_device_id>
		sprintf((char*)tx_buf2, "%s\r\n\r\nSensor ID: 0x%02x ver: 0x%02x\r\n%d bit resolution\r\n\r\n", barometer.drv->caps.name, (unsigned)id, (unsigned)ver, barometer.hal->resolution);
    1e6c:	e0 91 ff 21 	lds	r30, 0x21FF
    1e70:	f0 91 00 22 	lds	r31, 0x2200
    1e74:	87 8d       	ldd	r24, Z+31	; 0x1f
    1e76:	8f 93       	push	r24
    1e78:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e7a:	8f 93       	push	r24
    1e7c:	80 91 39 22 	lds	r24, 0x2239
    1e80:	1f 92       	push	r1
    1e82:	8f 93       	push	r24
    1e84:	80 91 2f 22 	lds	r24, 0x222F
    1e88:	8f 93       	push	r24
    1e8a:	80 91 2e 22 	lds	r24, 0x222E
    1e8e:	8f 93       	push	r24
    1e90:	e0 91 01 22 	lds	r30, 0x2201
    1e94:	f0 91 02 22 	lds	r31, 0x2202
    1e98:	80 8d       	ldd	r24, Z+24	; 0x18
    1e9a:	8f 93       	push	r24
    1e9c:	87 89       	ldd	r24, Z+23	; 0x17
    1e9e:	8f 93       	push	r24
    1ea0:	87 e0       	ldi	r24, 0x07	; 7
    1ea2:	91 e2       	ldi	r25, 0x21	; 33
    1ea4:	9f 93       	push	r25
    1ea6:	8f 93       	push	r24
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	eb d6       	rcall	.+3542   	; 0x2c84 <sprintf>
    1eae:	ed b7       	in	r30, 0x3d	; 61
    1eb0:	fe b7       	in	r31, 0x3e	; 62
    1eb2:	3c 96       	adiw	r30, 0x0c	; 12
    1eb4:	ed bf       	out	0x3d, r30	; 61
    1eb6:	fe bf       	out	0x3e, r31	; 62
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
			usart_putchar(USART_SERIAL_EXAMPLE, data[i]);
    1eb8:	69 91       	ld	r22, Y+
    1eba:	80 ea       	ldi	r24, 0xA0	; 160
    1ebc:	98 e0       	ldi	r25, 0x08	; 8
    1ebe:	7e dd       	rcall	.-1284   	; 0x19bc <usart_putchar>
	
	uint8_t i;
	
	if (length > 1) {
		
		for (i = 0; i < length; i++) {
    1ec0:	f1 e2       	ldi	r31, 0x21	; 33
    1ec2:	c1 3f       	cpi	r28, 0xF1	; 241
    1ec4:	df 07       	cpc	r29, r31
    1ec6:	c1 f7       	brne	.-16     	; 0x1eb8 <main+0x116>
    1ec8:	c0 cf       	rjmp	.-128    	; 0x1e4a <main+0xa8>
    1eca:	ff cf       	rjmp	.-2      	; 0x1eca <main+0x128>

00001ecc <__divsf3>:
    1ecc:	0c d0       	rcall	.+24     	; 0x1ee6 <__divsf3x>
    1ece:	42 c1       	rjmp	.+644    	; 0x2154 <__fp_round>
    1ed0:	3a d1       	rcall	.+628    	; 0x2146 <__fp_pscB>
    1ed2:	40 f0       	brcs	.+16     	; 0x1ee4 <__divsf3+0x18>
    1ed4:	31 d1       	rcall	.+610    	; 0x2138 <__fp_pscA>
    1ed6:	30 f0       	brcs	.+12     	; 0x1ee4 <__divsf3+0x18>
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <__divsf3+0x16>
    1eda:	5f 3f       	cpi	r21, 0xFF	; 255
    1edc:	19 f0       	breq	.+6      	; 0x1ee4 <__divsf3+0x18>
    1ede:	13 c1       	rjmp	.+550    	; 0x2106 <__fp_inf>
    1ee0:	51 11       	cpse	r21, r1
    1ee2:	6c c1       	rjmp	.+728    	; 0x21bc <__fp_szero>
    1ee4:	16 c1       	rjmp	.+556    	; 0x2112 <__fp_nan>

00001ee6 <__divsf3x>:
    1ee6:	47 d1       	rcall	.+654    	; 0x2176 <__fp_split3>
    1ee8:	98 f3       	brcs	.-26     	; 0x1ed0 <__divsf3+0x4>

00001eea <__divsf3_pse>:
    1eea:	99 23       	and	r25, r25
    1eec:	c9 f3       	breq	.-14     	; 0x1ee0 <__divsf3+0x14>
    1eee:	55 23       	and	r21, r21
    1ef0:	b1 f3       	breq	.-20     	; 0x1ede <__divsf3+0x12>
    1ef2:	95 1b       	sub	r25, r21
    1ef4:	55 0b       	sbc	r21, r21
    1ef6:	bb 27       	eor	r27, r27
    1ef8:	aa 27       	eor	r26, r26
    1efa:	62 17       	cp	r22, r18
    1efc:	73 07       	cpc	r23, r19
    1efe:	84 07       	cpc	r24, r20
    1f00:	38 f0       	brcs	.+14     	; 0x1f10 <__divsf3_pse+0x26>
    1f02:	9f 5f       	subi	r25, 0xFF	; 255
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	44 1f       	adc	r20, r20
    1f0c:	aa 1f       	adc	r26, r26
    1f0e:	a9 f3       	breq	.-22     	; 0x1efa <__divsf3_pse+0x10>
    1f10:	33 d0       	rcall	.+102    	; 0x1f78 <__divsf3_pse+0x8e>
    1f12:	0e 2e       	mov	r0, r30
    1f14:	3a f0       	brmi	.+14     	; 0x1f24 <__divsf3_pse+0x3a>
    1f16:	e0 e8       	ldi	r30, 0x80	; 128
    1f18:	30 d0       	rcall	.+96     	; 0x1f7a <__divsf3_pse+0x90>
    1f1a:	91 50       	subi	r25, 0x01	; 1
    1f1c:	50 40       	sbci	r21, 0x00	; 0
    1f1e:	e6 95       	lsr	r30
    1f20:	00 1c       	adc	r0, r0
    1f22:	ca f7       	brpl	.-14     	; 0x1f16 <__divsf3_pse+0x2c>
    1f24:	29 d0       	rcall	.+82     	; 0x1f78 <__divsf3_pse+0x8e>
    1f26:	fe 2f       	mov	r31, r30
    1f28:	27 d0       	rcall	.+78     	; 0x1f78 <__divsf3_pse+0x8e>
    1f2a:	66 0f       	add	r22, r22
    1f2c:	77 1f       	adc	r23, r23
    1f2e:	88 1f       	adc	r24, r24
    1f30:	bb 1f       	adc	r27, r27
    1f32:	26 17       	cp	r18, r22
    1f34:	37 07       	cpc	r19, r23
    1f36:	48 07       	cpc	r20, r24
    1f38:	ab 07       	cpc	r26, r27
    1f3a:	b0 e8       	ldi	r27, 0x80	; 128
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <__divsf3_pse+0x56>
    1f3e:	bb 0b       	sbc	r27, r27
    1f40:	80 2d       	mov	r24, r0
    1f42:	bf 01       	movw	r22, r30
    1f44:	ff 27       	eor	r31, r31
    1f46:	93 58       	subi	r25, 0x83	; 131
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	2a f0       	brmi	.+10     	; 0x1f56 <__divsf3_pse+0x6c>
    1f4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f4e:	51 05       	cpc	r21, r1
    1f50:	68 f0       	brcs	.+26     	; 0x1f6c <__divsf3_pse+0x82>
    1f52:	d9 c0       	rjmp	.+434    	; 0x2106 <__fp_inf>
    1f54:	33 c1       	rjmp	.+614    	; 0x21bc <__fp_szero>
    1f56:	5f 3f       	cpi	r21, 0xFF	; 255
    1f58:	ec f3       	brlt	.-6      	; 0x1f54 <__divsf3_pse+0x6a>
    1f5a:	98 3e       	cpi	r25, 0xE8	; 232
    1f5c:	dc f3       	brlt	.-10     	; 0x1f54 <__divsf3_pse+0x6a>
    1f5e:	86 95       	lsr	r24
    1f60:	77 95       	ror	r23
    1f62:	67 95       	ror	r22
    1f64:	b7 95       	ror	r27
    1f66:	f7 95       	ror	r31
    1f68:	9f 5f       	subi	r25, 0xFF	; 255
    1f6a:	c9 f7       	brne	.-14     	; 0x1f5e <__divsf3_pse+0x74>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	91 1d       	adc	r25, r1
    1f70:	96 95       	lsr	r25
    1f72:	87 95       	ror	r24
    1f74:	97 f9       	bld	r25, 7
    1f76:	08 95       	ret
    1f78:	e1 e0       	ldi	r30, 0x01	; 1
    1f7a:	66 0f       	add	r22, r22
    1f7c:	77 1f       	adc	r23, r23
    1f7e:	88 1f       	adc	r24, r24
    1f80:	bb 1f       	adc	r27, r27
    1f82:	62 17       	cp	r22, r18
    1f84:	73 07       	cpc	r23, r19
    1f86:	84 07       	cpc	r24, r20
    1f88:	ba 07       	cpc	r27, r26
    1f8a:	20 f0       	brcs	.+8      	; 0x1f94 <__divsf3_pse+0xaa>
    1f8c:	62 1b       	sub	r22, r18
    1f8e:	73 0b       	sbc	r23, r19
    1f90:	84 0b       	sbc	r24, r20
    1f92:	ba 0b       	sbc	r27, r26
    1f94:	ee 1f       	adc	r30, r30
    1f96:	88 f7       	brcc	.-30     	; 0x1f7a <__divsf3_pse+0x90>
    1f98:	e0 95       	com	r30
    1f9a:	08 95       	ret

00001f9c <__fixsfdi>:
    1f9c:	be e3       	ldi	r27, 0x3E	; 62
    1f9e:	04 d0       	rcall	.+8      	; 0x1fa8 <__fixunssfdi+0x2>
    1fa0:	08 f4       	brcc	.+2      	; 0x1fa4 <__fixsfdi+0x8>
    1fa2:	90 e8       	ldi	r25, 0x80	; 128
    1fa4:	08 95       	ret

00001fa6 <__fixunssfdi>:
    1fa6:	bf e3       	ldi	r27, 0x3F	; 63
    1fa8:	22 27       	eor	r18, r18
    1faa:	33 27       	eor	r19, r19
    1fac:	a9 01       	movw	r20, r18
    1fae:	eb d0       	rcall	.+470    	; 0x2186 <__fp_splitA>
    1fb0:	58 f1       	brcs	.+86     	; 0x2008 <__fixunssfdi+0x62>
    1fb2:	9f 57       	subi	r25, 0x7F	; 127
    1fb4:	40 f1       	brcs	.+80     	; 0x2006 <__fixunssfdi+0x60>
    1fb6:	b9 17       	cp	r27, r25
    1fb8:	38 f1       	brcs	.+78     	; 0x2008 <__fixunssfdi+0x62>
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	b9 1b       	sub	r27, r25
    1fbe:	99 27       	eor	r25, r25
    1fc0:	b8 50       	subi	r27, 0x08	; 8
    1fc2:	3a f4       	brpl	.+14     	; 0x1fd2 <__fixunssfdi+0x2c>
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 1f       	adc	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	b3 95       	inc	r27
    1fce:	d2 f3       	brmi	.-12     	; 0x1fc4 <__fixunssfdi+0x1e>
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <__fixunssfdi+0x58>
    1fd2:	b8 50       	subi	r27, 0x08	; 8
    1fd4:	4a f0       	brmi	.+18     	; 0x1fe8 <__fixunssfdi+0x42>
    1fd6:	23 2f       	mov	r18, r19
    1fd8:	34 2f       	mov	r19, r20
    1fda:	45 2f       	mov	r20, r21
    1fdc:	56 2f       	mov	r21, r22
    1fde:	67 2f       	mov	r22, r23
    1fe0:	78 2f       	mov	r23, r24
    1fe2:	88 27       	eor	r24, r24
    1fe4:	b8 50       	subi	r27, 0x08	; 8
    1fe6:	ba f7       	brpl	.-18     	; 0x1fd6 <__fixunssfdi+0x30>
    1fe8:	b8 5f       	subi	r27, 0xF8	; 248
    1fea:	49 f0       	breq	.+18     	; 0x1ffe <__fixunssfdi+0x58>
    1fec:	86 95       	lsr	r24
    1fee:	77 95       	ror	r23
    1ff0:	67 95       	ror	r22
    1ff2:	57 95       	ror	r21
    1ff4:	47 95       	ror	r20
    1ff6:	37 95       	ror	r19
    1ff8:	27 95       	ror	r18
    1ffa:	ba 95       	dec	r27
    1ffc:	b9 f7       	brne	.-18     	; 0x1fec <__fixunssfdi+0x46>
    1ffe:	0e f4       	brtc	.+2      	; 0x2002 <__fixunssfdi+0x5c>
    2000:	8b d0       	rcall	.+278    	; 0x2118 <__fp_negdi>
    2002:	88 94       	clc
    2004:	08 95       	ret
    2006:	88 94       	clc
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	cb 01       	movw	r24, r22
    200e:	08 95       	ret

00002010 <__floatunsisf>:
    2010:	e8 94       	clt
    2012:	09 c0       	rjmp	.+18     	; 0x2026 <__floatsisf+0x12>

00002014 <__floatsisf>:
    2014:	97 fb       	bst	r25, 7
    2016:	3e f4       	brtc	.+14     	; 0x2026 <__floatsisf+0x12>
    2018:	90 95       	com	r25
    201a:	80 95       	com	r24
    201c:	70 95       	com	r23
    201e:	61 95       	neg	r22
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	8f 4f       	sbci	r24, 0xFF	; 255
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	99 23       	and	r25, r25
    2028:	a9 f0       	breq	.+42     	; 0x2054 <__floatsisf+0x40>
    202a:	f9 2f       	mov	r31, r25
    202c:	96 e9       	ldi	r25, 0x96	; 150
    202e:	bb 27       	eor	r27, r27
    2030:	93 95       	inc	r25
    2032:	f6 95       	lsr	r31
    2034:	87 95       	ror	r24
    2036:	77 95       	ror	r23
    2038:	67 95       	ror	r22
    203a:	b7 95       	ror	r27
    203c:	f1 11       	cpse	r31, r1
    203e:	f8 cf       	rjmp	.-16     	; 0x2030 <__floatsisf+0x1c>
    2040:	fa f4       	brpl	.+62     	; 0x2080 <__floatsisf+0x6c>
    2042:	bb 0f       	add	r27, r27
    2044:	11 f4       	brne	.+4      	; 0x204a <__floatsisf+0x36>
    2046:	60 ff       	sbrs	r22, 0
    2048:	1b c0       	rjmp	.+54     	; 0x2080 <__floatsisf+0x6c>
    204a:	6f 5f       	subi	r22, 0xFF	; 255
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	8f 4f       	sbci	r24, 0xFF	; 255
    2050:	9f 4f       	sbci	r25, 0xFF	; 255
    2052:	16 c0       	rjmp	.+44     	; 0x2080 <__floatsisf+0x6c>
    2054:	88 23       	and	r24, r24
    2056:	11 f0       	breq	.+4      	; 0x205c <__floatsisf+0x48>
    2058:	96 e9       	ldi	r25, 0x96	; 150
    205a:	11 c0       	rjmp	.+34     	; 0x207e <__floatsisf+0x6a>
    205c:	77 23       	and	r23, r23
    205e:	21 f0       	breq	.+8      	; 0x2068 <__floatsisf+0x54>
    2060:	9e e8       	ldi	r25, 0x8E	; 142
    2062:	87 2f       	mov	r24, r23
    2064:	76 2f       	mov	r23, r22
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <__floatsisf+0x5e>
    2068:	66 23       	and	r22, r22
    206a:	71 f0       	breq	.+28     	; 0x2088 <__floatsisf+0x74>
    206c:	96 e8       	ldi	r25, 0x86	; 134
    206e:	86 2f       	mov	r24, r22
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	2a f0       	brmi	.+10     	; 0x2080 <__floatsisf+0x6c>
    2076:	9a 95       	dec	r25
    2078:	66 0f       	add	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	88 1f       	adc	r24, r24
    207e:	da f7       	brpl	.-10     	; 0x2076 <__floatsisf+0x62>
    2080:	88 0f       	add	r24, r24
    2082:	96 95       	lsr	r25
    2084:	87 95       	ror	r24
    2086:	97 f9       	bld	r25, 7
    2088:	08 95       	ret

0000208a <__floatundisf>:
    208a:	e8 94       	clt

0000208c <__fp_di2sf>:
    208c:	f9 2f       	mov	r31, r25
    208e:	96 eb       	ldi	r25, 0xB6	; 182
    2090:	ff 23       	and	r31, r31
    2092:	81 f0       	breq	.+32     	; 0x20b4 <__fp_di2sf+0x28>
    2094:	12 16       	cp	r1, r18
    2096:	13 06       	cpc	r1, r19
    2098:	14 06       	cpc	r1, r20
    209a:	44 0b       	sbc	r20, r20
    209c:	93 95       	inc	r25
    209e:	f6 95       	lsr	r31
    20a0:	87 95       	ror	r24
    20a2:	77 95       	ror	r23
    20a4:	67 95       	ror	r22
    20a6:	57 95       	ror	r21
    20a8:	40 40       	sbci	r20, 0x00	; 0
    20aa:	ff 23       	and	r31, r31
    20ac:	b9 f7       	brne	.-18     	; 0x209c <__fp_di2sf+0x10>
    20ae:	1b c0       	rjmp	.+54     	; 0x20e6 <__fp_di2sf+0x5a>
    20b0:	99 27       	eor	r25, r25
    20b2:	08 95       	ret
    20b4:	88 23       	and	r24, r24
    20b6:	51 f4       	brne	.+20     	; 0x20cc <__fp_di2sf+0x40>
    20b8:	98 50       	subi	r25, 0x08	; 8
    20ba:	d2 f7       	brpl	.-12     	; 0x20b0 <__fp_di2sf+0x24>
    20bc:	87 2b       	or	r24, r23
    20be:	76 2f       	mov	r23, r22
    20c0:	65 2f       	mov	r22, r21
    20c2:	54 2f       	mov	r21, r20
    20c4:	43 2f       	mov	r20, r19
    20c6:	32 2f       	mov	r19, r18
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	b1 f3       	breq	.-20     	; 0x20b8 <__fp_di2sf+0x2c>
    20cc:	12 16       	cp	r1, r18
    20ce:	13 06       	cpc	r1, r19
    20d0:	14 06       	cpc	r1, r20
    20d2:	44 0b       	sbc	r20, r20
    20d4:	88 23       	and	r24, r24
    20d6:	3a f0       	brmi	.+14     	; 0x20e6 <__fp_di2sf+0x5a>
    20d8:	9a 95       	dec	r25
    20da:	44 0f       	add	r20, r20
    20dc:	55 1f       	adc	r21, r21
    20de:	66 1f       	adc	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	ca f7       	brpl	.-14     	; 0x20d8 <__fp_di2sf+0x4c>
    20e6:	55 23       	and	r21, r21
    20e8:	4a f4       	brpl	.+18     	; 0x20fc <__fp_di2sf+0x70>
    20ea:	44 0f       	add	r20, r20
    20ec:	55 1f       	adc	r21, r21
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <__fp_di2sf+0x68>
    20f0:	60 ff       	sbrs	r22, 0
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <__fp_di2sf+0x70>
    20f4:	6f 5f       	subi	r22, 0xFF	; 255
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	88 0f       	add	r24, r24
    20fe:	96 95       	lsr	r25
    2100:	87 95       	ror	r24
    2102:	97 f9       	bld	r25, 7
    2104:	08 95       	ret

00002106 <__fp_inf>:
    2106:	97 f9       	bld	r25, 7
    2108:	9f 67       	ori	r25, 0x7F	; 127
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	08 95       	ret

00002112 <__fp_nan>:
    2112:	9f ef       	ldi	r25, 0xFF	; 255
    2114:	80 ec       	ldi	r24, 0xC0	; 192
    2116:	08 95       	ret

00002118 <__fp_negdi>:
    2118:	90 95       	com	r25
    211a:	80 95       	com	r24
    211c:	70 95       	com	r23
    211e:	60 95       	com	r22
    2120:	50 95       	com	r21
    2122:	40 95       	com	r20
    2124:	30 95       	com	r19
    2126:	21 95       	neg	r18
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	4f 4f       	sbci	r20, 0xFF	; 255
    212c:	5f 4f       	sbci	r21, 0xFF	; 255
    212e:	6f 4f       	sbci	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8f 4f       	sbci	r24, 0xFF	; 255
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	08 95       	ret

00002138 <__fp_pscA>:
    2138:	00 24       	eor	r0, r0
    213a:	0a 94       	dec	r0
    213c:	16 16       	cp	r1, r22
    213e:	17 06       	cpc	r1, r23
    2140:	18 06       	cpc	r1, r24
    2142:	09 06       	cpc	r0, r25
    2144:	08 95       	ret

00002146 <__fp_pscB>:
    2146:	00 24       	eor	r0, r0
    2148:	0a 94       	dec	r0
    214a:	12 16       	cp	r1, r18
    214c:	13 06       	cpc	r1, r19
    214e:	14 06       	cpc	r1, r20
    2150:	05 06       	cpc	r0, r21
    2152:	08 95       	ret

00002154 <__fp_round>:
    2154:	09 2e       	mov	r0, r25
    2156:	03 94       	inc	r0
    2158:	00 0c       	add	r0, r0
    215a:	11 f4       	brne	.+4      	; 0x2160 <__fp_round+0xc>
    215c:	88 23       	and	r24, r24
    215e:	52 f0       	brmi	.+20     	; 0x2174 <__fp_round+0x20>
    2160:	bb 0f       	add	r27, r27
    2162:	40 f4       	brcc	.+16     	; 0x2174 <__fp_round+0x20>
    2164:	bf 2b       	or	r27, r31
    2166:	11 f4       	brne	.+4      	; 0x216c <__fp_round+0x18>
    2168:	60 ff       	sbrs	r22, 0
    216a:	04 c0       	rjmp	.+8      	; 0x2174 <__fp_round+0x20>
    216c:	6f 5f       	subi	r22, 0xFF	; 255
    216e:	7f 4f       	sbci	r23, 0xFF	; 255
    2170:	8f 4f       	sbci	r24, 0xFF	; 255
    2172:	9f 4f       	sbci	r25, 0xFF	; 255
    2174:	08 95       	ret

00002176 <__fp_split3>:
    2176:	57 fd       	sbrc	r21, 7
    2178:	90 58       	subi	r25, 0x80	; 128
    217a:	44 0f       	add	r20, r20
    217c:	55 1f       	adc	r21, r21
    217e:	59 f0       	breq	.+22     	; 0x2196 <__fp_splitA+0x10>
    2180:	5f 3f       	cpi	r21, 0xFF	; 255
    2182:	71 f0       	breq	.+28     	; 0x21a0 <__fp_splitA+0x1a>
    2184:	47 95       	ror	r20

00002186 <__fp_splitA>:
    2186:	88 0f       	add	r24, r24
    2188:	97 fb       	bst	r25, 7
    218a:	99 1f       	adc	r25, r25
    218c:	61 f0       	breq	.+24     	; 0x21a6 <__fp_splitA+0x20>
    218e:	9f 3f       	cpi	r25, 0xFF	; 255
    2190:	79 f0       	breq	.+30     	; 0x21b0 <__fp_splitA+0x2a>
    2192:	87 95       	ror	r24
    2194:	08 95       	ret
    2196:	12 16       	cp	r1, r18
    2198:	13 06       	cpc	r1, r19
    219a:	14 06       	cpc	r1, r20
    219c:	55 1f       	adc	r21, r21
    219e:	f2 cf       	rjmp	.-28     	; 0x2184 <__fp_split3+0xe>
    21a0:	46 95       	lsr	r20
    21a2:	f1 df       	rcall	.-30     	; 0x2186 <__fp_splitA>
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <__fp_splitA+0x30>
    21a6:	16 16       	cp	r1, r22
    21a8:	17 06       	cpc	r1, r23
    21aa:	18 06       	cpc	r1, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	f1 cf       	rjmp	.-30     	; 0x2192 <__fp_splitA+0xc>
    21b0:	86 95       	lsr	r24
    21b2:	71 05       	cpc	r23, r1
    21b4:	61 05       	cpc	r22, r1
    21b6:	08 94       	sec
    21b8:	08 95       	ret

000021ba <__fp_zero>:
    21ba:	e8 94       	clt

000021bc <__fp_szero>:
    21bc:	bb 27       	eor	r27, r27
    21be:	66 27       	eor	r22, r22
    21c0:	77 27       	eor	r23, r23
    21c2:	cb 01       	movw	r24, r22
    21c4:	97 f9       	bld	r25, 7
    21c6:	08 95       	ret

000021c8 <vfprintf>:
    21c8:	2f 92       	push	r2
    21ca:	3f 92       	push	r3
    21cc:	4f 92       	push	r4
    21ce:	5f 92       	push	r5
    21d0:	6f 92       	push	r6
    21d2:	7f 92       	push	r7
    21d4:	8f 92       	push	r8
    21d6:	9f 92       	push	r9
    21d8:	af 92       	push	r10
    21da:	bf 92       	push	r11
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	63 97       	sbiw	r28, 0x13	; 19
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	7c 01       	movw	r14, r24
    21f8:	1b 01       	movw	r2, r22
    21fa:	6a 01       	movw	r12, r20
    21fc:	fc 01       	movw	r30, r24
    21fe:	16 82       	std	Z+6, r1	; 0x06
    2200:	17 82       	std	Z+7, r1	; 0x07
    2202:	83 81       	ldd	r24, Z+3	; 0x03
    2204:	81 ff       	sbrs	r24, 1
    2206:	49 c3       	rjmp	.+1682   	; 0x289a <vfprintf+0x6d2>
    2208:	be 01       	movw	r22, r28
    220a:	6f 5f       	subi	r22, 0xFF	; 255
    220c:	7f 4f       	sbci	r23, 0xFF	; 255
    220e:	4b 01       	movw	r8, r22
    2210:	f7 01       	movw	r30, r14
    2212:	93 81       	ldd	r25, Z+3	; 0x03
    2214:	f1 01       	movw	r30, r2
    2216:	93 fd       	sbrc	r25, 3
    2218:	85 91       	lpm	r24, Z+
    221a:	93 ff       	sbrs	r25, 3
    221c:	81 91       	ld	r24, Z+
    221e:	1f 01       	movw	r2, r30
    2220:	88 23       	and	r24, r24
    2222:	09 f4       	brne	.+2      	; 0x2226 <vfprintf+0x5e>
    2224:	36 c3       	rjmp	.+1644   	; 0x2892 <vfprintf+0x6ca>
    2226:	85 32       	cpi	r24, 0x25	; 37
    2228:	39 f4       	brne	.+14     	; 0x2238 <vfprintf+0x70>
    222a:	93 fd       	sbrc	r25, 3
    222c:	85 91       	lpm	r24, Z+
    222e:	93 ff       	sbrs	r25, 3
    2230:	81 91       	ld	r24, Z+
    2232:	1f 01       	movw	r2, r30
    2234:	85 32       	cpi	r24, 0x25	; 37
    2236:	31 f4       	brne	.+12     	; 0x2244 <vfprintf+0x7c>
    2238:	b7 01       	movw	r22, r14
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	f1 d4       	rcall	.+2530   	; 0x2c20 <fputc>
    223e:	56 01       	movw	r10, r12
    2240:	65 01       	movw	r12, r10
    2242:	e6 cf       	rjmp	.-52     	; 0x2210 <vfprintf+0x48>
    2244:	10 e0       	ldi	r17, 0x00	; 0
    2246:	51 2c       	mov	r5, r1
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	20 32       	cpi	r18, 0x20	; 32
    224c:	a0 f4       	brcc	.+40     	; 0x2276 <vfprintf+0xae>
    224e:	8b 32       	cpi	r24, 0x2B	; 43
    2250:	69 f0       	breq	.+26     	; 0x226c <vfprintf+0xa4>
    2252:	30 f4       	brcc	.+12     	; 0x2260 <vfprintf+0x98>
    2254:	80 32       	cpi	r24, 0x20	; 32
    2256:	59 f0       	breq	.+22     	; 0x226e <vfprintf+0xa6>
    2258:	83 32       	cpi	r24, 0x23	; 35
    225a:	69 f4       	brne	.+26     	; 0x2276 <vfprintf+0xae>
    225c:	20 61       	ori	r18, 0x10	; 16
    225e:	2c c0       	rjmp	.+88     	; 0x22b8 <vfprintf+0xf0>
    2260:	8d 32       	cpi	r24, 0x2D	; 45
    2262:	39 f0       	breq	.+14     	; 0x2272 <vfprintf+0xaa>
    2264:	80 33       	cpi	r24, 0x30	; 48
    2266:	39 f4       	brne	.+14     	; 0x2276 <vfprintf+0xae>
    2268:	21 60       	ori	r18, 0x01	; 1
    226a:	26 c0       	rjmp	.+76     	; 0x22b8 <vfprintf+0xf0>
    226c:	22 60       	ori	r18, 0x02	; 2
    226e:	24 60       	ori	r18, 0x04	; 4
    2270:	23 c0       	rjmp	.+70     	; 0x22b8 <vfprintf+0xf0>
    2272:	28 60       	ori	r18, 0x08	; 8
    2274:	21 c0       	rjmp	.+66     	; 0x22b8 <vfprintf+0xf0>
    2276:	27 fd       	sbrc	r18, 7
    2278:	27 c0       	rjmp	.+78     	; 0x22c8 <vfprintf+0x100>
    227a:	30 ed       	ldi	r19, 0xD0	; 208
    227c:	38 0f       	add	r19, r24
    227e:	3a 30       	cpi	r19, 0x0A	; 10
    2280:	78 f4       	brcc	.+30     	; 0x22a0 <vfprintf+0xd8>
    2282:	26 ff       	sbrs	r18, 6
    2284:	06 c0       	rjmp	.+12     	; 0x2292 <vfprintf+0xca>
    2286:	fa e0       	ldi	r31, 0x0A	; 10
    2288:	1f 9f       	mul	r17, r31
    228a:	30 0d       	add	r19, r0
    228c:	11 24       	eor	r1, r1
    228e:	13 2f       	mov	r17, r19
    2290:	13 c0       	rjmp	.+38     	; 0x22b8 <vfprintf+0xf0>
    2292:	6a e0       	ldi	r22, 0x0A	; 10
    2294:	56 9e       	mul	r5, r22
    2296:	30 0d       	add	r19, r0
    2298:	11 24       	eor	r1, r1
    229a:	53 2e       	mov	r5, r19
    229c:	20 62       	ori	r18, 0x20	; 32
    229e:	0c c0       	rjmp	.+24     	; 0x22b8 <vfprintf+0xf0>
    22a0:	8e 32       	cpi	r24, 0x2E	; 46
    22a2:	21 f4       	brne	.+8      	; 0x22ac <vfprintf+0xe4>
    22a4:	26 fd       	sbrc	r18, 6
    22a6:	f5 c2       	rjmp	.+1514   	; 0x2892 <vfprintf+0x6ca>
    22a8:	20 64       	ori	r18, 0x40	; 64
    22aa:	06 c0       	rjmp	.+12     	; 0x22b8 <vfprintf+0xf0>
    22ac:	8c 36       	cpi	r24, 0x6C	; 108
    22ae:	11 f4       	brne	.+4      	; 0x22b4 <vfprintf+0xec>
    22b0:	20 68       	ori	r18, 0x80	; 128
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <vfprintf+0xf0>
    22b4:	88 36       	cpi	r24, 0x68	; 104
    22b6:	41 f4       	brne	.+16     	; 0x22c8 <vfprintf+0x100>
    22b8:	f1 01       	movw	r30, r2
    22ba:	93 fd       	sbrc	r25, 3
    22bc:	85 91       	lpm	r24, Z+
    22be:	93 ff       	sbrs	r25, 3
    22c0:	81 91       	ld	r24, Z+
    22c2:	1f 01       	movw	r2, r30
    22c4:	81 11       	cpse	r24, r1
    22c6:	c1 cf       	rjmp	.-126    	; 0x224a <vfprintf+0x82>
    22c8:	9b eb       	ldi	r25, 0xBB	; 187
    22ca:	98 0f       	add	r25, r24
    22cc:	93 30       	cpi	r25, 0x03	; 3
    22ce:	18 f4       	brcc	.+6      	; 0x22d6 <vfprintf+0x10e>
    22d0:	20 61       	ori	r18, 0x10	; 16
    22d2:	80 5e       	subi	r24, 0xE0	; 224
    22d4:	06 c0       	rjmp	.+12     	; 0x22e2 <vfprintf+0x11a>
    22d6:	9b e9       	ldi	r25, 0x9B	; 155
    22d8:	98 0f       	add	r25, r24
    22da:	93 30       	cpi	r25, 0x03	; 3
    22dc:	08 f0       	brcs	.+2      	; 0x22e0 <vfprintf+0x118>
    22de:	9a c1       	rjmp	.+820    	; 0x2614 <vfprintf+0x44c>
    22e0:	2f 7e       	andi	r18, 0xEF	; 239
    22e2:	26 ff       	sbrs	r18, 6
    22e4:	16 e0       	ldi	r17, 0x06	; 6
    22e6:	2f 73       	andi	r18, 0x3F	; 63
    22e8:	72 2e       	mov	r7, r18
    22ea:	85 36       	cpi	r24, 0x65	; 101
    22ec:	21 f4       	brne	.+8      	; 0x22f6 <vfprintf+0x12e>
    22ee:	f2 2f       	mov	r31, r18
    22f0:	f0 64       	ori	r31, 0x40	; 64
    22f2:	7f 2e       	mov	r7, r31
    22f4:	08 c0       	rjmp	.+16     	; 0x2306 <vfprintf+0x13e>
    22f6:	86 36       	cpi	r24, 0x66	; 102
    22f8:	21 f4       	brne	.+8      	; 0x2302 <vfprintf+0x13a>
    22fa:	62 2f       	mov	r22, r18
    22fc:	60 68       	ori	r22, 0x80	; 128
    22fe:	76 2e       	mov	r7, r22
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <vfprintf+0x13e>
    2302:	11 11       	cpse	r17, r1
    2304:	11 50       	subi	r17, 0x01	; 1
    2306:	77 fe       	sbrs	r7, 7
    2308:	07 c0       	rjmp	.+14     	; 0x2318 <vfprintf+0x150>
    230a:	1c 33       	cpi	r17, 0x3C	; 60
    230c:	48 f4       	brcc	.+18     	; 0x2320 <vfprintf+0x158>
    230e:	44 24       	eor	r4, r4
    2310:	43 94       	inc	r4
    2312:	41 0e       	add	r4, r17
    2314:	27 e0       	ldi	r18, 0x07	; 7
    2316:	0b c0       	rjmp	.+22     	; 0x232e <vfprintf+0x166>
    2318:	18 30       	cpi	r17, 0x08	; 8
    231a:	30 f4       	brcc	.+12     	; 0x2328 <vfprintf+0x160>
    231c:	21 2f       	mov	r18, r17
    231e:	06 c0       	rjmp	.+12     	; 0x232c <vfprintf+0x164>
    2320:	27 e0       	ldi	r18, 0x07	; 7
    2322:	4c e3       	ldi	r20, 0x3C	; 60
    2324:	44 2e       	mov	r4, r20
    2326:	03 c0       	rjmp	.+6      	; 0x232e <vfprintf+0x166>
    2328:	27 e0       	ldi	r18, 0x07	; 7
    232a:	17 e0       	ldi	r17, 0x07	; 7
    232c:	41 2c       	mov	r4, r1
    232e:	56 01       	movw	r10, r12
    2330:	74 e0       	ldi	r23, 0x04	; 4
    2332:	a7 0e       	add	r10, r23
    2334:	b1 1c       	adc	r11, r1
    2336:	f6 01       	movw	r30, r12
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	04 2d       	mov	r16, r4
    2342:	a4 01       	movw	r20, r8
    2344:	7f d3       	rcall	.+1790   	; 0x2a44 <__ftoa_engine>
    2346:	6c 01       	movw	r12, r24
    2348:	09 81       	ldd	r16, Y+1	; 0x01
    234a:	00 ff       	sbrs	r16, 0
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <vfprintf+0x18a>
    234e:	03 ff       	sbrs	r16, 3
    2350:	06 c0       	rjmp	.+12     	; 0x235e <vfprintf+0x196>
    2352:	71 fc       	sbrc	r7, 1
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <vfprintf+0x19c>
    2356:	72 fc       	sbrc	r7, 2
    2358:	08 c0       	rjmp	.+16     	; 0x236a <vfprintf+0x1a2>
    235a:	61 2c       	mov	r6, r1
    235c:	08 c0       	rjmp	.+16     	; 0x236e <vfprintf+0x1a6>
    235e:	3d e2       	ldi	r19, 0x2D	; 45
    2360:	63 2e       	mov	r6, r19
    2362:	05 c0       	rjmp	.+10     	; 0x236e <vfprintf+0x1a6>
    2364:	2b e2       	ldi	r18, 0x2B	; 43
    2366:	62 2e       	mov	r6, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vfprintf+0x1a6>
    236a:	90 e2       	ldi	r25, 0x20	; 32
    236c:	69 2e       	mov	r6, r25
    236e:	80 2f       	mov	r24, r16
    2370:	8c 70       	andi	r24, 0x0C	; 12
    2372:	81 f1       	breq	.+96     	; 0x23d4 <vfprintf+0x20c>
    2374:	66 20       	and	r6, r6
    2376:	11 f0       	breq	.+4      	; 0x237c <vfprintf+0x1b4>
    2378:	84 e0       	ldi	r24, 0x04	; 4
    237a:	01 c0       	rjmp	.+2      	; 0x237e <vfprintf+0x1b6>
    237c:	83 e0       	ldi	r24, 0x03	; 3
    237e:	85 15       	cp	r24, r5
    2380:	10 f0       	brcs	.+4      	; 0x2386 <vfprintf+0x1be>
    2382:	51 2c       	mov	r5, r1
    2384:	0a c0       	rjmp	.+20     	; 0x239a <vfprintf+0x1d2>
    2386:	58 1a       	sub	r5, r24
    2388:	73 fc       	sbrc	r7, 3
    238a:	07 c0       	rjmp	.+14     	; 0x239a <vfprintf+0x1d2>
    238c:	b7 01       	movw	r22, r14
    238e:	80 e2       	ldi	r24, 0x20	; 32
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	46 d4       	rcall	.+2188   	; 0x2c20 <fputc>
    2394:	5a 94       	dec	r5
    2396:	d1 f7       	brne	.-12     	; 0x238c <vfprintf+0x1c4>
    2398:	f4 cf       	rjmp	.-24     	; 0x2382 <vfprintf+0x1ba>
    239a:	66 20       	and	r6, r6
    239c:	21 f0       	breq	.+8      	; 0x23a6 <vfprintf+0x1de>
    239e:	b7 01       	movw	r22, r14
    23a0:	86 2d       	mov	r24, r6
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	3d d4       	rcall	.+2170   	; 0x2c20 <fputc>
    23a6:	03 fd       	sbrc	r16, 3
    23a8:	03 c0       	rjmp	.+6      	; 0x23b0 <vfprintf+0x1e8>
    23aa:	08 ef       	ldi	r16, 0xF8	; 248
    23ac:	11 e0       	ldi	r17, 0x01	; 1
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <vfprintf+0x1ec>
    23b0:	04 ef       	ldi	r16, 0xF4	; 244
    23b2:	11 e0       	ldi	r17, 0x01	; 1
    23b4:	f7 2d       	mov	r31, r7
    23b6:	f0 71       	andi	r31, 0x10	; 16
    23b8:	7f 2e       	mov	r7, r31
    23ba:	f8 01       	movw	r30, r16
    23bc:	84 91       	lpm	r24, Z
    23be:	88 23       	and	r24, r24
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <vfprintf+0x1fc>
    23c2:	5e c2       	rjmp	.+1212   	; 0x2880 <vfprintf+0x6b8>
    23c4:	71 10       	cpse	r7, r1
    23c6:	80 52       	subi	r24, 0x20	; 32
    23c8:	b7 01       	movw	r22, r14
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	29 d4       	rcall	.+2130   	; 0x2c20 <fputc>
    23ce:	0f 5f       	subi	r16, 0xFF	; 255
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	f3 cf       	rjmp	.-26     	; 0x23ba <vfprintf+0x1f2>
    23d4:	77 fe       	sbrs	r7, 7
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <vfprintf+0x22e>
    23d8:	4c 0c       	add	r4, r12
    23da:	04 ff       	sbrs	r16, 4
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <vfprintf+0x21e>
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	81 33       	cpi	r24, 0x31	; 49
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <vfprintf+0x21e>
    23e4:	4a 94       	dec	r4
    23e6:	14 14       	cp	r1, r4
    23e8:	74 f5       	brge	.+92     	; 0x2446 <vfprintf+0x27e>
    23ea:	f8 e0       	ldi	r31, 0x08	; 8
    23ec:	f4 15       	cp	r31, r4
    23ee:	78 f5       	brcc	.+94     	; 0x244e <vfprintf+0x286>
    23f0:	88 e0       	ldi	r24, 0x08	; 8
    23f2:	48 2e       	mov	r4, r24
    23f4:	2c c0       	rjmp	.+88     	; 0x244e <vfprintf+0x286>
    23f6:	76 fc       	sbrc	r7, 6
    23f8:	2a c0       	rjmp	.+84     	; 0x244e <vfprintf+0x286>
    23fa:	81 2f       	mov	r24, r17
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	8c 15       	cp	r24, r12
    2400:	9d 05       	cpc	r25, r13
    2402:	9c f0       	brlt	.+38     	; 0x242a <vfprintf+0x262>
    2404:	6c ef       	ldi	r22, 0xFC	; 252
    2406:	c6 16       	cp	r12, r22
    2408:	6f ef       	ldi	r22, 0xFF	; 255
    240a:	d6 06       	cpc	r13, r22
    240c:	74 f0       	brlt	.+28     	; 0x242a <vfprintf+0x262>
    240e:	77 2d       	mov	r23, r7
    2410:	70 68       	ori	r23, 0x80	; 128
    2412:	77 2e       	mov	r7, r23
    2414:	0a c0       	rjmp	.+20     	; 0x242a <vfprintf+0x262>
    2416:	e2 e0       	ldi	r30, 0x02	; 2
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	ec 0f       	add	r30, r28
    241c:	fd 1f       	adc	r31, r29
    241e:	e1 0f       	add	r30, r17
    2420:	f1 1d       	adc	r31, r1
    2422:	80 81       	ld	r24, Z
    2424:	80 33       	cpi	r24, 0x30	; 48
    2426:	19 f4       	brne	.+6      	; 0x242e <vfprintf+0x266>
    2428:	11 50       	subi	r17, 0x01	; 1
    242a:	11 11       	cpse	r17, r1
    242c:	f4 cf       	rjmp	.-24     	; 0x2416 <vfprintf+0x24e>
    242e:	77 fe       	sbrs	r7, 7
    2430:	0e c0       	rjmp	.+28     	; 0x244e <vfprintf+0x286>
    2432:	44 24       	eor	r4, r4
    2434:	43 94       	inc	r4
    2436:	41 0e       	add	r4, r17
    2438:	81 2f       	mov	r24, r17
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	c8 16       	cp	r12, r24
    243e:	d9 06       	cpc	r13, r25
    2440:	2c f4       	brge	.+10     	; 0x244c <vfprintf+0x284>
    2442:	1c 19       	sub	r17, r12
    2444:	04 c0       	rjmp	.+8      	; 0x244e <vfprintf+0x286>
    2446:	44 24       	eor	r4, r4
    2448:	43 94       	inc	r4
    244a:	01 c0       	rjmp	.+2      	; 0x244e <vfprintf+0x286>
    244c:	10 e0       	ldi	r17, 0x00	; 0
    244e:	77 fe       	sbrs	r7, 7
    2450:	07 c0       	rjmp	.+14     	; 0x2460 <vfprintf+0x298>
    2452:	1c 14       	cp	r1, r12
    2454:	1d 04       	cpc	r1, r13
    2456:	3c f4       	brge	.+14     	; 0x2466 <vfprintf+0x29e>
    2458:	96 01       	movw	r18, r12
    245a:	2f 5f       	subi	r18, 0xFF	; 255
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	05 c0       	rjmp	.+10     	; 0x246a <vfprintf+0x2a2>
    2460:	25 e0       	ldi	r18, 0x05	; 5
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	02 c0       	rjmp	.+4      	; 0x246a <vfprintf+0x2a2>
    2466:	21 e0       	ldi	r18, 0x01	; 1
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	66 20       	and	r6, r6
    246c:	11 f0       	breq	.+4      	; 0x2472 <vfprintf+0x2aa>
    246e:	2f 5f       	subi	r18, 0xFF	; 255
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	11 23       	and	r17, r17
    2474:	31 f0       	breq	.+12     	; 0x2482 <vfprintf+0x2ba>
    2476:	41 2f       	mov	r20, r17
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	4f 5f       	subi	r20, 0xFF	; 255
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	24 0f       	add	r18, r20
    2480:	35 1f       	adc	r19, r21
    2482:	45 2d       	mov	r20, r5
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	24 17       	cp	r18, r20
    2488:	35 07       	cpc	r19, r21
    248a:	14 f4       	brge	.+4      	; 0x2490 <vfprintf+0x2c8>
    248c:	52 1a       	sub	r5, r18
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <vfprintf+0x2ca>
    2490:	51 2c       	mov	r5, r1
    2492:	87 2d       	mov	r24, r7
    2494:	89 70       	andi	r24, 0x09	; 9
    2496:	41 f4       	brne	.+16     	; 0x24a8 <vfprintf+0x2e0>
    2498:	55 20       	and	r5, r5
    249a:	31 f0       	breq	.+12     	; 0x24a8 <vfprintf+0x2e0>
    249c:	b7 01       	movw	r22, r14
    249e:	80 e2       	ldi	r24, 0x20	; 32
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	be d3       	rcall	.+1916   	; 0x2c20 <fputc>
    24a4:	5a 94       	dec	r5
    24a6:	f8 cf       	rjmp	.-16     	; 0x2498 <vfprintf+0x2d0>
    24a8:	66 20       	and	r6, r6
    24aa:	21 f0       	breq	.+8      	; 0x24b4 <vfprintf+0x2ec>
    24ac:	b7 01       	movw	r22, r14
    24ae:	86 2d       	mov	r24, r6
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	b6 d3       	rcall	.+1900   	; 0x2c20 <fputc>
    24b4:	73 fc       	sbrc	r7, 3
    24b6:	08 c0       	rjmp	.+16     	; 0x24c8 <vfprintf+0x300>
    24b8:	55 20       	and	r5, r5
    24ba:	31 f0       	breq	.+12     	; 0x24c8 <vfprintf+0x300>
    24bc:	b7 01       	movw	r22, r14
    24be:	80 e3       	ldi	r24, 0x30	; 48
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	ae d3       	rcall	.+1884   	; 0x2c20 <fputc>
    24c4:	5a 94       	dec	r5
    24c6:	f8 cf       	rjmp	.-16     	; 0x24b8 <vfprintf+0x2f0>
    24c8:	77 fe       	sbrs	r7, 7
    24ca:	5d c0       	rjmp	.+186    	; 0x2586 <vfprintf+0x3be>
    24cc:	9c 2d       	mov	r25, r12
    24ce:	8d 2d       	mov	r24, r13
    24d0:	d7 fe       	sbrs	r13, 7
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0x310>
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	69 2e       	mov	r6, r25
    24da:	78 2e       	mov	r7, r24
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	c6 01       	movw	r24, r12
    24e2:	84 19       	sub	r24, r4
    24e4:	91 09       	sbc	r25, r1
    24e6:	8c 87       	std	Y+12, r24	; 0x0c
    24e8:	9d 87       	std	Y+13, r25	; 0x0d
    24ea:	96 01       	movw	r18, r12
    24ec:	26 19       	sub	r18, r6
    24ee:	37 09       	sbc	r19, r7
    24f0:	28 0d       	add	r18, r8
    24f2:	39 1d       	adc	r19, r9
    24f4:	81 2f       	mov	r24, r17
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	ee 27       	eor	r30, r30
    24fa:	ff 27       	eor	r31, r31
    24fc:	e8 1b       	sub	r30, r24
    24fe:	f9 0b       	sbc	r31, r25
    2500:	ee 87       	std	Y+14, r30	; 0x0e
    2502:	ff 87       	std	Y+15, r31	; 0x0f
    2504:	ff ef       	ldi	r31, 0xFF	; 255
    2506:	6f 16       	cp	r6, r31
    2508:	7f 06       	cpc	r7, r31
    250a:	61 f4       	brne	.+24     	; 0x2524 <vfprintf+0x35c>
    250c:	b7 01       	movw	r22, r14
    250e:	8e e2       	ldi	r24, 0x2E	; 46
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	2b 8b       	std	Y+19, r18	; 0x13
    2514:	3a 8b       	std	Y+18, r19	; 0x12
    2516:	48 8b       	std	Y+16, r20	; 0x10
    2518:	59 8b       	std	Y+17, r21	; 0x11
    251a:	82 d3       	rcall	.+1796   	; 0x2c20 <fputc>
    251c:	59 89       	ldd	r21, Y+17	; 0x11
    251e:	48 89       	ldd	r20, Y+16	; 0x10
    2520:	3a 89       	ldd	r19, Y+18	; 0x12
    2522:	2b 89       	ldd	r18, Y+19	; 0x13
    2524:	c6 14       	cp	r12, r6
    2526:	d7 04       	cpc	r13, r7
    2528:	54 f0       	brlt	.+20     	; 0x253e <vfprintf+0x376>
    252a:	6c 85       	ldd	r22, Y+12	; 0x0c
    252c:	7d 85       	ldd	r23, Y+13	; 0x0d
    252e:	66 15       	cp	r22, r6
    2530:	77 05       	cpc	r23, r7
    2532:	2c f4       	brge	.+10     	; 0x253e <vfprintf+0x376>
    2534:	f9 01       	movw	r30, r18
    2536:	e4 0f       	add	r30, r20
    2538:	f5 1f       	adc	r31, r21
    253a:	81 81       	ldd	r24, Z+1	; 0x01
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <vfprintf+0x378>
    253e:	80 e3       	ldi	r24, 0x30	; 48
    2540:	71 e0       	ldi	r23, 0x01	; 1
    2542:	67 1a       	sub	r6, r23
    2544:	71 08       	sbc	r7, r1
    2546:	4f 5f       	subi	r20, 0xFF	; 255
    2548:	5f 4f       	sbci	r21, 0xFF	; 255
    254a:	ee 85       	ldd	r30, Y+14	; 0x0e
    254c:	ff 85       	ldd	r31, Y+15	; 0x0f
    254e:	6e 16       	cp	r6, r30
    2550:	7f 06       	cpc	r7, r31
    2552:	64 f0       	brlt	.+24     	; 0x256c <vfprintf+0x3a4>
    2554:	b7 01       	movw	r22, r14
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	2b 8b       	std	Y+19, r18	; 0x13
    255a:	3a 8b       	std	Y+18, r19	; 0x12
    255c:	48 8b       	std	Y+16, r20	; 0x10
    255e:	59 8b       	std	Y+17, r21	; 0x11
    2560:	5f d3       	rcall	.+1726   	; 0x2c20 <fputc>
    2562:	2b 89       	ldd	r18, Y+19	; 0x13
    2564:	3a 89       	ldd	r19, Y+18	; 0x12
    2566:	48 89       	ldd	r20, Y+16	; 0x10
    2568:	59 89       	ldd	r21, Y+17	; 0x11
    256a:	cc cf       	rjmp	.-104    	; 0x2504 <vfprintf+0x33c>
    256c:	6c 14       	cp	r6, r12
    256e:	7d 04       	cpc	r7, r13
    2570:	39 f4       	brne	.+14     	; 0x2580 <vfprintf+0x3b8>
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	96 33       	cpi	r25, 0x36	; 54
    2576:	18 f4       	brcc	.+6      	; 0x257e <vfprintf+0x3b6>
    2578:	95 33       	cpi	r25, 0x35	; 53
    257a:	11 f4       	brne	.+4      	; 0x2580 <vfprintf+0x3b8>
    257c:	04 ff       	sbrs	r16, 4
    257e:	81 e3       	ldi	r24, 0x31	; 49
    2580:	b7 01       	movw	r22, r14
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	45 c0       	rjmp	.+138    	; 0x2610 <vfprintf+0x448>
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	81 33       	cpi	r24, 0x31	; 49
    258a:	09 f0       	breq	.+2      	; 0x258e <vfprintf+0x3c6>
    258c:	0f 7e       	andi	r16, 0xEF	; 239
    258e:	b7 01       	movw	r22, r14
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	46 d3       	rcall	.+1676   	; 0x2c20 <fputc>
    2594:	11 11       	cpse	r17, r1
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <vfprintf+0x3da>
    2598:	74 fe       	sbrs	r7, 4
    259a:	16 c0       	rjmp	.+44     	; 0x25c8 <vfprintf+0x400>
    259c:	85 e4       	ldi	r24, 0x45	; 69
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	15 c0       	rjmp	.+42     	; 0x25cc <vfprintf+0x404>
    25a2:	b7 01       	movw	r22, r14
    25a4:	8e e2       	ldi	r24, 0x2E	; 46
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	3b d3       	rcall	.+1654   	; 0x2c20 <fputc>
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	66 24       	eor	r6, r6
    25ae:	63 94       	inc	r6
    25b0:	68 0e       	add	r6, r24
    25b2:	f4 01       	movw	r30, r8
    25b4:	e8 0f       	add	r30, r24
    25b6:	f1 1d       	adc	r31, r1
    25b8:	80 81       	ld	r24, Z
    25ba:	b7 01       	movw	r22, r14
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	30 d3       	rcall	.+1632   	; 0x2c20 <fputc>
    25c0:	11 50       	subi	r17, 0x01	; 1
    25c2:	51 f3       	breq	.-44     	; 0x2598 <vfprintf+0x3d0>
    25c4:	86 2d       	mov	r24, r6
    25c6:	f2 cf       	rjmp	.-28     	; 0x25ac <vfprintf+0x3e4>
    25c8:	85 e6       	ldi	r24, 0x65	; 101
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	b7 01       	movw	r22, r14
    25ce:	28 d3       	rcall	.+1616   	; 0x2c20 <fputc>
    25d0:	d7 fc       	sbrc	r13, 7
    25d2:	05 c0       	rjmp	.+10     	; 0x25de <vfprintf+0x416>
    25d4:	c1 14       	cp	r12, r1
    25d6:	d1 04       	cpc	r13, r1
    25d8:	39 f4       	brne	.+14     	; 0x25e8 <vfprintf+0x420>
    25da:	04 ff       	sbrs	r16, 4
    25dc:	05 c0       	rjmp	.+10     	; 0x25e8 <vfprintf+0x420>
    25de:	d1 94       	neg	r13
    25e0:	c1 94       	neg	r12
    25e2:	d1 08       	sbc	r13, r1
    25e4:	8d e2       	ldi	r24, 0x2D	; 45
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <vfprintf+0x422>
    25e8:	8b e2       	ldi	r24, 0x2B	; 43
    25ea:	b7 01       	movw	r22, r14
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	18 d3       	rcall	.+1584   	; 0x2c20 <fputc>
    25f0:	80 e3       	ldi	r24, 0x30	; 48
    25f2:	6a e0       	ldi	r22, 0x0A	; 10
    25f4:	c6 16       	cp	r12, r22
    25f6:	d1 04       	cpc	r13, r1
    25f8:	2c f0       	brlt	.+10     	; 0x2604 <vfprintf+0x43c>
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	fa e0       	ldi	r31, 0x0A	; 10
    25fe:	cf 1a       	sub	r12, r31
    2600:	d1 08       	sbc	r13, r1
    2602:	f7 cf       	rjmp	.-18     	; 0x25f2 <vfprintf+0x42a>
    2604:	b7 01       	movw	r22, r14
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0b d3       	rcall	.+1558   	; 0x2c20 <fputc>
    260a:	b7 01       	movw	r22, r14
    260c:	c6 01       	movw	r24, r12
    260e:	c0 96       	adiw	r24, 0x30	; 48
    2610:	07 d3       	rcall	.+1550   	; 0x2c20 <fputc>
    2612:	36 c1       	rjmp	.+620    	; 0x2880 <vfprintf+0x6b8>
    2614:	83 36       	cpi	r24, 0x63	; 99
    2616:	31 f0       	breq	.+12     	; 0x2624 <vfprintf+0x45c>
    2618:	83 37       	cpi	r24, 0x73	; 115
    261a:	79 f0       	breq	.+30     	; 0x263a <vfprintf+0x472>
    261c:	83 35       	cpi	r24, 0x53	; 83
    261e:	09 f0       	breq	.+2      	; 0x2622 <vfprintf+0x45a>
    2620:	54 c0       	rjmp	.+168    	; 0x26ca <vfprintf+0x502>
    2622:	20 c0       	rjmp	.+64     	; 0x2664 <vfprintf+0x49c>
    2624:	56 01       	movw	r10, r12
    2626:	72 e0       	ldi	r23, 0x02	; 2
    2628:	a7 0e       	add	r10, r23
    262a:	b1 1c       	adc	r11, r1
    262c:	f6 01       	movw	r30, r12
    262e:	80 81       	ld	r24, Z
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	01 e0       	ldi	r16, 0x01	; 1
    2634:	10 e0       	ldi	r17, 0x00	; 0
    2636:	64 01       	movw	r12, r8
    2638:	13 c0       	rjmp	.+38     	; 0x2660 <vfprintf+0x498>
    263a:	56 01       	movw	r10, r12
    263c:	f2 e0       	ldi	r31, 0x02	; 2
    263e:	af 0e       	add	r10, r31
    2640:	b1 1c       	adc	r11, r1
    2642:	f6 01       	movw	r30, r12
    2644:	c0 80       	ld	r12, Z
    2646:	d1 80       	ldd	r13, Z+1	; 0x01
    2648:	26 ff       	sbrs	r18, 6
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <vfprintf+0x48a>
    264c:	61 2f       	mov	r22, r17
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <vfprintf+0x48e>
    2652:	6f ef       	ldi	r22, 0xFF	; 255
    2654:	7f ef       	ldi	r23, 0xFF	; 255
    2656:	c6 01       	movw	r24, r12
    2658:	2b 8b       	std	Y+19, r18	; 0x13
    265a:	d7 d2       	rcall	.+1454   	; 0x2c0a <strnlen>
    265c:	8c 01       	movw	r16, r24
    265e:	2b 89       	ldd	r18, Y+19	; 0x13
    2660:	2f 77       	andi	r18, 0x7F	; 127
    2662:	14 c0       	rjmp	.+40     	; 0x268c <vfprintf+0x4c4>
    2664:	56 01       	movw	r10, r12
    2666:	f2 e0       	ldi	r31, 0x02	; 2
    2668:	af 0e       	add	r10, r31
    266a:	b1 1c       	adc	r11, r1
    266c:	f6 01       	movw	r30, r12
    266e:	c0 80       	ld	r12, Z
    2670:	d1 80       	ldd	r13, Z+1	; 0x01
    2672:	26 ff       	sbrs	r18, 6
    2674:	03 c0       	rjmp	.+6      	; 0x267c <vfprintf+0x4b4>
    2676:	61 2f       	mov	r22, r17
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <vfprintf+0x4b8>
    267c:	6f ef       	ldi	r22, 0xFF	; 255
    267e:	7f ef       	ldi	r23, 0xFF	; 255
    2680:	c6 01       	movw	r24, r12
    2682:	2b 8b       	std	Y+19, r18	; 0x13
    2684:	b7 d2       	rcall	.+1390   	; 0x2bf4 <strnlen_P>
    2686:	8c 01       	movw	r16, r24
    2688:	2b 89       	ldd	r18, Y+19	; 0x13
    268a:	20 68       	ori	r18, 0x80	; 128
    268c:	72 2e       	mov	r7, r18
    268e:	23 fd       	sbrc	r18, 3
    2690:	18 c0       	rjmp	.+48     	; 0x26c2 <vfprintf+0x4fa>
    2692:	85 2d       	mov	r24, r5
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	08 17       	cp	r16, r24
    2698:	19 07       	cpc	r17, r25
    269a:	98 f4       	brcc	.+38     	; 0x26c2 <vfprintf+0x4fa>
    269c:	b7 01       	movw	r22, r14
    269e:	80 e2       	ldi	r24, 0x20	; 32
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	be d2       	rcall	.+1404   	; 0x2c20 <fputc>
    26a4:	5a 94       	dec	r5
    26a6:	f5 cf       	rjmp	.-22     	; 0x2692 <vfprintf+0x4ca>
    26a8:	f6 01       	movw	r30, r12
    26aa:	77 fc       	sbrc	r7, 7
    26ac:	85 91       	lpm	r24, Z+
    26ae:	77 fe       	sbrs	r7, 7
    26b0:	81 91       	ld	r24, Z+
    26b2:	6f 01       	movw	r12, r30
    26b4:	b7 01       	movw	r22, r14
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	b3 d2       	rcall	.+1382   	; 0x2c20 <fputc>
    26ba:	51 10       	cpse	r5, r1
    26bc:	5a 94       	dec	r5
    26be:	01 50       	subi	r16, 0x01	; 1
    26c0:	11 09       	sbc	r17, r1
    26c2:	01 15       	cp	r16, r1
    26c4:	11 05       	cpc	r17, r1
    26c6:	81 f7       	brne	.-32     	; 0x26a8 <vfprintf+0x4e0>
    26c8:	db c0       	rjmp	.+438    	; 0x2880 <vfprintf+0x6b8>
    26ca:	84 36       	cpi	r24, 0x64	; 100
    26cc:	11 f0       	breq	.+4      	; 0x26d2 <vfprintf+0x50a>
    26ce:	89 36       	cpi	r24, 0x69	; 105
    26d0:	49 f5       	brne	.+82     	; 0x2724 <vfprintf+0x55c>
    26d2:	56 01       	movw	r10, r12
    26d4:	27 ff       	sbrs	r18, 7
    26d6:	09 c0       	rjmp	.+18     	; 0x26ea <vfprintf+0x522>
    26d8:	f4 e0       	ldi	r31, 0x04	; 4
    26da:	af 0e       	add	r10, r31
    26dc:	b1 1c       	adc	r11, r1
    26de:	f6 01       	movw	r30, r12
    26e0:	60 81       	ld	r22, Z
    26e2:	71 81       	ldd	r23, Z+1	; 0x01
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	0a c0       	rjmp	.+20     	; 0x26fe <vfprintf+0x536>
    26ea:	f2 e0       	ldi	r31, 0x02	; 2
    26ec:	af 0e       	add	r10, r31
    26ee:	b1 1c       	adc	r11, r1
    26f0:	f6 01       	movw	r30, r12
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	88 27       	eor	r24, r24
    26f8:	77 fd       	sbrc	r23, 7
    26fa:	80 95       	com	r24
    26fc:	98 2f       	mov	r25, r24
    26fe:	02 2f       	mov	r16, r18
    2700:	0f 76       	andi	r16, 0x6F	; 111
    2702:	97 ff       	sbrs	r25, 7
    2704:	08 c0       	rjmp	.+16     	; 0x2716 <vfprintf+0x54e>
    2706:	90 95       	com	r25
    2708:	80 95       	com	r24
    270a:	70 95       	com	r23
    270c:	61 95       	neg	r22
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	8f 4f       	sbci	r24, 0xFF	; 255
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	00 68       	ori	r16, 0x80	; 128
    2716:	2a e0       	ldi	r18, 0x0A	; 10
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	a4 01       	movw	r20, r8
    271c:	db d2       	rcall	.+1462   	; 0x2cd4 <__ultoa_invert>
    271e:	c8 2e       	mov	r12, r24
    2720:	c8 18       	sub	r12, r8
    2722:	3d c0       	rjmp	.+122    	; 0x279e <vfprintf+0x5d6>
    2724:	02 2f       	mov	r16, r18
    2726:	85 37       	cpi	r24, 0x75	; 117
    2728:	21 f4       	brne	.+8      	; 0x2732 <vfprintf+0x56a>
    272a:	0f 7e       	andi	r16, 0xEF	; 239
    272c:	2a e0       	ldi	r18, 0x0A	; 10
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	1d c0       	rjmp	.+58     	; 0x276c <vfprintf+0x5a4>
    2732:	09 7f       	andi	r16, 0xF9	; 249
    2734:	8f 36       	cpi	r24, 0x6F	; 111
    2736:	91 f0       	breq	.+36     	; 0x275c <vfprintf+0x594>
    2738:	18 f4       	brcc	.+6      	; 0x2740 <vfprintf+0x578>
    273a:	88 35       	cpi	r24, 0x58	; 88
    273c:	59 f0       	breq	.+22     	; 0x2754 <vfprintf+0x58c>
    273e:	a9 c0       	rjmp	.+338    	; 0x2892 <vfprintf+0x6ca>
    2740:	80 37       	cpi	r24, 0x70	; 112
    2742:	19 f0       	breq	.+6      	; 0x274a <vfprintf+0x582>
    2744:	88 37       	cpi	r24, 0x78	; 120
    2746:	11 f0       	breq	.+4      	; 0x274c <vfprintf+0x584>
    2748:	a4 c0       	rjmp	.+328    	; 0x2892 <vfprintf+0x6ca>
    274a:	00 61       	ori	r16, 0x10	; 16
    274c:	04 ff       	sbrs	r16, 4
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <vfprintf+0x59a>
    2750:	04 60       	ori	r16, 0x04	; 4
    2752:	07 c0       	rjmp	.+14     	; 0x2762 <vfprintf+0x59a>
    2754:	24 ff       	sbrs	r18, 4
    2756:	08 c0       	rjmp	.+16     	; 0x2768 <vfprintf+0x5a0>
    2758:	06 60       	ori	r16, 0x06	; 6
    275a:	06 c0       	rjmp	.+12     	; 0x2768 <vfprintf+0x5a0>
    275c:	28 e0       	ldi	r18, 0x08	; 8
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	05 c0       	rjmp	.+10     	; 0x276c <vfprintf+0x5a4>
    2762:	20 e1       	ldi	r18, 0x10	; 16
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	02 c0       	rjmp	.+4      	; 0x276c <vfprintf+0x5a4>
    2768:	20 e1       	ldi	r18, 0x10	; 16
    276a:	32 e0       	ldi	r19, 0x02	; 2
    276c:	56 01       	movw	r10, r12
    276e:	07 ff       	sbrs	r16, 7
    2770:	09 c0       	rjmp	.+18     	; 0x2784 <vfprintf+0x5bc>
    2772:	f4 e0       	ldi	r31, 0x04	; 4
    2774:	af 0e       	add	r10, r31
    2776:	b1 1c       	adc	r11, r1
    2778:	f6 01       	movw	r30, r12
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	93 81       	ldd	r25, Z+3	; 0x03
    2782:	08 c0       	rjmp	.+16     	; 0x2794 <vfprintf+0x5cc>
    2784:	f2 e0       	ldi	r31, 0x02	; 2
    2786:	af 0e       	add	r10, r31
    2788:	b1 1c       	adc	r11, r1
    278a:	f6 01       	movw	r30, r12
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	a4 01       	movw	r20, r8
    2796:	9e d2       	rcall	.+1340   	; 0x2cd4 <__ultoa_invert>
    2798:	c8 2e       	mov	r12, r24
    279a:	c8 18       	sub	r12, r8
    279c:	0f 77       	andi	r16, 0x7F	; 127
    279e:	06 ff       	sbrs	r16, 6
    27a0:	0b c0       	rjmp	.+22     	; 0x27b8 <vfprintf+0x5f0>
    27a2:	20 2f       	mov	r18, r16
    27a4:	2e 7f       	andi	r18, 0xFE	; 254
    27a6:	c1 16       	cp	r12, r17
    27a8:	50 f4       	brcc	.+20     	; 0x27be <vfprintf+0x5f6>
    27aa:	04 ff       	sbrs	r16, 4
    27ac:	0a c0       	rjmp	.+20     	; 0x27c2 <vfprintf+0x5fa>
    27ae:	02 fd       	sbrc	r16, 2
    27b0:	08 c0       	rjmp	.+16     	; 0x27c2 <vfprintf+0x5fa>
    27b2:	20 2f       	mov	r18, r16
    27b4:	2e 7e       	andi	r18, 0xEE	; 238
    27b6:	05 c0       	rjmp	.+10     	; 0x27c2 <vfprintf+0x5fa>
    27b8:	dc 2c       	mov	r13, r12
    27ba:	20 2f       	mov	r18, r16
    27bc:	03 c0       	rjmp	.+6      	; 0x27c4 <vfprintf+0x5fc>
    27be:	dc 2c       	mov	r13, r12
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <vfprintf+0x5fc>
    27c2:	d1 2e       	mov	r13, r17
    27c4:	24 ff       	sbrs	r18, 4
    27c6:	0d c0       	rjmp	.+26     	; 0x27e2 <vfprintf+0x61a>
    27c8:	fe 01       	movw	r30, r28
    27ca:	ec 0d       	add	r30, r12
    27cc:	f1 1d       	adc	r31, r1
    27ce:	80 81       	ld	r24, Z
    27d0:	80 33       	cpi	r24, 0x30	; 48
    27d2:	11 f4       	brne	.+4      	; 0x27d8 <vfprintf+0x610>
    27d4:	29 7e       	andi	r18, 0xE9	; 233
    27d6:	09 c0       	rjmp	.+18     	; 0x27ea <vfprintf+0x622>
    27d8:	22 ff       	sbrs	r18, 2
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <vfprintf+0x620>
    27dc:	d3 94       	inc	r13
    27de:	d3 94       	inc	r13
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <vfprintf+0x622>
    27e2:	82 2f       	mov	r24, r18
    27e4:	86 78       	andi	r24, 0x86	; 134
    27e6:	09 f0       	breq	.+2      	; 0x27ea <vfprintf+0x622>
    27e8:	d3 94       	inc	r13
    27ea:	23 fd       	sbrc	r18, 3
    27ec:	12 c0       	rjmp	.+36     	; 0x2812 <vfprintf+0x64a>
    27ee:	20 ff       	sbrs	r18, 0
    27f0:	06 c0       	rjmp	.+12     	; 0x27fe <vfprintf+0x636>
    27f2:	1c 2d       	mov	r17, r12
    27f4:	d5 14       	cp	r13, r5
    27f6:	18 f4       	brcc	.+6      	; 0x27fe <vfprintf+0x636>
    27f8:	15 0d       	add	r17, r5
    27fa:	1d 19       	sub	r17, r13
    27fc:	d5 2c       	mov	r13, r5
    27fe:	d5 14       	cp	r13, r5
    2800:	60 f4       	brcc	.+24     	; 0x281a <vfprintf+0x652>
    2802:	b7 01       	movw	r22, r14
    2804:	80 e2       	ldi	r24, 0x20	; 32
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	2b 8b       	std	Y+19, r18	; 0x13
    280a:	0a d2       	rcall	.+1044   	; 0x2c20 <fputc>
    280c:	d3 94       	inc	r13
    280e:	2b 89       	ldd	r18, Y+19	; 0x13
    2810:	f6 cf       	rjmp	.-20     	; 0x27fe <vfprintf+0x636>
    2812:	d5 14       	cp	r13, r5
    2814:	10 f4       	brcc	.+4      	; 0x281a <vfprintf+0x652>
    2816:	5d 18       	sub	r5, r13
    2818:	01 c0       	rjmp	.+2      	; 0x281c <vfprintf+0x654>
    281a:	51 2c       	mov	r5, r1
    281c:	24 ff       	sbrs	r18, 4
    281e:	11 c0       	rjmp	.+34     	; 0x2842 <vfprintf+0x67a>
    2820:	b7 01       	movw	r22, r14
    2822:	80 e3       	ldi	r24, 0x30	; 48
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	2b 8b       	std	Y+19, r18	; 0x13
    2828:	fb d1       	rcall	.+1014   	; 0x2c20 <fputc>
    282a:	2b 89       	ldd	r18, Y+19	; 0x13
    282c:	22 ff       	sbrs	r18, 2
    282e:	16 c0       	rjmp	.+44     	; 0x285c <vfprintf+0x694>
    2830:	21 ff       	sbrs	r18, 1
    2832:	03 c0       	rjmp	.+6      	; 0x283a <vfprintf+0x672>
    2834:	88 e5       	ldi	r24, 0x58	; 88
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 c0       	rjmp	.+4      	; 0x283e <vfprintf+0x676>
    283a:	88 e7       	ldi	r24, 0x78	; 120
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	b7 01       	movw	r22, r14
    2840:	0c c0       	rjmp	.+24     	; 0x285a <vfprintf+0x692>
    2842:	82 2f       	mov	r24, r18
    2844:	86 78       	andi	r24, 0x86	; 134
    2846:	51 f0       	breq	.+20     	; 0x285c <vfprintf+0x694>
    2848:	21 fd       	sbrc	r18, 1
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <vfprintf+0x688>
    284c:	80 e2       	ldi	r24, 0x20	; 32
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <vfprintf+0x68a>
    2850:	8b e2       	ldi	r24, 0x2B	; 43
    2852:	27 fd       	sbrc	r18, 7
    2854:	8d e2       	ldi	r24, 0x2D	; 45
    2856:	b7 01       	movw	r22, r14
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	e2 d1       	rcall	.+964    	; 0x2c20 <fputc>
    285c:	c1 16       	cp	r12, r17
    285e:	30 f4       	brcc	.+12     	; 0x286c <vfprintf+0x6a4>
    2860:	b7 01       	movw	r22, r14
    2862:	80 e3       	ldi	r24, 0x30	; 48
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	dc d1       	rcall	.+952    	; 0x2c20 <fputc>
    2868:	11 50       	subi	r17, 0x01	; 1
    286a:	f8 cf       	rjmp	.-16     	; 0x285c <vfprintf+0x694>
    286c:	ca 94       	dec	r12
    286e:	f4 01       	movw	r30, r8
    2870:	ec 0d       	add	r30, r12
    2872:	f1 1d       	adc	r31, r1
    2874:	80 81       	ld	r24, Z
    2876:	b7 01       	movw	r22, r14
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	d2 d1       	rcall	.+932    	; 0x2c20 <fputc>
    287c:	c1 10       	cpse	r12, r1
    287e:	f6 cf       	rjmp	.-20     	; 0x286c <vfprintf+0x6a4>
    2880:	55 20       	and	r5, r5
    2882:	09 f4       	brne	.+2      	; 0x2886 <vfprintf+0x6be>
    2884:	dd cc       	rjmp	.-1606   	; 0x2240 <vfprintf+0x78>
    2886:	b7 01       	movw	r22, r14
    2888:	80 e2       	ldi	r24, 0x20	; 32
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	c9 d1       	rcall	.+914    	; 0x2c20 <fputc>
    288e:	5a 94       	dec	r5
    2890:	f7 cf       	rjmp	.-18     	; 0x2880 <vfprintf+0x6b8>
    2892:	f7 01       	movw	r30, r14
    2894:	86 81       	ldd	r24, Z+6	; 0x06
    2896:	97 81       	ldd	r25, Z+7	; 0x07
    2898:	02 c0       	rjmp	.+4      	; 0x289e <vfprintf+0x6d6>
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	9f ef       	ldi	r25, 0xFF	; 255
    289e:	63 96       	adiw	r28, 0x13	; 19
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	df 91       	pop	r29
    28a6:	cf 91       	pop	r28
    28a8:	1f 91       	pop	r17
    28aa:	0f 91       	pop	r16
    28ac:	ff 90       	pop	r15
    28ae:	ef 90       	pop	r14
    28b0:	df 90       	pop	r13
    28b2:	cf 90       	pop	r12
    28b4:	bf 90       	pop	r11
    28b6:	af 90       	pop	r10
    28b8:	9f 90       	pop	r9
    28ba:	8f 90       	pop	r8
    28bc:	7f 90       	pop	r7
    28be:	6f 90       	pop	r6
    28c0:	5f 90       	pop	r5
    28c2:	4f 90       	pop	r4
    28c4:	3f 90       	pop	r3
    28c6:	2f 90       	pop	r2
    28c8:	08 95       	ret

000028ca <__mulsi3>:
    28ca:	db 01       	movw	r26, r22
    28cc:	8f 93       	push	r24
    28ce:	9f 93       	push	r25
    28d0:	58 d0       	rcall	.+176    	; 0x2982 <__muluhisi3>
    28d2:	bf 91       	pop	r27
    28d4:	af 91       	pop	r26
    28d6:	a2 9f       	mul	r26, r18
    28d8:	80 0d       	add	r24, r0
    28da:	91 1d       	adc	r25, r1
    28dc:	a3 9f       	mul	r26, r19
    28de:	90 0d       	add	r25, r0
    28e0:	b2 9f       	mul	r27, r18
    28e2:	90 0d       	add	r25, r0
    28e4:	11 24       	eor	r1, r1
    28e6:	08 95       	ret

000028e8 <__udivmodsi4>:
    28e8:	a1 e2       	ldi	r26, 0x21	; 33
    28ea:	1a 2e       	mov	r1, r26
    28ec:	aa 1b       	sub	r26, r26
    28ee:	bb 1b       	sub	r27, r27
    28f0:	fd 01       	movw	r30, r26
    28f2:	0d c0       	rjmp	.+26     	; 0x290e <__udivmodsi4_ep>

000028f4 <__udivmodsi4_loop>:
    28f4:	aa 1f       	adc	r26, r26
    28f6:	bb 1f       	adc	r27, r27
    28f8:	ee 1f       	adc	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	a2 17       	cp	r26, r18
    28fe:	b3 07       	cpc	r27, r19
    2900:	e4 07       	cpc	r30, r20
    2902:	f5 07       	cpc	r31, r21
    2904:	20 f0       	brcs	.+8      	; 0x290e <__udivmodsi4_ep>
    2906:	a2 1b       	sub	r26, r18
    2908:	b3 0b       	sbc	r27, r19
    290a:	e4 0b       	sbc	r30, r20
    290c:	f5 0b       	sbc	r31, r21

0000290e <__udivmodsi4_ep>:
    290e:	66 1f       	adc	r22, r22
    2910:	77 1f       	adc	r23, r23
    2912:	88 1f       	adc	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	1a 94       	dec	r1
    2918:	69 f7       	brne	.-38     	; 0x28f4 <__udivmodsi4_loop>
    291a:	60 95       	com	r22
    291c:	70 95       	com	r23
    291e:	80 95       	com	r24
    2920:	90 95       	com	r25
    2922:	9b 01       	movw	r18, r22
    2924:	ac 01       	movw	r20, r24
    2926:	bd 01       	movw	r22, r26
    2928:	cf 01       	movw	r24, r30
    292a:	08 95       	ret

0000292c <__divmodsi4>:
    292c:	05 2e       	mov	r0, r21
    292e:	97 fb       	bst	r25, 7
    2930:	16 f4       	brtc	.+4      	; 0x2936 <__divmodsi4+0xa>
    2932:	00 94       	com	r0
    2934:	0f d0       	rcall	.+30     	; 0x2954 <__negsi2>
    2936:	57 fd       	sbrc	r21, 7
    2938:	05 d0       	rcall	.+10     	; 0x2944 <__divmodsi4_neg2>
    293a:	d6 df       	rcall	.-84     	; 0x28e8 <__udivmodsi4>
    293c:	07 fc       	sbrc	r0, 7
    293e:	02 d0       	rcall	.+4      	; 0x2944 <__divmodsi4_neg2>
    2940:	46 f4       	brtc	.+16     	; 0x2952 <__divmodsi4_exit>
    2942:	08 c0       	rjmp	.+16     	; 0x2954 <__negsi2>

00002944 <__divmodsi4_neg2>:
    2944:	50 95       	com	r21
    2946:	40 95       	com	r20
    2948:	30 95       	com	r19
    294a:	21 95       	neg	r18
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	4f 4f       	sbci	r20, 0xFF	; 255
    2950:	5f 4f       	sbci	r21, 0xFF	; 255

00002952 <__divmodsi4_exit>:
    2952:	08 95       	ret

00002954 <__negsi2>:
    2954:	90 95       	com	r25
    2956:	80 95       	com	r24
    2958:	70 95       	com	r23
    295a:	61 95       	neg	r22
    295c:	7f 4f       	sbci	r23, 0xFF	; 255
    295e:	8f 4f       	sbci	r24, 0xFF	; 255
    2960:	9f 4f       	sbci	r25, 0xFF	; 255
    2962:	08 95       	ret

00002964 <__umulhisi3>:
    2964:	a2 9f       	mul	r26, r18
    2966:	b0 01       	movw	r22, r0
    2968:	b3 9f       	mul	r27, r19
    296a:	c0 01       	movw	r24, r0
    296c:	a3 9f       	mul	r26, r19
    296e:	70 0d       	add	r23, r0
    2970:	81 1d       	adc	r24, r1
    2972:	11 24       	eor	r1, r1
    2974:	91 1d       	adc	r25, r1
    2976:	b2 9f       	mul	r27, r18
    2978:	70 0d       	add	r23, r0
    297a:	81 1d       	adc	r24, r1
    297c:	11 24       	eor	r1, r1
    297e:	91 1d       	adc	r25, r1
    2980:	08 95       	ret

00002982 <__muluhisi3>:
    2982:	f0 df       	rcall	.-32     	; 0x2964 <__umulhisi3>
    2984:	a5 9f       	mul	r26, r21
    2986:	90 0d       	add	r25, r0
    2988:	b4 9f       	mul	r27, r20
    298a:	90 0d       	add	r25, r0
    298c:	a4 9f       	mul	r26, r20
    298e:	80 0d       	add	r24, r0
    2990:	91 1d       	adc	r25, r1
    2992:	11 24       	eor	r1, r1
    2994:	08 95       	ret

00002996 <__mulshisi3>:
    2996:	b7 ff       	sbrs	r27, 7
    2998:	f4 cf       	rjmp	.-24     	; 0x2982 <__muluhisi3>

0000299a <__mulohisi3>:
    299a:	f3 df       	rcall	.-26     	; 0x2982 <__muluhisi3>
    299c:	82 1b       	sub	r24, r18
    299e:	93 0b       	sbc	r25, r19
    29a0:	08 95       	ret

000029a2 <__muldi3>:
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	1f 93       	push	r17
    29a8:	0f 93       	push	r16
    29aa:	9a 9d       	mul	r25, r10
    29ac:	f0 2d       	mov	r31, r0
    29ae:	21 9f       	mul	r18, r17
    29b0:	f0 0d       	add	r31, r0
    29b2:	8b 9d       	mul	r24, r11
    29b4:	f0 0d       	add	r31, r0
    29b6:	8a 9d       	mul	r24, r10
    29b8:	e0 2d       	mov	r30, r0
    29ba:	f1 0d       	add	r31, r1
    29bc:	03 9f       	mul	r16, r19
    29be:	f0 0d       	add	r31, r0
    29c0:	02 9f       	mul	r16, r18
    29c2:	e0 0d       	add	r30, r0
    29c4:	f1 1d       	adc	r31, r1
    29c6:	4e 9d       	mul	r20, r14
    29c8:	e0 0d       	add	r30, r0
    29ca:	f1 1d       	adc	r31, r1
    29cc:	5e 9d       	mul	r21, r14
    29ce:	f0 0d       	add	r31, r0
    29d0:	4f 9d       	mul	r20, r15
    29d2:	f0 0d       	add	r31, r0
    29d4:	7f 93       	push	r23
    29d6:	6f 93       	push	r22
    29d8:	bf 92       	push	r11
    29da:	af 92       	push	r10
    29dc:	5f 93       	push	r21
    29de:	4f 93       	push	r20
    29e0:	d5 01       	movw	r26, r10
    29e2:	c0 df       	rcall	.-128    	; 0x2964 <__umulhisi3>
    29e4:	8b 01       	movw	r16, r22
    29e6:	ac 01       	movw	r20, r24
    29e8:	d7 01       	movw	r26, r14
    29ea:	bc df       	rcall	.-136    	; 0x2964 <__umulhisi3>
    29ec:	eb 01       	movw	r28, r22
    29ee:	e8 0f       	add	r30, r24
    29f0:	f9 1f       	adc	r31, r25
    29f2:	d6 01       	movw	r26, r12
    29f4:	1f d0       	rcall	.+62     	; 0x2a34 <__muldi3_6>
    29f6:	2f 91       	pop	r18
    29f8:	3f 91       	pop	r19
    29fa:	d6 01       	movw	r26, r12
    29fc:	b3 df       	rcall	.-154    	; 0x2964 <__umulhisi3>
    29fe:	c6 0f       	add	r28, r22
    2a00:	d7 1f       	adc	r29, r23
    2a02:	e8 1f       	adc	r30, r24
    2a04:	f9 1f       	adc	r31, r25
    2a06:	af 91       	pop	r26
    2a08:	bf 91       	pop	r27
    2a0a:	14 d0       	rcall	.+40     	; 0x2a34 <__muldi3_6>
    2a0c:	2f 91       	pop	r18
    2a0e:	3f 91       	pop	r19
    2a10:	a9 df       	rcall	.-174    	; 0x2964 <__umulhisi3>
    2a12:	c6 0f       	add	r28, r22
    2a14:	d7 1f       	adc	r29, r23
    2a16:	e8 1f       	adc	r30, r24
    2a18:	f9 1f       	adc	r31, r25
    2a1a:	d6 01       	movw	r26, r12
    2a1c:	a3 df       	rcall	.-186    	; 0x2964 <__umulhisi3>
    2a1e:	e6 0f       	add	r30, r22
    2a20:	f7 1f       	adc	r31, r23
    2a22:	98 01       	movw	r18, r16
    2a24:	be 01       	movw	r22, r28
    2a26:	cf 01       	movw	r24, r30
    2a28:	11 24       	eor	r1, r1
    2a2a:	0f 91       	pop	r16
    2a2c:	1f 91       	pop	r17
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <__muldi3_6>:
    2a34:	97 df       	rcall	.-210    	; 0x2964 <__umulhisi3>
    2a36:	46 0f       	add	r20, r22
    2a38:	57 1f       	adc	r21, r23
    2a3a:	c8 1f       	adc	r28, r24
    2a3c:	d9 1f       	adc	r29, r25
    2a3e:	08 f4       	brcc	.+2      	; 0x2a42 <__muldi3_6+0xe>
    2a40:	31 96       	adiw	r30, 0x01	; 1
    2a42:	08 95       	ret

00002a44 <__ftoa_engine>:
    2a44:	28 30       	cpi	r18, 0x08	; 8
    2a46:	08 f0       	brcs	.+2      	; 0x2a4a <__ftoa_engine+0x6>
    2a48:	27 e0       	ldi	r18, 0x07	; 7
    2a4a:	33 27       	eor	r19, r19
    2a4c:	da 01       	movw	r26, r20
    2a4e:	99 0f       	add	r25, r25
    2a50:	31 1d       	adc	r19, r1
    2a52:	87 fd       	sbrc	r24, 7
    2a54:	91 60       	ori	r25, 0x01	; 1
    2a56:	00 96       	adiw	r24, 0x00	; 0
    2a58:	61 05       	cpc	r22, r1
    2a5a:	71 05       	cpc	r23, r1
    2a5c:	39 f4       	brne	.+14     	; 0x2a6c <__ftoa_engine+0x28>
    2a5e:	32 60       	ori	r19, 0x02	; 2
    2a60:	2e 5f       	subi	r18, 0xFE	; 254
    2a62:	3d 93       	st	X+, r19
    2a64:	30 e3       	ldi	r19, 0x30	; 48
    2a66:	2a 95       	dec	r18
    2a68:	e1 f7       	brne	.-8      	; 0x2a62 <__ftoa_engine+0x1e>
    2a6a:	08 95       	ret
    2a6c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a6e:	30 f0       	brcs	.+12     	; 0x2a7c <__ftoa_engine+0x38>
    2a70:	80 38       	cpi	r24, 0x80	; 128
    2a72:	71 05       	cpc	r23, r1
    2a74:	61 05       	cpc	r22, r1
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <__ftoa_engine+0x36>
    2a78:	3c 5f       	subi	r19, 0xFC	; 252
    2a7a:	3c 5f       	subi	r19, 0xFC	; 252
    2a7c:	3d 93       	st	X+, r19
    2a7e:	91 30       	cpi	r25, 0x01	; 1
    2a80:	08 f0       	brcs	.+2      	; 0x2a84 <__ftoa_engine+0x40>
    2a82:	80 68       	ori	r24, 0x80	; 128
    2a84:	91 1d       	adc	r25, r1
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	1f 93       	push	r17
    2a8c:	0f 93       	push	r16
    2a8e:	ff 92       	push	r15
    2a90:	ef 92       	push	r14
    2a92:	19 2f       	mov	r17, r25
    2a94:	98 7f       	andi	r25, 0xF8	; 248
    2a96:	96 95       	lsr	r25
    2a98:	e9 2f       	mov	r30, r25
    2a9a:	96 95       	lsr	r25
    2a9c:	96 95       	lsr	r25
    2a9e:	e9 0f       	add	r30, r25
    2aa0:	ff 27       	eor	r31, r31
    2aa2:	ea 5a       	subi	r30, 0xAA	; 170
    2aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    2aa6:	99 27       	eor	r25, r25
    2aa8:	33 27       	eor	r19, r19
    2aaa:	ee 24       	eor	r14, r14
    2aac:	ff 24       	eor	r15, r15
    2aae:	a7 01       	movw	r20, r14
    2ab0:	e7 01       	movw	r28, r14
    2ab2:	05 90       	lpm	r0, Z+
    2ab4:	08 94       	sec
    2ab6:	07 94       	ror	r0
    2ab8:	28 f4       	brcc	.+10     	; 0x2ac4 <__ftoa_engine+0x80>
    2aba:	36 0f       	add	r19, r22
    2abc:	e7 1e       	adc	r14, r23
    2abe:	f8 1e       	adc	r15, r24
    2ac0:	49 1f       	adc	r20, r25
    2ac2:	51 1d       	adc	r21, r1
    2ac4:	66 0f       	add	r22, r22
    2ac6:	77 1f       	adc	r23, r23
    2ac8:	88 1f       	adc	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	06 94       	lsr	r0
    2ace:	a1 f7       	brne	.-24     	; 0x2ab8 <__ftoa_engine+0x74>
    2ad0:	05 90       	lpm	r0, Z+
    2ad2:	07 94       	ror	r0
    2ad4:	28 f4       	brcc	.+10     	; 0x2ae0 <__ftoa_engine+0x9c>
    2ad6:	e7 0e       	add	r14, r23
    2ad8:	f8 1e       	adc	r15, r24
    2ada:	49 1f       	adc	r20, r25
    2adc:	56 1f       	adc	r21, r22
    2ade:	c1 1d       	adc	r28, r1
    2ae0:	77 0f       	add	r23, r23
    2ae2:	88 1f       	adc	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	66 1f       	adc	r22, r22
    2ae8:	06 94       	lsr	r0
    2aea:	a1 f7       	brne	.-24     	; 0x2ad4 <__ftoa_engine+0x90>
    2aec:	05 90       	lpm	r0, Z+
    2aee:	07 94       	ror	r0
    2af0:	28 f4       	brcc	.+10     	; 0x2afc <__ftoa_engine+0xb8>
    2af2:	f8 0e       	add	r15, r24
    2af4:	49 1f       	adc	r20, r25
    2af6:	56 1f       	adc	r21, r22
    2af8:	c7 1f       	adc	r28, r23
    2afa:	d1 1d       	adc	r29, r1
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	66 1f       	adc	r22, r22
    2b02:	77 1f       	adc	r23, r23
    2b04:	06 94       	lsr	r0
    2b06:	a1 f7       	brne	.-24     	; 0x2af0 <__ftoa_engine+0xac>
    2b08:	05 90       	lpm	r0, Z+
    2b0a:	07 94       	ror	r0
    2b0c:	20 f4       	brcc	.+8      	; 0x2b16 <__ftoa_engine+0xd2>
    2b0e:	49 0f       	add	r20, r25
    2b10:	56 1f       	adc	r21, r22
    2b12:	c7 1f       	adc	r28, r23
    2b14:	d8 1f       	adc	r29, r24
    2b16:	99 0f       	add	r25, r25
    2b18:	66 1f       	adc	r22, r22
    2b1a:	77 1f       	adc	r23, r23
    2b1c:	88 1f       	adc	r24, r24
    2b1e:	06 94       	lsr	r0
    2b20:	a9 f7       	brne	.-22     	; 0x2b0c <__ftoa_engine+0xc8>
    2b22:	84 91       	lpm	r24, Z
    2b24:	10 95       	com	r17
    2b26:	17 70       	andi	r17, 0x07	; 7
    2b28:	41 f0       	breq	.+16     	; 0x2b3a <__ftoa_engine+0xf6>
    2b2a:	d6 95       	lsr	r29
    2b2c:	c7 95       	ror	r28
    2b2e:	57 95       	ror	r21
    2b30:	47 95       	ror	r20
    2b32:	f7 94       	ror	r15
    2b34:	e7 94       	ror	r14
    2b36:	1a 95       	dec	r17
    2b38:	c1 f7       	brne	.-16     	; 0x2b2a <__ftoa_engine+0xe6>
    2b3a:	ec ef       	ldi	r30, 0xFC	; 252
    2b3c:	f1 e0       	ldi	r31, 0x01	; 1
    2b3e:	68 94       	set
    2b40:	15 90       	lpm	r1, Z+
    2b42:	15 91       	lpm	r17, Z+
    2b44:	35 91       	lpm	r19, Z+
    2b46:	65 91       	lpm	r22, Z+
    2b48:	95 91       	lpm	r25, Z+
    2b4a:	05 90       	lpm	r0, Z+
    2b4c:	7f e2       	ldi	r23, 0x2F	; 47
    2b4e:	73 95       	inc	r23
    2b50:	e1 18       	sub	r14, r1
    2b52:	f1 0a       	sbc	r15, r17
    2b54:	43 0b       	sbc	r20, r19
    2b56:	56 0b       	sbc	r21, r22
    2b58:	c9 0b       	sbc	r28, r25
    2b5a:	d0 09       	sbc	r29, r0
    2b5c:	c0 f7       	brcc	.-16     	; 0x2b4e <__ftoa_engine+0x10a>
    2b5e:	e1 0c       	add	r14, r1
    2b60:	f1 1e       	adc	r15, r17
    2b62:	43 1f       	adc	r20, r19
    2b64:	56 1f       	adc	r21, r22
    2b66:	c9 1f       	adc	r28, r25
    2b68:	d0 1d       	adc	r29, r0
    2b6a:	7e f4       	brtc	.+30     	; 0x2b8a <__ftoa_engine+0x146>
    2b6c:	70 33       	cpi	r23, 0x30	; 48
    2b6e:	11 f4       	brne	.+4      	; 0x2b74 <__ftoa_engine+0x130>
    2b70:	8a 95       	dec	r24
    2b72:	e6 cf       	rjmp	.-52     	; 0x2b40 <__ftoa_engine+0xfc>
    2b74:	e8 94       	clt
    2b76:	01 50       	subi	r16, 0x01	; 1
    2b78:	30 f0       	brcs	.+12     	; 0x2b86 <__ftoa_engine+0x142>
    2b7a:	08 0f       	add	r16, r24
    2b7c:	0a f4       	brpl	.+2      	; 0x2b80 <__ftoa_engine+0x13c>
    2b7e:	00 27       	eor	r16, r16
    2b80:	02 17       	cp	r16, r18
    2b82:	08 f4       	brcc	.+2      	; 0x2b86 <__ftoa_engine+0x142>
    2b84:	20 2f       	mov	r18, r16
    2b86:	23 95       	inc	r18
    2b88:	02 2f       	mov	r16, r18
    2b8a:	7a 33       	cpi	r23, 0x3A	; 58
    2b8c:	28 f0       	brcs	.+10     	; 0x2b98 <__ftoa_engine+0x154>
    2b8e:	79 e3       	ldi	r23, 0x39	; 57
    2b90:	7d 93       	st	X+, r23
    2b92:	2a 95       	dec	r18
    2b94:	e9 f7       	brne	.-6      	; 0x2b90 <__ftoa_engine+0x14c>
    2b96:	10 c0       	rjmp	.+32     	; 0x2bb8 <__ftoa_engine+0x174>
    2b98:	7d 93       	st	X+, r23
    2b9a:	2a 95       	dec	r18
    2b9c:	89 f6       	brne	.-94     	; 0x2b40 <__ftoa_engine+0xfc>
    2b9e:	06 94       	lsr	r0
    2ba0:	97 95       	ror	r25
    2ba2:	67 95       	ror	r22
    2ba4:	37 95       	ror	r19
    2ba6:	17 95       	ror	r17
    2ba8:	17 94       	ror	r1
    2baa:	e1 18       	sub	r14, r1
    2bac:	f1 0a       	sbc	r15, r17
    2bae:	43 0b       	sbc	r20, r19
    2bb0:	56 0b       	sbc	r21, r22
    2bb2:	c9 0b       	sbc	r28, r25
    2bb4:	d0 09       	sbc	r29, r0
    2bb6:	98 f0       	brcs	.+38     	; 0x2bde <__ftoa_engine+0x19a>
    2bb8:	23 95       	inc	r18
    2bba:	7e 91       	ld	r23, -X
    2bbc:	73 95       	inc	r23
    2bbe:	7a 33       	cpi	r23, 0x3A	; 58
    2bc0:	08 f0       	brcs	.+2      	; 0x2bc4 <__ftoa_engine+0x180>
    2bc2:	70 e3       	ldi	r23, 0x30	; 48
    2bc4:	7c 93       	st	X, r23
    2bc6:	20 13       	cpse	r18, r16
    2bc8:	b8 f7       	brcc	.-18     	; 0x2bb8 <__ftoa_engine+0x174>
    2bca:	7e 91       	ld	r23, -X
    2bcc:	70 61       	ori	r23, 0x10	; 16
    2bce:	7d 93       	st	X+, r23
    2bd0:	30 f0       	brcs	.+12     	; 0x2bde <__ftoa_engine+0x19a>
    2bd2:	83 95       	inc	r24
    2bd4:	71 e3       	ldi	r23, 0x31	; 49
    2bd6:	7d 93       	st	X+, r23
    2bd8:	70 e3       	ldi	r23, 0x30	; 48
    2bda:	2a 95       	dec	r18
    2bdc:	e1 f7       	brne	.-8      	; 0x2bd6 <__ftoa_engine+0x192>
    2bde:	11 24       	eor	r1, r1
    2be0:	ef 90       	pop	r14
    2be2:	ff 90       	pop	r15
    2be4:	0f 91       	pop	r16
    2be6:	1f 91       	pop	r17
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	99 27       	eor	r25, r25
    2bee:	87 fd       	sbrc	r24, 7
    2bf0:	90 95       	com	r25
    2bf2:	08 95       	ret

00002bf4 <strnlen_P>:
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	05 90       	lpm	r0, Z+
    2bf8:	61 50       	subi	r22, 0x01	; 1
    2bfa:	70 40       	sbci	r23, 0x00	; 0
    2bfc:	01 10       	cpse	r0, r1
    2bfe:	d8 f7       	brcc	.-10     	; 0x2bf6 <strnlen_P+0x2>
    2c00:	80 95       	com	r24
    2c02:	90 95       	com	r25
    2c04:	8e 0f       	add	r24, r30
    2c06:	9f 1f       	adc	r25, r31
    2c08:	08 95       	ret

00002c0a <strnlen>:
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	61 50       	subi	r22, 0x01	; 1
    2c0e:	70 40       	sbci	r23, 0x00	; 0
    2c10:	01 90       	ld	r0, Z+
    2c12:	01 10       	cpse	r0, r1
    2c14:	d8 f7       	brcc	.-10     	; 0x2c0c <strnlen+0x2>
    2c16:	80 95       	com	r24
    2c18:	90 95       	com	r25
    2c1a:	8e 0f       	add	r24, r30
    2c1c:	9f 1f       	adc	r25, r31
    2c1e:	08 95       	ret

00002c20 <fputc>:
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	18 2f       	mov	r17, r24
    2c2a:	09 2f       	mov	r16, r25
    2c2c:	eb 01       	movw	r28, r22
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	81 fd       	sbrc	r24, 1
    2c32:	03 c0       	rjmp	.+6      	; 0x2c3a <fputc+0x1a>
    2c34:	8f ef       	ldi	r24, 0xFF	; 255
    2c36:	9f ef       	ldi	r25, 0xFF	; 255
    2c38:	20 c0       	rjmp	.+64     	; 0x2c7a <fputc+0x5a>
    2c3a:	82 ff       	sbrs	r24, 2
    2c3c:	10 c0       	rjmp	.+32     	; 0x2c5e <fputc+0x3e>
    2c3e:	4e 81       	ldd	r20, Y+6	; 0x06
    2c40:	5f 81       	ldd	r21, Y+7	; 0x07
    2c42:	2c 81       	ldd	r18, Y+4	; 0x04
    2c44:	3d 81       	ldd	r19, Y+5	; 0x05
    2c46:	42 17       	cp	r20, r18
    2c48:	53 07       	cpc	r21, r19
    2c4a:	7c f4       	brge	.+30     	; 0x2c6a <fputc+0x4a>
    2c4c:	e8 81       	ld	r30, Y
    2c4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c50:	9f 01       	movw	r18, r30
    2c52:	2f 5f       	subi	r18, 0xFF	; 255
    2c54:	3f 4f       	sbci	r19, 0xFF	; 255
    2c56:	28 83       	st	Y, r18
    2c58:	39 83       	std	Y+1, r19	; 0x01
    2c5a:	10 83       	st	Z, r17
    2c5c:	06 c0       	rjmp	.+12     	; 0x2c6a <fputc+0x4a>
    2c5e:	e8 85       	ldd	r30, Y+8	; 0x08
    2c60:	f9 85       	ldd	r31, Y+9	; 0x09
    2c62:	81 2f       	mov	r24, r17
    2c64:	19 95       	eicall
    2c66:	89 2b       	or	r24, r25
    2c68:	29 f7       	brne	.-54     	; 0x2c34 <fputc+0x14>
    2c6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c6c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c6e:	2f 5f       	subi	r18, 0xFF	; 255
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	2e 83       	std	Y+6, r18	; 0x06
    2c74:	3f 83       	std	Y+7, r19	; 0x07
    2c76:	81 2f       	mov	r24, r17
    2c78:	90 2f       	mov	r25, r16
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <sprintf>:
    2c84:	0f 93       	push	r16
    2c86:	1f 93       	push	r17
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	2e 97       	sbiw	r28, 0x0e	; 14
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0e 89       	ldd	r16, Y+22	; 0x16
    2c98:	1f 89       	ldd	r17, Y+23	; 0x17
    2c9a:	86 e0       	ldi	r24, 0x06	; 6
    2c9c:	8c 83       	std	Y+4, r24	; 0x04
    2c9e:	09 83       	std	Y+1, r16	; 0x01
    2ca0:	1a 83       	std	Y+2, r17	; 0x02
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
    2ca4:	9f e7       	ldi	r25, 0x7F	; 127
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	ae 01       	movw	r20, r28
    2cac:	46 5e       	subi	r20, 0xE6	; 230
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	68 8d       	ldd	r22, Y+24	; 0x18
    2cb2:	79 8d       	ldd	r23, Y+25	; 0x19
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	87 da       	rcall	.-2802   	; 0x21c8 <vfprintf>
    2cba:	ef 81       	ldd	r30, Y+7	; 0x07
    2cbc:	f8 85       	ldd	r31, Y+8	; 0x08
    2cbe:	e0 0f       	add	r30, r16
    2cc0:	f1 1f       	adc	r31, r17
    2cc2:	10 82       	st	Z, r1
    2cc4:	2e 96       	adiw	r28, 0x0e	; 14
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <__ultoa_invert>:
    2cd4:	fa 01       	movw	r30, r20
    2cd6:	aa 27       	eor	r26, r26
    2cd8:	28 30       	cpi	r18, 0x08	; 8
    2cda:	51 f1       	breq	.+84     	; 0x2d30 <__ultoa_invert+0x5c>
    2cdc:	20 31       	cpi	r18, 0x10	; 16
    2cde:	81 f1       	breq	.+96     	; 0x2d40 <__ultoa_invert+0x6c>
    2ce0:	e8 94       	clt
    2ce2:	6f 93       	push	r22
    2ce4:	6e 7f       	andi	r22, 0xFE	; 254
    2ce6:	6e 5f       	subi	r22, 0xFE	; 254
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	8f 4f       	sbci	r24, 0xFF	; 255
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	af 4f       	sbci	r26, 0xFF	; 255
    2cf0:	b1 e0       	ldi	r27, 0x01	; 1
    2cf2:	3e d0       	rcall	.+124    	; 0x2d70 <__ultoa_invert+0x9c>
    2cf4:	b4 e0       	ldi	r27, 0x04	; 4
    2cf6:	3c d0       	rcall	.+120    	; 0x2d70 <__ultoa_invert+0x9c>
    2cf8:	67 0f       	add	r22, r23
    2cfa:	78 1f       	adc	r23, r24
    2cfc:	89 1f       	adc	r24, r25
    2cfe:	9a 1f       	adc	r25, r26
    2d00:	a1 1d       	adc	r26, r1
    2d02:	68 0f       	add	r22, r24
    2d04:	79 1f       	adc	r23, r25
    2d06:	8a 1f       	adc	r24, r26
    2d08:	91 1d       	adc	r25, r1
    2d0a:	a1 1d       	adc	r26, r1
    2d0c:	6a 0f       	add	r22, r26
    2d0e:	71 1d       	adc	r23, r1
    2d10:	81 1d       	adc	r24, r1
    2d12:	91 1d       	adc	r25, r1
    2d14:	a1 1d       	adc	r26, r1
    2d16:	20 d0       	rcall	.+64     	; 0x2d58 <__ultoa_invert+0x84>
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <__ultoa_invert+0x48>
    2d1a:	68 94       	set
    2d1c:	3f 91       	pop	r19
    2d1e:	2a e0       	ldi	r18, 0x0A	; 10
    2d20:	26 9f       	mul	r18, r22
    2d22:	11 24       	eor	r1, r1
    2d24:	30 19       	sub	r19, r0
    2d26:	30 5d       	subi	r19, 0xD0	; 208
    2d28:	31 93       	st	Z+, r19
    2d2a:	de f6       	brtc	.-74     	; 0x2ce2 <__ultoa_invert+0xe>
    2d2c:	cf 01       	movw	r24, r30
    2d2e:	08 95       	ret
    2d30:	46 2f       	mov	r20, r22
    2d32:	47 70       	andi	r20, 0x07	; 7
    2d34:	40 5d       	subi	r20, 0xD0	; 208
    2d36:	41 93       	st	Z+, r20
    2d38:	b3 e0       	ldi	r27, 0x03	; 3
    2d3a:	0f d0       	rcall	.+30     	; 0x2d5a <__ultoa_invert+0x86>
    2d3c:	c9 f7       	brne	.-14     	; 0x2d30 <__ultoa_invert+0x5c>
    2d3e:	f6 cf       	rjmp	.-20     	; 0x2d2c <__ultoa_invert+0x58>
    2d40:	46 2f       	mov	r20, r22
    2d42:	4f 70       	andi	r20, 0x0F	; 15
    2d44:	40 5d       	subi	r20, 0xD0	; 208
    2d46:	4a 33       	cpi	r20, 0x3A	; 58
    2d48:	18 f0       	brcs	.+6      	; 0x2d50 <__ultoa_invert+0x7c>
    2d4a:	49 5d       	subi	r20, 0xD9	; 217
    2d4c:	31 fd       	sbrc	r19, 1
    2d4e:	40 52       	subi	r20, 0x20	; 32
    2d50:	41 93       	st	Z+, r20
    2d52:	02 d0       	rcall	.+4      	; 0x2d58 <__ultoa_invert+0x84>
    2d54:	a9 f7       	brne	.-22     	; 0x2d40 <__ultoa_invert+0x6c>
    2d56:	ea cf       	rjmp	.-44     	; 0x2d2c <__ultoa_invert+0x58>
    2d58:	b4 e0       	ldi	r27, 0x04	; 4
    2d5a:	a6 95       	lsr	r26
    2d5c:	97 95       	ror	r25
    2d5e:	87 95       	ror	r24
    2d60:	77 95       	ror	r23
    2d62:	67 95       	ror	r22
    2d64:	ba 95       	dec	r27
    2d66:	c9 f7       	brne	.-14     	; 0x2d5a <__ultoa_invert+0x86>
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	61 05       	cpc	r22, r1
    2d6c:	71 05       	cpc	r23, r1
    2d6e:	08 95       	ret
    2d70:	9b 01       	movw	r18, r22
    2d72:	ac 01       	movw	r20, r24
    2d74:	0a 2e       	mov	r0, r26
    2d76:	06 94       	lsr	r0
    2d78:	57 95       	ror	r21
    2d7a:	47 95       	ror	r20
    2d7c:	37 95       	ror	r19
    2d7e:	27 95       	ror	r18
    2d80:	ba 95       	dec	r27
    2d82:	c9 f7       	brne	.-14     	; 0x2d76 <__ultoa_invert+0xa2>
    2d84:	62 0f       	add	r22, r18
    2d86:	73 1f       	adc	r23, r19
    2d88:	84 1f       	adc	r24, r20
    2d8a:	95 1f       	adc	r25, r21
    2d8c:	a0 1d       	adc	r26, r0
    2d8e:	08 95       	ret

00002d90 <_exit>:
    2d90:	f8 94       	cli

00002d92 <__stop_program>:
    2d92:	ff cf       	rjmp	.-2      	; 0x2d92 <__stop_program>
